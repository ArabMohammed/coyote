((((((((((x10210 * x10211) * (x10213 * x10214)) * ((x10217 * x10218) * (x10220 * x10221))) * (((x10225 * x10226) * (x10228 * x10229)) * ((x10232 * x10233) * (x10235 * x10236)))) * ((((x10241 * x10242) * (x10244 * x10245)) * ((x10248 * x10249) * (x10251 * x10252))) * (((x10256 * x10257) * (x10259 * x10260)) * ((x10263 * x10264) * (x10266 * x10267))))) * (((((x10273 * x10274) * (x10276 * x10277)) * ((x10280 * x10281) * (x10283 * x10284))) * (((x10288 * x10289) * (x10291 * x10292)) * ((x10295 * x10296) * (x10298 * x10299)))) * ((((x10304 * x10305) * (x10307 * x10308)) * ((x10311 * x10312) * (x10314 * x10315))) * (((x10319 * x10320) * (x10322 * x10323)) * ((x10326 * x10327) * (x10329 * x10330)))))) * ((((((x10337 * x10338) * (x10340 * x10341)) * ((x10344 * x10345) * (x10347 * x10348))) * (((x10352 * x10353) * (x10355 * x10356)) * ((x10359 * x10360) * (x10362 * x10363)))) * ((((x10368 * x10369) * (x10371 * x10372)) * ((x10375 * x10376) * (x10378 * x10379))) * (((x10383 * x10384) * (x10386 * x10387)) * ((x10390 * x10391) * (x10393 * x10394))))) * (((((x10400 * x10401) * (x10403 * x10404)) * ((x10407 * x10408) * (x10410 * x10411))) * (((x10415 * x10416) * (x10418 * x10419)) * ((x10422 * x10423) * (x10425 * x10426)))) * ((((x10431 * x10432) * (x10434 * x10435)) * ((x10438 * x10439) * (x10441 * x10442))) * (((x10446 * x10447) * (x10449 * x10450)) * ((x10453 * x10454) * (x10456 * x10457))))))) * (((((((x10465 * x10466) * (x10468 * x10469)) * ((x10472 * x10473) * (x10475 * x10476))) * (((x10480 * x10481) * (x10483 * x10484)) * ((x10487 * x10488) * (x10490 * x10491)))) * ((((x10496 * x10497) * (x10499 * x10500)) * ((x10503 * x10504) * (x10506 * x10507))) * (((x10511 * x10512) * (x10514 * x10515)) * ((x10518 * x10519) * (x10521 * x10522))))) * (((((x10528 * x10529) * (x10531 * x10532)) * ((x10535 * x10536) * (x10538 * x10539))) * (((x10543 * x10544) * (x10546 * x10547)) * ((x10550 * x10551) * (x10553 * x10554)))) * ((((x10559 * x10560) * (x10562 * x10563)) * ((x10566 * x10567) * (x10569 * x10570))) * (((x10574 * x10575) * (x10577 * x10578)) * ((x10581 * x10582) * (x10584 * x10585)))))) * ((((((x10592 * x10593) * (x10595 * x10596)) * ((x10599 * x10600) * (x10602 * x10603))) * (((x10607 * x10608) * (x10610 * x10611)) * ((x10614 * x10615) * (x10617 * x10618)))) * ((((x10623 * x10624) * (x10626 * x10627)) * ((x10630 * x10631) * (x10633 * x10634))) * (((x10638 * x10639) * (x10641 * x10642)) * ((x10645 * x10646) * (x10648 * x10649))))) * (((((x10655 * x10656) * (x10658 * x10659)) * ((x10662 * x10663) * (x10665 * x10666))) * (((x10670 * x10671) * (x10673 * x10674)) * ((x10677 * x10678) * (x10680 * x10681)))) * ((((x10686 * x10687) * (x10689 * x10690)) * ((x10693 * x10694) * (x10696 * x10697))) * (((x10701 * x10702) * (x10704 * x10705)) * ((x10708 * x10709) * (x10711 * x10712)))))))) * ((((((((x10721 * x10722) * (x10724 * x10725)) * ((x10728 * x10729) * (x10731 * x10732))) * (((x10736 * x10737) * (x10739 * x10740)) * ((x10743 * x10744) * (x10746 * x10747)))) * ((((x10752 * x10753) * (x10755 * x10756)) * ((x10759 * x10760) * (x10762 * x10763))) * (((x10767 * x10768) * (x10770 * x10771)) * ((x10774 * x10775) * (x10777 * x10778))))) * (((((x10784 * x10785) * (x10787 * x10788)) * ((x10791 * x10792) * (x10794 * x10795))) * (((x10799 * x10800) * (x10802 * x10803)) * ((x10806 * x10807) * (x10809 * x10810)))) * ((((x10815 * x10816) * (x10818 * x10819)) * ((x10822 * x10823) * (x10825 * x10826))) * (((x10830 * x10831) * (x10833 * x10834)) * ((x10837 * x10838) * (x10840 * x10841)))))) * ((((((x10848 * x10849) * (x10851 * x10852)) * ((x10855 * x10856) * (x10858 * x10859))) * (((x10863 * x10864) * (x10866 * x10867)) * ((x10870 * x10871) * (x10873 * x10874)))) * ((((x10879 * x10880) * (x10882 * x10883)) * ((x10886 * x10887) * (x10889 * x10890))) * (((x10894 * x10895) * (x10897 * x10898)) * ((x10901 * x10902) * (x10904 * x10905))))) * (((((x10911 * x10912) * (x10914 * x10915)) * ((x10918 * x10919) * (x10921 * x10922))) * (((x10926 * x10927) * (x10929 * x10930)) * ((x10933 * x10934) * (x10936 * x10937)))) * ((((x10942 * x10943) * (x10945 * x10946)) * ((x10949 * x10950) * (x10952 * x10953))) * (((x10957 * x10958) * (x10960 * x10961)) * ((x10964 * x10965) * (x10967 * x10968))))))) * (((((((x10976 * x10977) * (x10979 * x10980)) * ((x10983 * x10984) * (x10986 * x10987))) * (((x10991 * x10992) * (x10994 * x10995)) * ((x10998 * x10999) * (x11001 * x11002)))) * ((((x11007 * x11008) * (x11010 * x11011)) * ((x11014 * x11015) * (x11017 * x11018))) * (((x11022 * x11023) * (x11025 * x11026)) * ((x11029 * x11030) * (x11032 * x11033))))) * (((((x11039 * x11040) * (x11042 * x11043)) * ((x11046 * x11047) * (x11049 * x11050))) * (((x11054 * x11055) * (x11057 * x11058)) * ((x11061 * x11062) * (x11064 * x11065)))) * ((((x11070 * x11071) * (x11073 * x11074)) * ((x11077 * x11078) * (x11080 * x11081))) * (((x11085 * x11086) * (x11088 * x11089)) * ((x11092 * x11093) * (x11095 * x11096)))))) * ((((((x11103 * x11104) * (x11106 * x11107)) * ((x11110 * x11111) * (x11113 * x11114))) * (((x11118 * x11119) * (x11121 * x11122)) * ((x11125 * x11126) * (x11128 * x11129)))) * ((((x11134 * x11135) * (x11137 * x11138)) * ((x11141 * x11142) * (x11144 * x11145))) * (((x11149 * x11150) * (x11152 * x11153)) * ((x11156 * x11157) * (x11159 * x11160))))) * (((((x11166 * x11167) * (x11169 * x11170)) * ((x11173 * x11174) * (x11176 * x11177))) * (((x11181 * x11182) * (x11184 * x11185)) * ((x11188 * x11189) * (x11191 * x11192)))) * ((((x11197 * x11198) * (x11200 * x11201)) * ((x11204 * x11205) * (x11207 * x11208))) * (((x11212 * x11213) * (x11215 * x11216)) * ((x11219 * x11220) * (x11222 * x11223))))))))) * (((((((((x11232 * x11233) * (x11235 * x11236)) * ((x11239 * x11240) * (x11242 * x11243))) * (((x11247 * x11248) * (x11250 * x11251)) * ((x11254 * x11255) * (x11257 * x11258)))) * ((((x11263 * x11264) * (x11266 * x11267)) * ((x11270 * x11271) * (x11273 * x11274))) * (((x11278 * x11279) * (x11281 * x11282)) * ((x11285 * x11286) * (x11288 * x11289))))) * (((((x11295 * x11296) * (x11298 * x11299)) * ((x11302 * x11303) * (x11305 * x11306))) * (((x11310 * x11311) * (x11313 * x11314)) * ((x11317 * x11318) * (x11320 * x11321)))) * ((((x11326 * x11327) * (x11329 * x11330)) * ((x11333 * x11334) * (x11336 * x11337))) * (((x11341 * x11342) * (x11344 * x11345)) * ((x11348 * x11349) * (x11351 * x11352)))))) * ((((((x11359 * x11360) * (x11362 * x11363)) * ((x11366 * x11367) * (x11369 * x11370))) * (((x11374 * x11375) * (x11377 * x11378)) * ((x11381 * x11382) * (x11384 * x11385)))) * ((((x11390 * x11391) * (x11393 * x11394)) * ((x11397 * x11398) * (x11400 * x11401))) * (((x11405 * x11406) * (x11408 * x11409)) * ((x11412 * x11413) * (x11415 * x11416))))) * (((((x11422 * x11423) * (x11425 * x11426)) * ((x11429 * x11430) * (x11432 * x11433))) * (((x11437 * x11438) * (x11440 * x11441)) * ((x11444 * x11445) * (x11447 * x11448)))) * ((((x11453 * x11454) * (x11456 * x11457)) * ((x11460 * x11461) * (x11463 * x11464))) * (((x11468 * x11469) * (x11471 * x11472)) * ((x11475 * x11476) * (x11478 * x11479))))))) * (((((((x11487 * x11488) * (x11490 * x11491)) * ((x11494 * x11495) * (x11497 * x11498))) * (((x11502 * x11503) * (x11505 * x11506)) * ((x11509 * x11510) * (x11512 * x11513)))) * ((((x11518 * x11519) * (x11521 * x11522)) * ((x11525 * x11526) * (x11528 * x11529))) * (((x11533 * x11534) * (x11536 * x11537)) * ((x11540 * x11541) * (x11543 * x11544))))) * (((((x11550 * x11551) * (x11553 * x11554)) * ((x11557 * x11558) * (x11560 * x11561))) * (((x11565 * x11566) * (x11568 * x11569)) * ((x11572 * x11573) * (x11575 * x11576)))) * ((((x11581 * x11582) * (x11584 * x11585)) * ((x11588 * x11589) * (x11591 * x11592))) * (((x11596 * x11597) * (x11599 * x11600)) * ((x11603 * x11604) * (x11606 * x11607)))))) * ((((((x11614 * x11615) * (x11617 * x11618)) * ((x11621 * x11622) * (x11624 * x11625))) * (((x11629 * x11630) * (x11632 * x11633)) * ((x11636 * x11637) * (x11639 * x11640)))) * ((((x11645 * x11646) * (x11648 * x11649)) * ((x11652 * x11653) * (x11655 * x11656))) * (((x11660 * x11661) * (x11663 * x11664)) * ((x11667 * x11668) * (x11670 * x11671))))) * (((((x11677 * x11678) * (x11680 * x11681)) * ((x11684 * x11685) * (x11687 * x11688))) * (((x11692 * x11693) * (x11695 * x11696)) * ((x11699 * x11700) * (x11702 * x11703)))) * ((((x11708 * x11709) * (x11711 * x11712)) * ((x11715 * x11716) * (x11718 * x11719))) * (((x11723 * x11724) * (x11726 * x11727)) * ((x11730 * x11731) * (x11733 * x11734)))))))) * ((((((((x11743 * x11744) * (x11746 * x11747)) * ((x11750 * x11751) * (x11753 * x11754))) * (((x11758 * x11759) * (x11761 * x11762)) * ((x11765 * x11766) * (x11768 * x11769)))) * ((((x11774 * x11775) * (x11777 * x11778)) * ((x11781 * x11782) * (x11784 * x11785))) * (((x11789 * x11790) * (x11792 * x11793)) * ((x11796 * x11797) * (x11799 * x11800))))) * (((((x11806 * x11807) * (x11809 * x11810)) * ((x11813 * x11814) * (x11816 * x11817))) * (((x11821 * x11822) * (x11824 * x11825)) * ((x11828 * x11829) * (x11831 * x11832)))) * ((((x11837 * x11838) * (x11840 * x11841)) * ((x11844 * x11845) * (x11847 * x11848))) * (((x11852 * x11853) * (x11855 * x11856)) * ((x11859 * x11860) * (x11862 * x11863)))))) * ((((((x11870 * x11871) * (x11873 * x11874)) * ((x11877 * x11878) * (x11880 * x11881))) * (((x11885 * x11886) * (x11888 * x11889)) * ((x11892 * x11893) * (x11895 * x11896)))) * ((((x11901 * x11902) * (x11904 * x11905)) * ((x11908 * x11909) * (x11911 * x11912))) * (((x11916 * x11917) * (x11919 * x11920)) * ((x11923 * x11924) * (x11926 * x11927))))) * (((((x11933 * x11934) * (x11936 * x11937)) * ((x11940 * x11941) * (x11943 * x11944))) * (((x11948 * x11949) * (x11951 * x11952)) * ((x11955 * x11956) * (x11958 * x11959)))) * ((((x11964 * x11965) * (x11967 * x11968)) * ((x11971 * x11972) * (x11974 * x11975))) * (((x11979 * x11980) * (x11982 * x11983)) * ((x11986 * x11987) * (x11989 * x11990))))))) * (((((((x11998 * x11999) * (x12001 * x12002)) * ((x12005 * x12006) * (x12008 * x12009))) * (((x12013 * x12014) * (x12016 * x12017)) * ((x12020 * x12021) * (x12023 * x12024)))) * ((((x12029 * x12030) * (x12032 * x12033)) * ((x12036 * x12037) * (x12039 * x12040))) * (((x12044 * x12045) * (x12047 * x12048)) * ((x12051 * x12052) * (x12054 * x12055))))) * (((((x12061 * x12062) * (x12064 * x12065)) * ((x12068 * x12069) * (x12071 * x12072))) * (((x12076 * x12077) * (x12079 * x12080)) * ((x12083 * x12084) * (x12086 * x12087)))) * ((((x12092 * x12093) * (x12095 * x12096)) * ((x12099 * x12100) * (x12102 * x12103))) * (((x12107 * x12108) * (x12110 * x12111)) * ((x12114 * x12115) * (x12117 * x12118)))))) * ((((((x12125 * x12126) * (x12128 * x12129)) * ((x12132 * x12133) * (x12135 * x12136))) * (((x12140 * x12141) * (x12143 * x12144)) * ((x12147 * x12148) * (x12150 * x12151)))) * ((((x12156 * x12157) * (x12159 * x12160)) * ((x12163 * x12164) * (x12166 * x12167))) * (((x12171 * x12172) * (x12174 * x12175)) * ((x12178 * x12179) * (x12181 * x12182))))) * (((((x12188 * x12189) * (x12191 * x12192)) * ((x12195 * x12196) * (x12198 * x12199))) * (((x12203 * x12204) * (x12206 * x12207)) * ((x12210 * x12211) * (x12213 * x12214)))) * ((((x12219 * x12220) * (x12222 * x12223)) * ((x12226 * x12227) * (x12229 * x12230))) * (((x12234 * x12235) * (x12237 * x12238)) * ((x12241 * x12242) * (x12244 * x12245))))))))))
Successfully compiled benchmark tree_100-100_10_2; outputs placed in "outputs/tree_100-100_10_2"!
Configuring benchmark box_blur_3x3...
Compile flags: -DBENCHMARK_NAME=box_blur_3x3 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark box_blur_4x4...
Compile flags: -DBENCHMARK_NAME=box_blur_4x4 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark box_blur_5x5...
Compile flags: -DBENCHMARK_NAME=box_blur_5x5 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark box_blur_8x8...
Compile flags: -DBENCHMARK_NAME=box_blur_8x8 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark dot_product_25x25_fully...
Compile flags: -DBENCHMARK_NAME=dot_product_25x25_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark dot_product_3x3_fully...
Compile flags: -DBENCHMARK_NAME=dot_product_3x3_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark dot_product_4x4_fully...
Compile flags: -DBENCHMARK_NAME=dot_product_4x4_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark dot_product_5x5_fully...
Compile flags: -DBENCHMARK_NAME=dot_product_5x5_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark dot_product_8x8_fully...
Compile flags: -DBENCHMARK_NAME=dot_product_8x8_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark gx_kernel_3x3...
Compile flags: -DBENCHMARK_NAME=gx_kernel_3x3 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark gx_kernel_4x4...
Compile flags: -DBENCHMARK_NAME=gx_kernel_4x4 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark gx_kernel_5x5...
Compile flags: -DBENCHMARK_NAME=gx_kernel_5x5 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark gx_kernel_8x8...
Compile flags: -DBENCHMARK_NAME=gx_kernel_8x8 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark gy_kernel_3x3...
Compile flags: -DBENCHMARK_NAME=gy_kernel_3x3 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark gy_kernel_4x4...
Compile flags: -DBENCHMARK_NAME=gy_kernel_4x4 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark gy_kernel_5x5...
Compile flags: -DBENCHMARK_NAME=gy_kernel_5x5 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark gy_kernel_8x8...
Compile flags: -DBENCHMARK_NAME=gy_kernel_8x8 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark hamming_distance_25...
Compile flags: -DBENCHMARK_NAME=hamming_distance_25 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark hamming_distance_3...
Compile flags: -DBENCHMARK_NAME=hamming_distance_3 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark hamming_distance_32...
Compile flags: -DBENCHMARK_NAME=hamming_distance_32 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark hamming_distance_4...
Compile flags: -DBENCHMARK_NAME=hamming_distance_4 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark hamming_distance_5...
Compile flags: -DBENCHMARK_NAME=hamming_distance_5 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark hamming_distance_8...
Compile flags: -DBENCHMARK_NAME=hamming_distance_8 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark l2_distance_25...
Compile flags: -DBENCHMARK_NAME=l2_distance_25 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark l2_distance_3...
Compile flags: -DBENCHMARK_NAME=l2_distance_3 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark l2_distance_32...
Compile flags: -DBENCHMARK_NAME=l2_distance_32 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark l2_distance_4...
Compile flags: -DBENCHMARK_NAME=l2_distance_4 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark l2_distance_5...
Compile flags: -DBENCHMARK_NAME=l2_distance_5 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark l2_distance_8...
Compile flags: -DBENCHMARK_NAME=l2_distance_8 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark linear_reg_25...
Compile flags: -DBENCHMARK_NAME=linear_reg_25 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark linear_reg_3...
Compile flags: -DBENCHMARK_NAME=linear_reg_3 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark linear_reg_32...
Compile flags: -DBENCHMARK_NAME=linear_reg_32 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark linear_reg_4...
Compile flags: -DBENCHMARK_NAME=linear_reg_4 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark linear_reg_5...
Compile flags: -DBENCHMARK_NAME=linear_reg_5 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark linear_reg_8...
Compile flags: -DBENCHMARK_NAME=linear_reg_8 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark matmul_3x3_fully...
Compile flags: -DBENCHMARK_NAME=matmul_3x3_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark matmul_4x4_fully...
Compile flags: -DBENCHMARK_NAME=matmul_4x4_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark matmul_5x5_fully...
Compile flags: -DBENCHMARK_NAME=matmul_5x5_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark matmul_8x8_fully...
Compile flags: -DBENCHMARK_NAME=matmul_8x8_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark max_3_packed_fully...
Compile flags: -DBENCHMARK_NAME=max_3_packed_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark max_4_packed_fully...
Compile flags: -DBENCHMARK_NAME=max_4_packed_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark max_5_packed_fully...
Compile flags: -DBENCHMARK_NAME=max_5_packed_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark poly_reg_25...
Compile flags: -DBENCHMARK_NAME=poly_reg_25 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark poly_reg_3...
Compile flags: -DBENCHMARK_NAME=poly_reg_3 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark poly_reg_32...
Compile flags: -DBENCHMARK_NAME=poly_reg_32 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark poly_reg_4...
Compile flags: -DBENCHMARK_NAME=poly_reg_4 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark poly_reg_5...
Compile flags: -DBENCHMARK_NAME=poly_reg_5 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark poly_reg_8...
Compile flags: -DBENCHMARK_NAME=poly_reg_8 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark roberts_cross_3x3...
Compile flags: -DBENCHMARK_NAME=roberts_cross_3x3 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark roberts_cross_4x4...
Compile flags: -DBENCHMARK_NAME=roberts_cross_4x4 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark roberts_cross_5x5...
Compile flags: -DBENCHMARK_NAME=roberts_cross_5x5 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark roberts_cross_8x8...
Compile flags: -DBENCHMARK_NAME=roberts_cross_8x8 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark sort_3_packed_fully...
Compile flags: -DBENCHMARK_NAME=sort_3_packed_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark sort_4_packed_fully...
Compile flags: -DBENCHMARK_NAME=sort_4_packed_fully -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark tree_100-100_10_1...
Compile flags: -DBENCHMARK_NAME=tree_100-100_10_1 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark tree_100-100_10_2...
Compile flags: -DBENCHMARK_NAME=tree_100-100_10_2 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark tree_100-100_5_1...
Compile flags: -DBENCHMARK_NAME=tree_100-100_5_1 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark tree_100-100_5_2...
Compile flags: -DBENCHMARK_NAME=tree_100-100_5_2 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark tree_100-50_10_1...
Compile flags: -DBENCHMARK_NAME=tree_100-50_10_1 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark tree_100-50_10_2...
Compile flags: -DBENCHMARK_NAME=tree_100-50_10_2 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark tree_100-50_5_1...
Compile flags: -DBENCHMARK_NAME=tree_100-50_5_1 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark tree_100-50_5_2...
Compile flags: -DBENCHMARK_NAME=tree_100-50_5_2 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark tree_50-50_10_1...
Compile flags: -DBENCHMARK_NAME=tree_50-50_10_1 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark tree_50-50_10_2...
Compile flags: -DBENCHMARK_NAME=tree_50-50_10_2 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark tree_50-50_5_1...
Compile flags: -DBENCHMARK_NAME=tree_50-50_5_1 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
Configuring benchmark tree_50-50_5_2...
Compile flags: -DBENCHMARK_NAME=tree_50-50_5_2 -DRUNS=1 -DITERATIONS=1 
-- Microsoft SEAL -> Version 4.1.0 detected
-- Microsoft SEAL -> Targets available: SEAL::seal
-- Configuring done (0.3s)
-- Generating done (1.8s)
-- Build files have been written to: /scratch/ma9232/coyote/bfv_backend/build
[  0%] Building CXX object CMakeFiles/box_blur_3x3.dir/main.cpp.o
[  0%] Building CXX object CMakeFiles/box_blur_3x3.dir/util.cpp.o
[  1%] Building CXX object CMakeFiles/box_blur_3x3.dir/coyote_out/box_blur_3x3/vector.cpp.o
[  1%] Linking CXX executable box_blur_3x3
[  1%] Built target box_blur_3x3
[  1%] Building CXX object CMakeFiles/box_blur_4x4.dir/main.cpp.o
[  2%] Linking CXX executable box_blur_4x4
[  3%] Built target box_blur_4x4
[  3%] Building CXX object CMakeFiles/box_blur_5x5.dir/main.cpp.o
[  3%] Building CXX object CMakeFiles/box_blur_5x5.dir/util.cpp.o
[  4%] Building CXX object CMakeFiles/box_blur_5x5.dir/coyote_out/box_blur_5x5/vector.cpp.o
[  4%] Linking CXX executable box_blur_5x5
[  4%] Built target box_blur_5x5
[  4%] Building CXX object CMakeFiles/box_blur_8x8.dir/main.cpp.o
[  5%] Linking CXX executable box_blur_8x8
[  6%] Built target box_blur_8x8
[  6%] Building CXX object CMakeFiles/dot_product_25x25_fully.dir/main.cpp.o
[  6%] Building CXX object CMakeFiles/dot_product_25x25_fully.dir/util.cpp.o
[  7%] Building CXX object CMakeFiles/dot_product_25x25_fully.dir/coyote_out/dot_product_25x25_fully/vector.cpp.o
[  7%] Linking CXX executable dot_product_25x25_fully
[  7%] Built target dot_product_25x25_fully
[  7%] Building CXX object CMakeFiles/dot_product_3x3_fully.dir/main.cpp.o
[  8%] Building CXX object CMakeFiles/dot_product_3x3_fully.dir/util.cpp.o
[  8%] Building CXX object CMakeFiles/dot_product_3x3_fully.dir/coyote_out/dot_product_3x3_fully/vector.cpp.o
[  9%] Linking CXX executable dot_product_3x3_fully
[  9%] Built target dot_product_3x3_fully
[  9%] Building CXX object CMakeFiles/dot_product_4x4_fully.dir/main.cpp.o
[  9%] Linking CXX executable dot_product_4x4_fully
[ 10%] Built target dot_product_4x4_fully
[ 10%] Building CXX object CMakeFiles/dot_product_5x5_fully.dir/main.cpp.o
[ 11%] Building CXX object CMakeFiles/dot_product_5x5_fully.dir/util.cpp.o
[ 11%] Building CXX object CMakeFiles/dot_product_5x5_fully.dir/coyote_out/dot_product_5x5_fully/vector.cpp.o
[ 12%] Linking CXX executable dot_product_5x5_fully
[ 12%] Built target dot_product_5x5_fully
[ 12%] Building CXX object CMakeFiles/dot_product_8x8_fully.dir/main.cpp.o
[ 12%] Linking CXX executable dot_product_8x8_fully
[ 13%] Built target dot_product_8x8_fully
[ 14%] Building CXX object CMakeFiles/gx_kernel_3x3.dir/main.cpp.o
[ 14%] Building CXX object CMakeFiles/gx_kernel_3x3.dir/util.cpp.o
[ 14%] Building CXX object CMakeFiles/gx_kernel_3x3.dir/coyote_out/gx_kernel_3x3/vector.cpp.o
[ 15%] Linking CXX executable gx_kernel_3x3
[ 15%] Built target gx_kernel_3x3
[ 15%] Building CXX object CMakeFiles/gx_kernel_4x4.dir/main.cpp.o
[ 15%] Linking CXX executable gx_kernel_4x4
[ 16%] Built target gx_kernel_4x4
[ 17%] Building CXX object CMakeFiles/gx_kernel_5x5.dir/main.cpp.o
[ 17%] Building CXX object CMakeFiles/gx_kernel_5x5.dir/util.cpp.o
[ 17%] Building CXX object CMakeFiles/gx_kernel_5x5.dir/coyote_out/gx_kernel_5x5/vector.cpp.o
[ 18%] Linking CXX executable gx_kernel_5x5
[ 18%] Built target gx_kernel_5x5
[ 18%] Building CXX object CMakeFiles/gx_kernel_8x8.dir/main.cpp.o
[ 18%] Linking CXX executable gx_kernel_8x8
[ 19%] Built target gx_kernel_8x8
[ 20%] Building CXX object CMakeFiles/gy_kernel_3x3.dir/main.cpp.o
[ 20%] Building CXX object CMakeFiles/gy_kernel_3x3.dir/util.cpp.o
[ 20%] Building CXX object CMakeFiles/gy_kernel_3x3.dir/coyote_out/gy_kernel_3x3/vector.cpp.o
[ 21%] Linking CXX executable gy_kernel_3x3
[ 21%] Built target gy_kernel_3x3
[ 21%] Building CXX object CMakeFiles/gy_kernel_4x4.dir/main.cpp.o
[ 21%] Linking CXX executable gy_kernel_4x4
[ 22%] Built target gy_kernel_4x4
[ 23%] Building CXX object CMakeFiles/gy_kernel_5x5.dir/main.cpp.o
[ 23%] Building CXX object CMakeFiles/gy_kernel_5x5.dir/util.cpp.o
[ 23%] Building CXX object CMakeFiles/gy_kernel_5x5.dir/coyote_out/gy_kernel_5x5/vector.cpp.o
[ 24%] Linking CXX executable gy_kernel_5x5
[ 24%] Built target gy_kernel_5x5
[ 24%] Building CXX object CMakeFiles/gy_kernel_8x8.dir/main.cpp.o
[ 24%] Linking CXX executable gy_kernel_8x8
[ 25%] Built target gy_kernel_8x8
[ 26%] Building CXX object CMakeFiles/hamming_distance_25.dir/main.cpp.o
[ 26%] Building CXX object CMakeFiles/hamming_distance_25.dir/util.cpp.o
[ 26%] Building CXX object CMakeFiles/hamming_distance_25.dir/coyote_out/hamming_distance_25/vector.cpp.o
[ 27%] Linking CXX executable hamming_distance_25
[ 27%] Built target hamming_distance_25
[ 27%] Building CXX object CMakeFiles/hamming_distance_3.dir/main.cpp.o
[ 28%] Building CXX object CMakeFiles/hamming_distance_3.dir/util.cpp.o
[ 28%] Building CXX object CMakeFiles/hamming_distance_3.dir/coyote_out/hamming_distance_3/vector.cpp.o
[ 28%] Linking CXX executable hamming_distance_3
[ 28%] Built target hamming_distance_3
[ 29%] Building CXX object CMakeFiles/hamming_distance_32.dir/main.cpp.o
[ 29%] Building CXX object CMakeFiles/hamming_distance_32.dir/util.cpp.o
[ 29%] Building CXX object CMakeFiles/hamming_distance_32.dir/coyote_out/hamming_distance_32/vector.cpp.o
[ 30%] Linking CXX executable hamming_distance_32
[ 30%] Built target hamming_distance_32
[ 30%] Building CXX object CMakeFiles/hamming_distance_4.dir/main.cpp.o
[ 30%] Linking CXX executable hamming_distance_4
[ 31%] Built target hamming_distance_4
[ 32%] Building CXX object CMakeFiles/hamming_distance_5.dir/main.cpp.o
[ 32%] Building CXX object CMakeFiles/hamming_distance_5.dir/util.cpp.o
[ 32%] Building CXX object CMakeFiles/hamming_distance_5.dir/coyote_out/hamming_distance_5/vector.cpp.o
[ 33%] Linking CXX executable hamming_distance_5
[ 33%] Built target hamming_distance_5
[ 33%] Building CXX object CMakeFiles/hamming_distance_8.dir/main.cpp.o
[ 33%] Linking CXX executable hamming_distance_8
[ 34%] Built target hamming_distance_8
[ 35%] Building CXX object CMakeFiles/l2_distance_25.dir/main.cpp.o
[ 35%] Building CXX object CMakeFiles/l2_distance_25.dir/util.cpp.o
[ 35%] Building CXX object CMakeFiles/l2_distance_25.dir/coyote_out/l2_distance_25/vector.cpp.o
[ 36%] Linking CXX executable l2_distance_25
[ 36%] Built target l2_distance_25
[ 36%] Building CXX object CMakeFiles/l2_distance_3.dir/main.cpp.o
[ 37%] Building CXX object CMakeFiles/l2_distance_3.dir/util.cpp.o
[ 37%] Building CXX object CMakeFiles/l2_distance_3.dir/coyote_out/l2_distance_3/vector.cpp.o
[ 37%] Linking CXX executable l2_distance_3
[ 37%] Built target l2_distance_3
[ 38%] Building CXX object CMakeFiles/l2_distance_32.dir/main.cpp.o
[ 38%] Building CXX object CMakeFiles/l2_distance_32.dir/util.cpp.o
[ 39%] Building CXX object CMakeFiles/l2_distance_32.dir/coyote_out/l2_distance_32/vector.cpp.o
[ 39%] Linking CXX executable l2_distance_32
[ 39%] Built target l2_distance_32
[ 39%] Building CXX object CMakeFiles/l2_distance_4.dir/main.cpp.o
[ 39%] Linking CXX executable l2_distance_4
[ 40%] Built target l2_distance_4
[ 41%] Building CXX object CMakeFiles/l2_distance_5.dir/main.cpp.o
[ 41%] Building CXX object CMakeFiles/l2_distance_5.dir/util.cpp.o
[ 42%] Building CXX object CMakeFiles/l2_distance_5.dir/coyote_out/l2_distance_5/vector.cpp.o
[ 42%] Linking CXX executable l2_distance_5
[ 42%] Built target l2_distance_5
[ 42%] Building CXX object CMakeFiles/l2_distance_8.dir/main.cpp.o
[ 42%] Linking CXX executable l2_distance_8
[ 43%] Built target l2_distance_8
[ 44%] Building CXX object CMakeFiles/linear_reg_25.dir/main.cpp.o
[ 44%] Building CXX object CMakeFiles/linear_reg_25.dir/util.cpp.o
[ 45%] Building CXX object CMakeFiles/linear_reg_25.dir/coyote_out/linear_reg_25/vector.cpp.o
[ 45%] Linking CXX executable linear_reg_25
[ 45%] Built target linear_reg_25
[ 45%] Building CXX object CMakeFiles/linear_reg_3.dir/main.cpp.o
[ 46%] Building CXX object CMakeFiles/linear_reg_3.dir/util.cpp.o
[ 46%] Building CXX object CMakeFiles/linear_reg_3.dir/coyote_out/linear_reg_3/vector.cpp.o
[ 46%] Linking CXX executable linear_reg_3
[ 46%] Built target linear_reg_3
[ 47%] Building CXX object CMakeFiles/linear_reg_32.dir/main.cpp.o
[ 47%] Building CXX object CMakeFiles/linear_reg_32.dir/util.cpp.o
[ 48%] Building CXX object CMakeFiles/linear_reg_32.dir/coyote_out/linear_reg_32/vector.cpp.o
[ 48%] Linking CXX executable linear_reg_32
[ 48%] Built target linear_reg_32
[ 48%] Building CXX object CMakeFiles/linear_reg_4.dir/main.cpp.o
[ 49%] Linking CXX executable linear_reg_4
[ 50%] Built target linear_reg_4
[ 50%] Building CXX object CMakeFiles/linear_reg_5.dir/main.cpp.o
[ 50%] Building CXX object CMakeFiles/linear_reg_5.dir/util.cpp.o
[ 51%] Building CXX object CMakeFiles/linear_reg_5.dir/coyote_out/linear_reg_5/vector.cpp.o
[ 51%] Linking CXX executable linear_reg_5
[ 51%] Built target linear_reg_5
[ 51%] Building CXX object CMakeFiles/linear_reg_8.dir/main.cpp.o
[ 52%] Linking CXX executable linear_reg_8
[ 53%] Built target linear_reg_8
[ 53%] Building CXX object CMakeFiles/matmul_3x3_fully.dir/main.cpp.o
[ 53%] Building CXX object CMakeFiles/matmul_3x3_fully.dir/util.cpp.o
[ 54%] Building CXX object CMakeFiles/matmul_3x3_fully.dir/coyote_out/matmul_3x3_fully/vector.cpp.o
[ 54%] Linking CXX executable matmul_3x3_fully
[ 54%] Built target matmul_3x3_fully
[ 54%] Building CXX object CMakeFiles/matmul_4x4_fully.dir/main.cpp.o
[ 55%] Linking CXX executable matmul_4x4_fully
[ 56%] Built target matmul_4x4_fully
[ 56%] Building CXX object CMakeFiles/matmul_5x5_fully.dir/main.cpp.o
[ 56%] Building CXX object CMakeFiles/matmul_5x5_fully.dir/util.cpp.o
[ 57%] Building CXX object CMakeFiles/matmul_5x5_fully.dir/coyote_out/matmul_5x5_fully/vector.cpp.o
[ 57%] Linking CXX executable matmul_5x5_fully
[ 57%] Built target matmul_5x5_fully
[ 57%] Building CXX object CMakeFiles/matmul_8x8_fully.dir/main.cpp.o
[ 58%] Linking CXX executable matmul_8x8_fully
[ 59%] Built target matmul_8x8_fully
[ 59%] Building CXX object CMakeFiles/max_3_packed_fully.dir/main.cpp.o
[ 59%] Building CXX object CMakeFiles/max_3_packed_fully.dir/util.cpp.o
[ 60%] Building CXX object CMakeFiles/max_3_packed_fully.dir/coyote_out/max_3_packed_fully/vector.cpp.o
[ 60%] Linking CXX executable max_3_packed_fully
[ 60%] Built target max_3_packed_fully
[ 60%] Building CXX object CMakeFiles/max_4_packed_fully.dir/main.cpp.o
[ 61%] Building CXX object CMakeFiles/max_4_packed_fully.dir/util.cpp.o
[ 61%] Building CXX object CMakeFiles/max_4_packed_fully.dir/coyote_out/max_4_packed_fully/vector.cpp.o
[ 62%] Linking CXX executable max_4_packed_fully
[ 62%] Built target max_4_packed_fully
[ 62%] Building CXX object CMakeFiles/max_5_packed_fully.dir/main.cpp.o
[ 62%] Linking CXX executable max_5_packed_fully
[ 63%] Built target max_5_packed_fully
[ 64%] Building CXX object CMakeFiles/poly_reg_25.dir/main.cpp.o
[ 64%] Building CXX object CMakeFiles/poly_reg_25.dir/util.cpp.o
[ 64%] Building CXX object CMakeFiles/poly_reg_25.dir/coyote_out/poly_reg_25/vector.cpp.o
[ 65%] Linking CXX executable poly_reg_25
[ 65%] Built target poly_reg_25
[ 65%] Building CXX object CMakeFiles/poly_reg_3.dir/main.cpp.o
[ 65%] Building CXX object CMakeFiles/poly_reg_3.dir/util.cpp.o
[ 66%] Building CXX object CMakeFiles/poly_reg_3.dir/coyote_out/poly_reg_3/vector.cpp.o
[ 66%] Linking CXX executable poly_reg_3
[ 66%] Built target poly_reg_3
[ 67%] Building CXX object CMakeFiles/poly_reg_32.dir/main.cpp.o
[ 67%] Building CXX object CMakeFiles/poly_reg_32.dir/util.cpp.o
[ 67%] Building CXX object CMakeFiles/poly_reg_32.dir/coyote_out/poly_reg_32/vector.cpp.o
[ 68%] Linking CXX executable poly_reg_32
[ 68%] Built target poly_reg_32
[ 68%] Building CXX object CMakeFiles/poly_reg_4.dir/main.cpp.o
[ 68%] Linking CXX executable poly_reg_4
[ 69%] Built target poly_reg_4
[ 70%] Building CXX object CMakeFiles/poly_reg_5.dir/main.cpp.o
[ 70%] Building CXX object CMakeFiles/poly_reg_5.dir/util.cpp.o
[ 70%] Building CXX object CMakeFiles/poly_reg_5.dir/coyote_out/poly_reg_5/vector.cpp.o
[ 71%] Linking CXX executable poly_reg_5
[ 71%] Built target poly_reg_5
[ 71%] Building CXX object CMakeFiles/poly_reg_8.dir/main.cpp.o
[ 71%] Linking CXX executable poly_reg_8
[ 72%] Built target poly_reg_8
[ 73%] Building CXX object CMakeFiles/roberts_cross_3x3.dir/main.cpp.o
[ 73%] Building CXX object CMakeFiles/roberts_cross_3x3.dir/util.cpp.o
[ 73%] Building CXX object CMakeFiles/roberts_cross_3x3.dir/coyote_out/roberts_cross_3x3/vector.cpp.o
[ 74%] Linking CXX executable roberts_cross_3x3
[ 74%] Built target roberts_cross_3x3
[ 74%] Building CXX object CMakeFiles/roberts_cross_4x4.dir/main.cpp.o
[ 74%] Linking CXX executable roberts_cross_4x4
[ 75%] Built target roberts_cross_4x4
[ 76%] Building CXX object CMakeFiles/roberts_cross_5x5.dir/main.cpp.o
[ 76%] Building CXX object CMakeFiles/roberts_cross_5x5.dir/util.cpp.o
[ 76%] Building CXX object CMakeFiles/roberts_cross_5x5.dir/coyote_out/roberts_cross_5x5/vector.cpp.o
[ 77%] Linking CXX executable roberts_cross_5x5
[ 77%] Built target roberts_cross_5x5
[ 77%] Building CXX object CMakeFiles/roberts_cross_8x8.dir/main.cpp.o
[ 77%] Linking CXX executable roberts_cross_8x8
[ 78%] Built target roberts_cross_8x8
[ 79%] Building CXX object CMakeFiles/sort_3_packed_fully.dir/main.cpp.o
[ 80%] Linking CXX executable sort_3_packed_fully
[ 80%] Built target sort_3_packed_fully
[ 80%] Building CXX object CMakeFiles/sort_4_packed_fully.dir/main.cpp.o
[ 81%] Building CXX object CMakeFiles/sort_4_packed_fully.dir/util.cpp.o
[ 81%] Building CXX object CMakeFiles/sort_4_packed_fully.dir/coyote_out/sort_4_packed_fully/vector.cpp.o
[ 81%] Linking CXX executable sort_4_packed_fully
[ 81%] Built target sort_4_packed_fully
[ 82%] Building CXX object CMakeFiles/tree_100-100_10_1.dir/main.cpp.o
[ 83%] Linking CXX executable tree_100-100_10_1
[ 83%] Built target tree_100-100_10_1
[ 83%] Building CXX object CMakeFiles/tree_100-100_10_2.dir/main.cpp.o
[ 83%] Building CXX object CMakeFiles/tree_100-100_10_2.dir/coyote_out/tree_100-100_10_2/vector.cpp.o
[ 83%] Linking CXX executable tree_100-100_10_2
[ 84%] Built target tree_100-100_10_2
[ 85%] Building CXX object CMakeFiles/tree_100-100_5_1.dir/main.cpp.o
[ 86%] Linking CXX executable tree_100-100_5_1
[ 86%] Built target tree_100-100_5_1
[ 86%] Building CXX object CMakeFiles/tree_100-100_5_2.dir/main.cpp.o
[ 86%] Linking CXX executable tree_100-100_5_2
[ 87%] Built target tree_100-100_5_2
[ 88%] Building CXX object CMakeFiles/tree_100-50_10_1.dir/main.cpp.o
[ 88%] Linking CXX executable tree_100-50_10_1
[ 89%] Built target tree_100-50_10_1
[ 89%] Building CXX object CMakeFiles/tree_100-50_10_2.dir/main.cpp.o
[ 89%] Linking CXX executable tree_100-50_10_2
[ 90%] Built target tree_100-50_10_2
[ 91%] Building CXX object CMakeFiles/tree_100-50_5_1.dir/main.cpp.o
[ 91%] Linking CXX executable tree_100-50_5_1
[ 92%] Built target tree_100-50_5_1
[ 92%] Building CXX object CMakeFiles/tree_100-50_5_2.dir/main.cpp.o
[ 92%] Linking CXX executable tree_100-50_5_2
[ 93%] Built target tree_100-50_5_2
[ 94%] Building CXX object CMakeFiles/tree_50-50_10_1.dir/main.cpp.o
[ 94%] Linking CXX executable tree_50-50_10_1
[ 95%] Built target tree_50-50_10_1
[ 95%] Building CXX object CMakeFiles/tree_50-50_10_2.dir/main.cpp.o
[ 95%] Linking CXX executable tree_50-50_10_2
[ 96%] Built target tree_50-50_10_2
[ 97%] Building CXX object CMakeFiles/tree_50-50_5_1.dir/main.cpp.o
[ 97%] Linking CXX executable tree_50-50_5_1
[ 98%] Built target tree_50-50_5_1
[ 98%] Building CXX object CMakeFiles/tree_50-50_5_2.dir/main.cpp.o
[ 99%] Linking CXX executable tree_50-50_5_2
[100%] Built target tree_50-50_5_2
Running benchmark dot_product_3x3_fully...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 328, 41
Vector took (enc, run, enc + run, Remaining_noise_budget) = (38, 297, 335, 328)
Running benchmark dot_product_5x5_fully...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 302, 67
Vector took (enc, run, enc + run, Remaining_noise_budget) = (38, 431, 469, 302)
Running benchmark dot_product_25x25_fully...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 224, 145
Vector took (enc, run, enc + run, Remaining_noise_budget) = (44, 2060, 2104, 224)
Running benchmark l2_distance_3...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 327, 42
Vector took (enc, run, enc + run, Remaining_noise_budget) = (38, 296, 334, 327)
Running benchmark l2_distance_5...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 301, 68
Vector took (enc, run, enc + run, Remaining_noise_budget) = (38, 397, 435, 301)
Running benchmark l2_distance_25...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 141, 228
Vector took (enc, run, enc + run, Remaining_noise_budget) = (59, 6020, 6079, 141)
Running benchmark l2_distance_32...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 190, 179
Vector took (enc, run, enc + run, Remaining_noise_budget) = (70, 7867, 7937, 190)
Running benchmark poly_reg_3...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 219, 150
Vector took (enc, run, enc + run, Remaining_noise_budget) = (94, 802, 896, 219)
Running benchmark poly_reg_5...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 192, 177
Vector took (enc, run, enc + run, Remaining_noise_budget) = (100, 1187, 1287, 192)
Running benchmark poly_reg_25...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 160, 209
Vector took (enc, run, enc + run, Remaining_noise_budget) = (139, 12135, 12274, 160)
Running benchmark poly_reg_32...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 159, 210
Vector took (enc, run, enc + run, Remaining_noise_budget) = (153, 16054, 16207, 159)
Running benchmark linear_reg_3...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 328, 41
Vector took (enc, run, enc + run, Remaining_noise_budget) = (74, 228, 302, 328)
Running benchmark linear_reg_5...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 328, 41
Vector took (enc, run, enc + run, Remaining_noise_budget) = (76, 227, 303, 328)
Running benchmark linear_reg_25...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 246, 123
Vector took (enc, run, enc + run, Remaining_noise_budget) = (88, 3504, 3592, 246)
Running benchmark linear_reg_32...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 245, 124
Vector took (enc, run, enc + run, Remaining_noise_budget) = (95, 5144, 5239, 245)
Running benchmark hamming_distance_3...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 296, 73
Vector took (enc, run, enc + run, Remaining_noise_budget) = (57, 349, 406, 296)
Running benchmark hamming_distance_5...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 296, 73
Vector took (enc, run, enc + run, Remaining_noise_budget) = (58, 349, 407, 296)
Running benchmark hamming_distance_25...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 213, 156
Vector took (enc, run, enc + run, Remaining_noise_budget) = (83, 5323, 5406, 213)
Running benchmark hamming_distance_32...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 213, 156
Vector took (enc, run, enc + run, Remaining_noise_budget) = (88, 7258, 7346, 213)
Running benchmark box_blur_3x3...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 228, 141
Vector took (enc, run, enc + run, Remaining_noise_budget) = (51, 2108, 2159, 228)
Running benchmark box_blur_5x5...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 119, 250
Vector took (enc, run, enc + run, Remaining_noise_budget) = (93, 13035, 13128, 119)
Running benchmark gx_kernel_3x3...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 219, 150
Vector took (enc, run, enc + run, Remaining_noise_budget) = (94, 3367, 3461, 219)
Running benchmark gx_kernel_5x5...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 215, 154
Vector took (enc, run, enc + run, Remaining_noise_budget) = (116, 13712, 13828, 215)
Running benchmark gy_kernel_3x3...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 220, 149
Vector took (enc, run, enc + run, Remaining_noise_budget) = (75, 3453, 3528, 220)
Running benchmark gy_kernel_5x5...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 215, 154
Vector took (enc, run, enc + run, Remaining_noise_budget) = (111, 12501, 12612, 215)
Running benchmark roberts_cross_3x3...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 273, 96
Vector took (enc, run, enc + run, Remaining_noise_budget) = (62, 1283, 1345, 273)
Running benchmark roberts_cross_5x5...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 243, 126
Vector took (enc, run, enc + run, Remaining_noise_budget) = (81, 5042, 5123, 243)
Running benchmark matmul_3x3_fully...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 276, 93
Vector took (enc, run, enc + run, Remaining_noise_budget) = (43, 1206, 1249, 276)
Running benchmark matmul_5x5_fully...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 224, 145
Vector took (enc, run, enc + run, Remaining_noise_budget) = (65, 8064, 8129, 224)
Running benchmark sort_4_packed_fully...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 0, 369
Vector took (enc, run, enc + run, Remaining_noise_budget) = (Error, Error, Error, 0)
Running benchmark max_3_packed_fully...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 294, 75
Vector took (enc, run, enc + run, Remaining_noise_budget) = (75, 698, 773, 294)
Running benchmark max_4_packed_fully...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 134, 235
Vector took (enc, run, enc + run, Remaining_noise_budget) = (96, 1602, 1698, 134)
Running benchmark tree_100-100_10_2...
Checking the integrity of result returned by vector code 
output ciphertexts info (L=7)
id: level, remaining_noise_budget, actual_noise_upper_bound (maybe mod_switch was used to sacrifice some noise budget)
result : 7, 0, 369
Vector took (enc, run, enc + run, Remaining_noise_budget) = (Error, Error, Error, 0)
==> build_run_all : benchmarks to run : ['dot_product_3x3_fully', 'dot_product_5x5_fully', 'dot_product_25x25_fully', 'l2_distance_3', 'l2_distance_5', 'l2_distance_25', 'l2_distance_32', 'poly_reg_3', 'poly_reg_5', 'poly_reg_25', 'poly_reg_32', 'linear_reg_3', 'linear_reg_5', 'linear_reg_25', 'linear_reg_32', 'hamming_distance_3', 'hamming_distance_5', 'hamming_distance_25', 'hamming_distance_32', 'box_blur_3x3', 'box_blur_5x5', 'gx_kernel_3x3', 'gx_kernel_5x5', 'gy_kernel_3x3', 'gy_kernel_5x5', 'roberts_cross_3x3', 'roberts_cross_5x5', 'matmul_3x3_fully', 'matmul_5x5_fully', 'sort_4_packed_fully', 'max_3_packed_fully', 'max_4_packed_fully', 'tree_100-100_10_2'] 


===> Run FHE code of the benchmakrs   ::
||| General benchs ====> dot_product_3x3_fully,dot_product_5x5_fully,dot_product_25x25_fully,l2_distance_3,l2_distance_5,l2_distance_25,l2_distance_32,poly_reg_3,poly_reg_5,poly_reg_25,poly_reg_32,linear_reg_3,linear_reg_5,linear_reg_25,linear_reg_32,hamming_distance_3,hamming_distance_5,hamming_distance_25,hamming_distance_32,box_blur_3x3,box_blur_5x5,gx_kernel_3x3,gx_kernel_5x5,gy_kernel_3x3,gy_kernel_5x5,roberts_cross_3x3,roberts_cross_5x5,matmul_3x3_fully,matmul_5x5_fully,sort_4_packed_fully,max_3_packed_fully,max_4_packed_fully 

Compile function : dot_product_3x3_fully
1
((dot_product_3x3_fully(v1):0 * dot_product_3x3_fully(v2):0) + ((dot_product_3x3_fully(v1):1 * dot_product_3x3_fully(v2):1) + (dot_product_3x3_fully(v1):2 * dot_product_3x3_fully(v2):2)))
Successfully compiled benchmark dot_product_3x3_fully; outputs placed in outputs/dot_product_3x3_fully!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 1
Number of additions: 2
Number of substitutions: 0
Number of rotations: 2
Number of scalar/plain multiplications: 0
Depth of the circuit: 5
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [2]
==> key : sub , values : [0]
==> key : multiply_plain , values : [0]
==> key : rotate_rows , values : [2]
==> key : multiply , values : [1]
==> key : Depth , values : [5]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [10.330425500869751]
Compile function : dot_product_5x5_fully
1
(((dot_product_5x5_fully(v1):0 * dot_product_5x5_fully(v2):0) + (dot_product_5x5_fully(v1):1 * dot_product_5x5_fully(v2):1)) + ((dot_product_5x5_fully(v1):2 * dot_product_5x5_fully(v2):2) + ((dot_product_5x5_fully(v1):3 * dot_product_5x5_fully(v2):3) + (dot_product_5x5_fully(v1):4 * dot_product_5x5_fully(v2):4))))
Successfully compiled benchmark dot_product_5x5_fully; outputs placed in outputs/dot_product_5x5_fully!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 1
Number of additions: 5
Number of substitutions: 0
Number of rotations: 3
Number of scalar/plain multiplications: 4
Depth of the circuit: 9
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [5]
==> key : sub , values : [0]
==> key : multiply_plain , values : [4]
==> key : rotate_rows , values : [3]
==> key : multiply , values : [1]
==> key : Depth , values : [9]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [124.68872785568237]
Compile function : dot_product_25x25_fully
1
(((((dot_product_25x25_fully(v1):0 * dot_product_25x25_fully(v2):0) + ((dot_product_25x25_fully(v1):1 * dot_product_25x25_fully(v2):1) + (dot_product_25x25_fully(v1):2 * dot_product_25x25_fully(v2):2))) + ((dot_product_25x25_fully(v1):3 * dot_product_25x25_fully(v2):3) + ((dot_product_25x25_fully(v1):4 * dot_product_25x25_fully(v2):4) + (dot_product_25x25_fully(v1):5 * dot_product_25x25_fully(v2):5)))) + (((dot_product_25x25_fully(v1):6 * dot_product_25x25_fully(v2):6) + ((dot_product_25x25_fully(v1):7 * dot_product_25x25_fully(v2):7) + (dot_product_25x25_fully(v1):8 * dot_product_25x25_fully(v2):8))) + ((dot_product_25x25_fully(v1):9 * dot_product_25x25_fully(v2):9) + ((dot_product_25x25_fully(v1):10 * dot_product_25x25_fully(v2):10) + (dot_product_25x25_fully(v1):11 * dot_product_25x25_fully(v2):11))))) + ((((dot_product_25x25_fully(v1):12 * dot_product_25x25_fully(v2):12) + ((dot_product_25x25_fully(v1):13 * dot_product_25x25_fully(v2):13) + (dot_product_25x25_fully(v1):14 * dot_product_25x25_fully(v2):14))) + ((dot_product_25x25_fully(v1):15 * dot_product_25x25_fully(v2):15) + ((dot_product_25x25_fully(v1):16 * dot_product_25x25_fully(v2):16) + (dot_product_25x25_fully(v1):17 * dot_product_25x25_fully(v2):17)))) + (((dot_product_25x25_fully(v1):18 * dot_product_25x25_fully(v2):18) + ((dot_product_25x25_fully(v1):19 * dot_product_25x25_fully(v2):19) + (dot_product_25x25_fully(v1):20 * dot_product_25x25_fully(v2):20))) + (((dot_product_25x25_fully(v1):21 * dot_product_25x25_fully(v2):21) + (dot_product_25x25_fully(v1):22 * dot_product_25x25_fully(v2):22)) + ((dot_product_25x25_fully(v1):23 * dot_product_25x25_fully(v2):23) + (dot_product_25x25_fully(v1):24 * dot_product_25x25_fully(v2):24))))))
Successfully compiled benchmark dot_product_25x25_fully; outputs placed in outputs/dot_product_25x25_fully!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 1
Number of additions: 14
Number of substitutions: 0
Number of rotations: 21
Number of scalar/plain multiplications: 25
Depth of the circuit: 20
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [14]
==> key : sub , values : [0]
==> key : multiply_plain , values : [25]
==> key : rotate_rows , values : [21]
==> key : multiply , values : [1]
==> key : Depth , values : [20]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [484.6958212852478]
Compile function : l2_distance_3
1
(((l2_distance_3(a):0 - l2_distance_3(b):0) * (l2_distance_3(a):0 - l2_distance_3(b):0)) + (((l2_distance_3(a):1 - l2_distance_3(b):1) * (l2_distance_3(a):1 - l2_distance_3(b):1)) + ((l2_distance_3(a):2 - l2_distance_3(b):2) * (l2_distance_3(a):2 - l2_distance_3(b):2))))
Successfully compiled benchmark l2_distance_3; outputs placed in outputs/l2_distance_3!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 1
Number of additions: 2
Number of substitutions: 2
Number of rotations: 2
Number of scalar/plain multiplications: 0
Depth of the circuit: 5
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [2]
==> key : sub , values : [2]
==> key : multiply_plain , values : [0]
==> key : rotate_rows , values : [2]
==> key : multiply , values : [1]
==> key : Depth , values : [5]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [126.33544039726257]
Compile function : l2_distance_5
1
((((l2_distance_5(a):0 - l2_distance_5(b):0) * (l2_distance_5(a):0 - l2_distance_5(b):0)) + ((l2_distance_5(a):1 - l2_distance_5(b):1) * (l2_distance_5(a):1 - l2_distance_5(b):1))) + (((l2_distance_5(a):2 - l2_distance_5(b):2) * (l2_distance_5(a):2 - l2_distance_5(b):2)) + (((l2_distance_5(a):3 - l2_distance_5(b):3) * (l2_distance_5(a):3 - l2_distance_5(b):3)) + ((l2_distance_5(a):4 - l2_distance_5(b):4) * (l2_distance_5(a):4 - l2_distance_5(b):4)))))
Successfully compiled benchmark l2_distance_5; outputs placed in outputs/l2_distance_5!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 1
Number of additions: 6
Number of substitutions: 2
Number of rotations: 3
Number of scalar/plain multiplications: 4
Depth of the circuit: 9
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [6]
==> key : sub , values : [2]
==> key : multiply_plain , values : [4]
==> key : rotate_rows , values : [3]
==> key : multiply , values : [1]
==> key : Depth , values : [9]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [181.3700304031372]
Compile function : l2_distance_25
1
((((((l2_distance_25(a):0 - l2_distance_25(b):0) * (l2_distance_25(a):0 - l2_distance_25(b):0)) + (((l2_distance_25(a):1 - l2_distance_25(b):1) * (l2_distance_25(a):1 - l2_distance_25(b):1)) + ((l2_distance_25(a):2 - l2_distance_25(b):2) * (l2_distance_25(a):2 - l2_distance_25(b):2)))) + (((l2_distance_25(a):3 - l2_distance_25(b):3) * (l2_distance_25(a):3 - l2_distance_25(b):3)) + (((l2_distance_25(a):4 - l2_distance_25(b):4) * (l2_distance_25(a):4 - l2_distance_25(b):4)) + ((l2_distance_25(a):5 - l2_distance_25(b):5) * (l2_distance_25(a):5 - l2_distance_25(b):5))))) + ((((l2_distance_25(a):6 - l2_distance_25(b):6) * (l2_distance_25(a):6 - l2_distance_25(b):6)) + (((l2_distance_25(a):7 - l2_distance_25(b):7) * (l2_distance_25(a):7 - l2_distance_25(b):7)) + ((l2_distance_25(a):8 - l2_distance_25(b):8) * (l2_distance_25(a):8 - l2_distance_25(b):8)))) + (((l2_distance_25(a):9 - l2_distance_25(b):9) * (l2_distance_25(a):9 - l2_distance_25(b):9)) + (((l2_distance_25(a):10 - l2_distance_25(b):10) * (l2_distance_25(a):10 - l2_distance_25(b):10)) + ((l2_distance_25(a):11 - l2_distance_25(b):11) * (l2_distance_25(a):11 - l2_distance_25(b):11)))))) + (((((l2_distance_25(a):12 - l2_distance_25(b):12) * (l2_distance_25(a):12 - l2_distance_25(b):12)) + (((l2_distance_25(a):13 - l2_distance_25(b):13) * (l2_distance_25(a):13 - l2_distance_25(b):13)) + ((l2_distance_25(a):14 - l2_distance_25(b):14) * (l2_distance_25(a):14 - l2_distance_25(b):14)))) + (((l2_distance_25(a):15 - l2_distance_25(b):15) * (l2_distance_25(a):15 - l2_distance_25(b):15)) + (((l2_distance_25(a):16 - l2_distance_25(b):16) * (l2_distance_25(a):16 - l2_distance_25(b):16)) + ((l2_distance_25(a):17 - l2_distance_25(b):17) * (l2_distance_25(a):17 - l2_distance_25(b):17))))) + ((((l2_distance_25(a):18 - l2_distance_25(b):18) * (l2_distance_25(a):18 - l2_distance_25(b):18)) + (((l2_distance_25(a):19 - l2_distance_25(b):19) * (l2_distance_25(a):19 - l2_distance_25(b):19)) + ((l2_distance_25(a):20 - l2_distance_25(b):20) * (l2_distance_25(a):20 - l2_distance_25(b):20)))) + ((((l2_distance_25(a):21 - l2_distance_25(b):21) * (l2_distance_25(a):21 - l2_distance_25(b):21)) + ((l2_distance_25(a):22 - l2_distance_25(b):22) * (l2_distance_25(a):22 - l2_distance_25(b):22))) + (((l2_distance_25(a):23 - l2_distance_25(b):23) * (l2_distance_25(a):23 - l2_distance_25(b):23)) + ((l2_distance_25(a):24 - l2_distance_25(b):24) * (l2_distance_25(a):24 - l2_distance_25(b):24)))))))
Successfully compiled benchmark l2_distance_25; outputs placed in outputs/l2_distance_25!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 2
Number of additions: 22
Number of substitutions: 1
Number of rotations: 54
Number of scalar/plain multiplications: 86
Depth of the circuit: 29
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [22]
==> key : sub , values : [1]
==> key : multiply_plain , values : [86]
==> key : rotate_rows , values : [54]
==> key : multiply , values : [2]
==> key : Depth , values : [29]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [917.5773944854736]
Compile function : l2_distance_32
1
(((((((l2_distance_32(a):0 - l2_distance_32(b):0) * (l2_distance_32(a):0 - l2_distance_32(b):0)) + ((l2_distance_32(a):1 - l2_distance_32(b):1) * (l2_distance_32(a):1 - l2_distance_32(b):1))) + (((l2_distance_32(a):2 - l2_distance_32(b):2) * (l2_distance_32(a):2 - l2_distance_32(b):2)) + ((l2_distance_32(a):3 - l2_distance_32(b):3) * (l2_distance_32(a):3 - l2_distance_32(b):3)))) + ((((l2_distance_32(a):4 - l2_distance_32(b):4) * (l2_distance_32(a):4 - l2_distance_32(b):4)) + ((l2_distance_32(a):5 - l2_distance_32(b):5) * (l2_distance_32(a):5 - l2_distance_32(b):5))) + (((l2_distance_32(a):6 - l2_distance_32(b):6) * (l2_distance_32(a):6 - l2_distance_32(b):6)) + ((l2_distance_32(a):7 - l2_distance_32(b):7) * (l2_distance_32(a):7 - l2_distance_32(b):7))))) + (((((l2_distance_32(a):8 - l2_distance_32(b):8) * (l2_distance_32(a):8 - l2_distance_32(b):8)) + ((l2_distance_32(a):9 - l2_distance_32(b):9) * (l2_distance_32(a):9 - l2_distance_32(b):9))) + (((l2_distance_32(a):10 - l2_distance_32(b):10) * (l2_distance_32(a):10 - l2_distance_32(b):10)) + ((l2_distance_32(a):11 - l2_distance_32(b):11) * (l2_distance_32(a):11 - l2_distance_32(b):11)))) + ((((l2_distance_32(a):12 - l2_distance_32(b):12) * (l2_distance_32(a):12 - l2_distance_32(b):12)) + ((l2_distance_32(a):13 - l2_distance_32(b):13) * (l2_distance_32(a):13 - l2_distance_32(b):13))) + (((l2_distance_32(a):14 - l2_distance_32(b):14) * (l2_distance_32(a):14 - l2_distance_32(b):14)) + ((l2_distance_32(a):15 - l2_distance_32(b):15) * (l2_distance_32(a):15 - l2_distance_32(b):15)))))) + ((((((l2_distance_32(a):16 - l2_distance_32(b):16) * (l2_distance_32(a):16 - l2_distance_32(b):16)) + ((l2_distance_32(a):17 - l2_distance_32(b):17) * (l2_distance_32(a):17 - l2_distance_32(b):17))) + (((l2_distance_32(a):18 - l2_distance_32(b):18) * (l2_distance_32(a):18 - l2_distance_32(b):18)) + ((l2_distance_32(a):19 - l2_distance_32(b):19) * (l2_distance_32(a):19 - l2_distance_32(b):19)))) + ((((l2_distance_32(a):20 - l2_distance_32(b):20) * (l2_distance_32(a):20 - l2_distance_32(b):20)) + ((l2_distance_32(a):21 - l2_distance_32(b):21) * (l2_distance_32(a):21 - l2_distance_32(b):21))) + (((l2_distance_32(a):22 - l2_distance_32(b):22) * (l2_distance_32(a):22 - l2_distance_32(b):22)) + ((l2_distance_32(a):23 - l2_distance_32(b):23) * (l2_distance_32(a):23 - l2_distance_32(b):23))))) + (((((l2_distance_32(a):24 - l2_distance_32(b):24) * (l2_distance_32(a):24 - l2_distance_32(b):24)) + ((l2_distance_32(a):25 - l2_distance_32(b):25) * (l2_distance_32(a):25 - l2_distance_32(b):25))) + (((l2_distance_32(a):26 - l2_distance_32(b):26) * (l2_distance_32(a):26 - l2_distance_32(b):26)) + ((l2_distance_32(a):27 - l2_distance_32(b):27) * (l2_distance_32(a):27 - l2_distance_32(b):27)))) + ((((l2_distance_32(a):28 - l2_distance_32(b):28) * (l2_distance_32(a):28 - l2_distance_32(b):28)) + ((l2_distance_32(a):29 - l2_distance_32(b):29) * (l2_distance_32(a):29 - l2_distance_32(b):29))) + (((l2_distance_32(a):30 - l2_distance_32(b):30) * (l2_distance_32(a):30 - l2_distance_32(b):30)) + ((l2_distance_32(a):31 - l2_distance_32(b):31) * (l2_distance_32(a):31 - l2_distance_32(b):31)))))))
Successfully compiled benchmark l2_distance_32; outputs placed in outputs/l2_distance_32!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 1
Number of additions: 17
Number of substitutions: 2
Number of rotations: 74
Number of scalar/plain multiplications: 108
Depth of the circuit: 24
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [17]
==> key : sub , values : [2]
==> key : multiply_plain , values : [108]
==> key : rotate_rows , values : [74]
==> key : multiply , values : [1]
==> key : Depth , values : [24]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [1156.7337079048157]
Compile function : poly_reg_3
1
(poly_reg_3(c1):0 - ((((poly_reg_3(c0):0 * poly_reg_3(c0):0) * poly_reg_3(c4):0) + (poly_reg_3(c0):0 * poly_reg_3(c3):0)) + poly_reg_3(c2):0))
2
(poly_reg_3(c1):1 - ((((poly_reg_3(c0):1 * poly_reg_3(c0):1) * poly_reg_3(c4):1) + (poly_reg_3(c0):1 * poly_reg_3(c3):1)) + poly_reg_3(c2):1))
3
(poly_reg_3(c1):2 - ((((poly_reg_3(c0):2 * poly_reg_3(c0):2) * poly_reg_3(c4):2) + (poly_reg_3(c0):2 * poly_reg_3(c3):2)) + poly_reg_3(c2):2))
Successfully compiled benchmark poly_reg_3; outputs placed in outputs/poly_reg_3!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 3
Number of additions: 8
Number of substitutions: 1
Number of rotations: 3
Number of scalar/plain multiplications: 10
Depth of the circuit: 13
Multiplicative depth of the circuit: 2
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [8]
==> key : sub , values : [1]
==> key : multiply_plain , values : [10]
==> key : rotate_rows , values : [3]
==> key : multiply , values : [3]
==> key : Depth , values : [13]
==> key : Multiplicative Depth , values : [2]
==> key : compile_time (s) , values : [194.8265609741211]
Compile function : poly_reg_5
1
(poly_reg_5(c1):0 - ((((poly_reg_5(c0):0 * poly_reg_5(c0):0) * poly_reg_5(c4):0) + (poly_reg_5(c0):0 * poly_reg_5(c3):0)) + poly_reg_5(c2):0))
2
(poly_reg_5(c1):1 - ((((poly_reg_5(c0):1 * poly_reg_5(c0):1) * poly_reg_5(c4):1) + (poly_reg_5(c0):1 * poly_reg_5(c3):1)) + poly_reg_5(c2):1))
3
(poly_reg_5(c1):2 - ((((poly_reg_5(c0):2 * poly_reg_5(c0):2) * poly_reg_5(c4):2) + (poly_reg_5(c0):2 * poly_reg_5(c3):2)) + poly_reg_5(c2):2))
4
(poly_reg_5(c1):3 - ((((poly_reg_5(c0):3 * poly_reg_5(c0):3) * poly_reg_5(c4):3) + (poly_reg_5(c0):3 * poly_reg_5(c3):3)) + poly_reg_5(c2):3))
5
(poly_reg_5(c1):4 - ((((poly_reg_5(c0):4 * poly_reg_5(c0):4) * poly_reg_5(c4):4) + (poly_reg_5(c0):4 * poly_reg_5(c3):4)) + poly_reg_5(c2):4))
Successfully compiled benchmark poly_reg_5; outputs placed in outputs/poly_reg_5!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 2
Number of additions: 10
Number of substitutions: 1
Number of rotations: 8
Number of scalar/plain multiplications: 20
Depth of the circuit: 17
Multiplicative depth of the circuit: 2
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [10]
==> key : sub , values : [1]
==> key : multiply_plain , values : [20]
==> key : rotate_rows , values : [8]
==> key : multiply , values : [2]
==> key : Depth , values : [17]
==> key : Multiplicative Depth , values : [2]
==> key : compile_time (s) , values : [311.7094256877899]
Compile function : poly_reg_25
1
(poly_reg_25(c1):0 - ((((poly_reg_25(c0):0 * poly_reg_25(c0):0) * poly_reg_25(c4):0) + (poly_reg_25(c0):0 * poly_reg_25(c3):0)) + poly_reg_25(c2):0))
2
(poly_reg_25(c1):1 - ((((poly_reg_25(c0):1 * poly_reg_25(c0):1) * poly_reg_25(c4):1) + (poly_reg_25(c0):1 * poly_reg_25(c3):1)) + poly_reg_25(c2):1))
3
(poly_reg_25(c1):2 - ((((poly_reg_25(c0):2 * poly_reg_25(c0):2) * poly_reg_25(c4):2) + (poly_reg_25(c0):2 * poly_reg_25(c3):2)) + poly_reg_25(c2):2))
4
(poly_reg_25(c1):3 - ((((poly_reg_25(c0):3 * poly_reg_25(c0):3) * poly_reg_25(c4):3) + (poly_reg_25(c0):3 * poly_reg_25(c3):3)) + poly_reg_25(c2):3))
5
(poly_reg_25(c1):4 - ((((poly_reg_25(c0):4 * poly_reg_25(c0):4) * poly_reg_25(c4):4) + (poly_reg_25(c0):4 * poly_reg_25(c3):4)) + poly_reg_25(c2):4))
6
(poly_reg_25(c1):5 - ((((poly_reg_25(c0):5 * poly_reg_25(c0):5) * poly_reg_25(c4):5) + (poly_reg_25(c0):5 * poly_reg_25(c3):5)) + poly_reg_25(c2):5))
7
(poly_reg_25(c1):6 - ((((poly_reg_25(c0):6 * poly_reg_25(c0):6) * poly_reg_25(c4):6) + (poly_reg_25(c0):6 * poly_reg_25(c3):6)) + poly_reg_25(c2):6))
8
(poly_reg_25(c1):7 - ((((poly_reg_25(c0):7 * poly_reg_25(c0):7) * poly_reg_25(c4):7) + (poly_reg_25(c0):7 * poly_reg_25(c3):7)) + poly_reg_25(c2):7))
9
(poly_reg_25(c1):8 - ((((poly_reg_25(c0):8 * poly_reg_25(c0):8) * poly_reg_25(c4):8) + (poly_reg_25(c0):8 * poly_reg_25(c3):8)) + poly_reg_25(c2):8))
10
(poly_reg_25(c1):9 - ((((poly_reg_25(c0):9 * poly_reg_25(c0):9) * poly_reg_25(c4):9) + (poly_reg_25(c0):9 * poly_reg_25(c3):9)) + poly_reg_25(c2):9))
11
(poly_reg_25(c1):10 - ((((poly_reg_25(c0):10 * poly_reg_25(c0):10) * poly_reg_25(c4):10) + (poly_reg_25(c0):10 * poly_reg_25(c3):10)) + poly_reg_25(c2):10))
12
(poly_reg_25(c1):11 - ((((poly_reg_25(c0):11 * poly_reg_25(c0):11) * poly_reg_25(c4):11) + (poly_reg_25(c0):11 * poly_reg_25(c3):11)) + poly_reg_25(c2):11))
13
(poly_reg_25(c1):12 - ((((poly_reg_25(c0):12 * poly_reg_25(c0):12) * poly_reg_25(c4):12) + (poly_reg_25(c0):12 * poly_reg_25(c3):12)) + poly_reg_25(c2):12))
14
(poly_reg_25(c1):13 - ((((poly_reg_25(c0):13 * poly_reg_25(c0):13) * poly_reg_25(c4):13) + (poly_reg_25(c0):13 * poly_reg_25(c3):13)) + poly_reg_25(c2):13))
15
(poly_reg_25(c1):14 - ((((poly_reg_25(c0):14 * poly_reg_25(c0):14) * poly_reg_25(c4):14) + (poly_reg_25(c0):14 * poly_reg_25(c3):14)) + poly_reg_25(c2):14))
16
(poly_reg_25(c1):15 - ((((poly_reg_25(c0):15 * poly_reg_25(c0):15) * poly_reg_25(c4):15) + (poly_reg_25(c0):15 * poly_reg_25(c3):15)) + poly_reg_25(c2):15))
17
(poly_reg_25(c1):16 - ((((poly_reg_25(c0):16 * poly_reg_25(c0):16) * poly_reg_25(c4):16) + (poly_reg_25(c0):16 * poly_reg_25(c3):16)) + poly_reg_25(c2):16))
18
(poly_reg_25(c1):17 - ((((poly_reg_25(c0):17 * poly_reg_25(c0):17) * poly_reg_25(c4):17) + (poly_reg_25(c0):17 * poly_reg_25(c3):17)) + poly_reg_25(c2):17))
19
(poly_reg_25(c1):18 - ((((poly_reg_25(c0):18 * poly_reg_25(c0):18) * poly_reg_25(c4):18) + (poly_reg_25(c0):18 * poly_reg_25(c3):18)) + poly_reg_25(c2):18))
20
(poly_reg_25(c1):19 - ((((poly_reg_25(c0):19 * poly_reg_25(c0):19) * poly_reg_25(c4):19) + (poly_reg_25(c0):19 * poly_reg_25(c3):19)) + poly_reg_25(c2):19))
21
(poly_reg_25(c1):20 - ((((poly_reg_25(c0):20 * poly_reg_25(c0):20) * poly_reg_25(c4):20) + (poly_reg_25(c0):20 * poly_reg_25(c3):20)) + poly_reg_25(c2):20))
22
(poly_reg_25(c1):21 - ((((poly_reg_25(c0):21 * poly_reg_25(c0):21) * poly_reg_25(c4):21) + (poly_reg_25(c0):21 * poly_reg_25(c3):21)) + poly_reg_25(c2):21))
23
(poly_reg_25(c1):22 - ((((poly_reg_25(c0):22 * poly_reg_25(c0):22) * poly_reg_25(c4):22) + (poly_reg_25(c0):22 * poly_reg_25(c3):22)) + poly_reg_25(c2):22))
24
(poly_reg_25(c1):23 - ((((poly_reg_25(c0):23 * poly_reg_25(c0):23) * poly_reg_25(c4):23) + (poly_reg_25(c0):23 * poly_reg_25(c3):23)) + poly_reg_25(c2):23))
25
(poly_reg_25(c1):24 - ((((poly_reg_25(c0):24 * poly_reg_25(c0):24) * poly_reg_25(c4):24) + (poly_reg_25(c0):24 * poly_reg_25(c3):24)) + poly_reg_25(c2):24))
Successfully compiled benchmark poly_reg_25; outputs placed in outputs/poly_reg_25!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 2
Number of additions: 12
Number of substitutions: 1
Number of rotations: 99
Number of scalar/plain multiplications: 131
Depth of the circuit: 20
Multiplicative depth of the circuit: 2
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [12]
==> key : sub , values : [1]
==> key : multiply_plain , values : [131]
==> key : rotate_rows , values : [99]
==> key : multiply , values : [2]
==> key : Depth , values : [20]
==> key : Multiplicative Depth , values : [2]
==> key : compile_time (s) , values : [1482.4271521568298]
Compile function : poly_reg_32
1
(poly_reg_32(c1):0 - ((((poly_reg_32(c0):0 * poly_reg_32(c0):0) * poly_reg_32(c4):0) + (poly_reg_32(c0):0 * poly_reg_32(c3):0)) + poly_reg_32(c2):0))
2
(poly_reg_32(c1):1 - ((((poly_reg_32(c0):1 * poly_reg_32(c0):1) * poly_reg_32(c4):1) + (poly_reg_32(c0):1 * poly_reg_32(c3):1)) + poly_reg_32(c2):1))
3
(poly_reg_32(c1):2 - ((((poly_reg_32(c0):2 * poly_reg_32(c0):2) * poly_reg_32(c4):2) + (poly_reg_32(c0):2 * poly_reg_32(c3):2)) + poly_reg_32(c2):2))
4
(poly_reg_32(c1):3 - ((((poly_reg_32(c0):3 * poly_reg_32(c0):3) * poly_reg_32(c4):3) + (poly_reg_32(c0):3 * poly_reg_32(c3):3)) + poly_reg_32(c2):3))
5
(poly_reg_32(c1):4 - ((((poly_reg_32(c0):4 * poly_reg_32(c0):4) * poly_reg_32(c4):4) + (poly_reg_32(c0):4 * poly_reg_32(c3):4)) + poly_reg_32(c2):4))
6
(poly_reg_32(c1):5 - ((((poly_reg_32(c0):5 * poly_reg_32(c0):5) * poly_reg_32(c4):5) + (poly_reg_32(c0):5 * poly_reg_32(c3):5)) + poly_reg_32(c2):5))
7
(poly_reg_32(c1):6 - ((((poly_reg_32(c0):6 * poly_reg_32(c0):6) * poly_reg_32(c4):6) + (poly_reg_32(c0):6 * poly_reg_32(c3):6)) + poly_reg_32(c2):6))
8
(poly_reg_32(c1):7 - ((((poly_reg_32(c0):7 * poly_reg_32(c0):7) * poly_reg_32(c4):7) + (poly_reg_32(c0):7 * poly_reg_32(c3):7)) + poly_reg_32(c2):7))
9
(poly_reg_32(c1):8 - ((((poly_reg_32(c0):8 * poly_reg_32(c0):8) * poly_reg_32(c4):8) + (poly_reg_32(c0):8 * poly_reg_32(c3):8)) + poly_reg_32(c2):8))
10
(poly_reg_32(c1):9 - ((((poly_reg_32(c0):9 * poly_reg_32(c0):9) * poly_reg_32(c4):9) + (poly_reg_32(c0):9 * poly_reg_32(c3):9)) + poly_reg_32(c2):9))
11
(poly_reg_32(c1):10 - ((((poly_reg_32(c0):10 * poly_reg_32(c0):10) * poly_reg_32(c4):10) + (poly_reg_32(c0):10 * poly_reg_32(c3):10)) + poly_reg_32(c2):10))
12
(poly_reg_32(c1):11 - ((((poly_reg_32(c0):11 * poly_reg_32(c0):11) * poly_reg_32(c4):11) + (poly_reg_32(c0):11 * poly_reg_32(c3):11)) + poly_reg_32(c2):11))
13
(poly_reg_32(c1):12 - ((((poly_reg_32(c0):12 * poly_reg_32(c0):12) * poly_reg_32(c4):12) + (poly_reg_32(c0):12 * poly_reg_32(c3):12)) + poly_reg_32(c2):12))
14
(poly_reg_32(c1):13 - ((((poly_reg_32(c0):13 * poly_reg_32(c0):13) * poly_reg_32(c4):13) + (poly_reg_32(c0):13 * poly_reg_32(c3):13)) + poly_reg_32(c2):13))
15
(poly_reg_32(c1):14 - ((((poly_reg_32(c0):14 * poly_reg_32(c0):14) * poly_reg_32(c4):14) + (poly_reg_32(c0):14 * poly_reg_32(c3):14)) + poly_reg_32(c2):14))
16
(poly_reg_32(c1):15 - ((((poly_reg_32(c0):15 * poly_reg_32(c0):15) * poly_reg_32(c4):15) + (poly_reg_32(c0):15 * poly_reg_32(c3):15)) + poly_reg_32(c2):15))
17
(poly_reg_32(c1):16 - ((((poly_reg_32(c0):16 * poly_reg_32(c0):16) * poly_reg_32(c4):16) + (poly_reg_32(c0):16 * poly_reg_32(c3):16)) + poly_reg_32(c2):16))
18
(poly_reg_32(c1):17 - ((((poly_reg_32(c0):17 * poly_reg_32(c0):17) * poly_reg_32(c4):17) + (poly_reg_32(c0):17 * poly_reg_32(c3):17)) + poly_reg_32(c2):17))
19
(poly_reg_32(c1):18 - ((((poly_reg_32(c0):18 * poly_reg_32(c0):18) * poly_reg_32(c4):18) + (poly_reg_32(c0):18 * poly_reg_32(c3):18)) + poly_reg_32(c2):18))
20
(poly_reg_32(c1):19 - ((((poly_reg_32(c0):19 * poly_reg_32(c0):19) * poly_reg_32(c4):19) + (poly_reg_32(c0):19 * poly_reg_32(c3):19)) + poly_reg_32(c2):19))
21
(poly_reg_32(c1):20 - ((((poly_reg_32(c0):20 * poly_reg_32(c0):20) * poly_reg_32(c4):20) + (poly_reg_32(c0):20 * poly_reg_32(c3):20)) + poly_reg_32(c2):20))
22
(poly_reg_32(c1):21 - ((((poly_reg_32(c0):21 * poly_reg_32(c0):21) * poly_reg_32(c4):21) + (poly_reg_32(c0):21 * poly_reg_32(c3):21)) + poly_reg_32(c2):21))
23
(poly_reg_32(c1):22 - ((((poly_reg_32(c0):22 * poly_reg_32(c0):22) * poly_reg_32(c4):22) + (poly_reg_32(c0):22 * poly_reg_32(c3):22)) + poly_reg_32(c2):22))
24
(poly_reg_32(c1):23 - ((((poly_reg_32(c0):23 * poly_reg_32(c0):23) * poly_reg_32(c4):23) + (poly_reg_32(c0):23 * poly_reg_32(c3):23)) + poly_reg_32(c2):23))
25
(poly_reg_32(c1):24 - ((((poly_reg_32(c0):24 * poly_reg_32(c0):24) * poly_reg_32(c4):24) + (poly_reg_32(c0):24 * poly_reg_32(c3):24)) + poly_reg_32(c2):24))
26
(poly_reg_32(c1):25 - ((((poly_reg_32(c0):25 * poly_reg_32(c0):25) * poly_reg_32(c4):25) + (poly_reg_32(c0):25 * poly_reg_32(c3):25)) + poly_reg_32(c2):25))
27
(poly_reg_32(c1):26 - ((((poly_reg_32(c0):26 * poly_reg_32(c0):26) * poly_reg_32(c4):26) + (poly_reg_32(c0):26 * poly_reg_32(c3):26)) + poly_reg_32(c2):26))
28
(poly_reg_32(c1):27 - ((((poly_reg_32(c0):27 * poly_reg_32(c0):27) * poly_reg_32(c4):27) + (poly_reg_32(c0):27 * poly_reg_32(c3):27)) + poly_reg_32(c2):27))
29
(poly_reg_32(c1):28 - ((((poly_reg_32(c0):28 * poly_reg_32(c0):28) * poly_reg_32(c4):28) + (poly_reg_32(c0):28 * poly_reg_32(c3):28)) + poly_reg_32(c2):28))
30
(poly_reg_32(c1):29 - ((((poly_reg_32(c0):29 * poly_reg_32(c0):29) * poly_reg_32(c4):29) + (poly_reg_32(c0):29 * poly_reg_32(c3):29)) + poly_reg_32(c2):29))
31
(poly_reg_32(c1):30 - ((((poly_reg_32(c0):30 * poly_reg_32(c0):30) * poly_reg_32(c4):30) + (poly_reg_32(c0):30 * poly_reg_32(c3):30)) + poly_reg_32(c2):30))
32
(poly_reg_32(c1):31 - ((((poly_reg_32(c0):31 * poly_reg_32(c0):31) * poly_reg_32(c4):31) + (poly_reg_32(c0):31 * poly_reg_32(c3):31)) + poly_reg_32(c2):31))
Successfully compiled benchmark poly_reg_32; outputs placed in outputs/poly_reg_32!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 2
Number of additions: 12
Number of substitutions: 1
Number of rotations: 131
Number of scalar/plain multiplications: 170
Depth of the circuit: 20
Multiplicative depth of the circuit: 2
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [12]
==> key : sub , values : [1]
==> key : multiply_plain , values : [170]
==> key : rotate_rows , values : [131]
==> key : multiply , values : [2]
==> key : Depth , values : [20]
==> key : Multiplicative Depth , values : [2]
==> key : compile_time (s) , values : [1879.8580694198608]
Compile function : linear_reg_3
1
((linear_reg_3(c1):0 - (linear_reg_3(c2):0 * linear_reg_3(c0):0)) - linear_reg_3(c3):0)
2
((linear_reg_3(c1):1 - (linear_reg_3(c2):1 * linear_reg_3(c0):1)) - linear_reg_3(c3):1)
3
((linear_reg_3(c1):2 - (linear_reg_3(c2):2 * linear_reg_3(c0):2)) - linear_reg_3(c3):2)
Successfully compiled benchmark linear_reg_3; outputs placed in outputs/linear_reg_3!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 1
Number of additions: 0
Number of substitutions: 2
Number of rotations: 0
Number of scalar/plain multiplications: 0
Depth of the circuit: 3
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [0]
==> key : sub , values : [2]
==> key : multiply_plain , values : [0]
==> key : rotate_rows , values : [0]
==> key : multiply , values : [1]
==> key : Depth , values : [3]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [2.03488826751709]
Compile function : linear_reg_5
1
((linear_reg_5(c1):0 - (linear_reg_5(c2):0 * linear_reg_5(c0):0)) - linear_reg_5(c3):0)
2
((linear_reg_5(c1):1 - (linear_reg_5(c2):1 * linear_reg_5(c0):1)) - linear_reg_5(c3):1)
3
((linear_reg_5(c1):2 - (linear_reg_5(c2):2 * linear_reg_5(c0):2)) - linear_reg_5(c3):2)
4
((linear_reg_5(c1):3 - (linear_reg_5(c2):3 * linear_reg_5(c0):3)) - linear_reg_5(c3):3)
5
((linear_reg_5(c1):4 - (linear_reg_5(c2):4 * linear_reg_5(c0):4)) - linear_reg_5(c3):4)
Successfully compiled benchmark linear_reg_5; outputs placed in outputs/linear_reg_5!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 1
Number of additions: 0
Number of substitutions: 2
Number of rotations: 0
Number of scalar/plain multiplications: 0
Depth of the circuit: 3
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [0]
==> key : sub , values : [2]
==> key : multiply_plain , values : [0]
==> key : rotate_rows , values : [0]
==> key : multiply , values : [1]
==> key : Depth , values : [3]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [2.621974229812622]
Compile function : linear_reg_25
1
((linear_reg_25(c1):0 - (linear_reg_25(c2):0 * linear_reg_25(c0):0)) - linear_reg_25(c3):0)
2
((linear_reg_25(c1):1 - (linear_reg_25(c2):1 * linear_reg_25(c0):1)) - linear_reg_25(c3):1)
3
((linear_reg_25(c1):2 - (linear_reg_25(c2):2 * linear_reg_25(c0):2)) - linear_reg_25(c3):2)
4
((linear_reg_25(c1):3 - (linear_reg_25(c2):3 * linear_reg_25(c0):3)) - linear_reg_25(c3):3)
5
((linear_reg_25(c1):4 - (linear_reg_25(c2):4 * linear_reg_25(c0):4)) - linear_reg_25(c3):4)
6
((linear_reg_25(c1):5 - (linear_reg_25(c2):5 * linear_reg_25(c0):5)) - linear_reg_25(c3):5)
7
((linear_reg_25(c1):6 - (linear_reg_25(c2):6 * linear_reg_25(c0):6)) - linear_reg_25(c3):6)
8
((linear_reg_25(c1):7 - (linear_reg_25(c2):7 * linear_reg_25(c0):7)) - linear_reg_25(c3):7)
9
((linear_reg_25(c1):8 - (linear_reg_25(c2):8 * linear_reg_25(c0):8)) - linear_reg_25(c3):8)
10
((linear_reg_25(c1):9 - (linear_reg_25(c2):9 * linear_reg_25(c0):9)) - linear_reg_25(c3):9)
11
((linear_reg_25(c1):10 - (linear_reg_25(c2):10 * linear_reg_25(c0):10)) - linear_reg_25(c3):10)
12
((linear_reg_25(c1):11 - (linear_reg_25(c2):11 * linear_reg_25(c0):11)) - linear_reg_25(c3):11)
13
((linear_reg_25(c1):12 - (linear_reg_25(c2):12 * linear_reg_25(c0):12)) - linear_reg_25(c3):12)
14
((linear_reg_25(c1):13 - (linear_reg_25(c2):13 * linear_reg_25(c0):13)) - linear_reg_25(c3):13)
15
((linear_reg_25(c1):14 - (linear_reg_25(c2):14 * linear_reg_25(c0):14)) - linear_reg_25(c3):14)
16
((linear_reg_25(c1):15 - (linear_reg_25(c2):15 * linear_reg_25(c0):15)) - linear_reg_25(c3):15)
17
((linear_reg_25(c1):16 - (linear_reg_25(c2):16 * linear_reg_25(c0):16)) - linear_reg_25(c3):16)
18
((linear_reg_25(c1):17 - (linear_reg_25(c2):17 * linear_reg_25(c0):17)) - linear_reg_25(c3):17)
19
((linear_reg_25(c1):18 - (linear_reg_25(c2):18 * linear_reg_25(c0):18)) - linear_reg_25(c3):18)
20
((linear_reg_25(c1):19 - (linear_reg_25(c2):19 * linear_reg_25(c0):19)) - linear_reg_25(c3):19)
21
((linear_reg_25(c1):20 - (linear_reg_25(c2):20 * linear_reg_25(c0):20)) - linear_reg_25(c3):20)
22
((linear_reg_25(c1):21 - (linear_reg_25(c2):21 * linear_reg_25(c0):21)) - linear_reg_25(c3):21)
23
((linear_reg_25(c1):22 - (linear_reg_25(c2):22 * linear_reg_25(c0):22)) - linear_reg_25(c3):22)
24
((linear_reg_25(c1):23 - (linear_reg_25(c2):23 * linear_reg_25(c0):23)) - linear_reg_25(c3):23)
25
((linear_reg_25(c1):24 - (linear_reg_25(c2):24 * linear_reg_25(c0):24)) - linear_reg_25(c3):24)
Successfully compiled benchmark linear_reg_25; outputs placed in outputs/linear_reg_25!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 1
Number of additions: 6
Number of substitutions: 2
Number of rotations: 33
Number of scalar/plain multiplications: 39
Depth of the circuit: 12
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [6]
==> key : sub , values : [2]
==> key : multiply_plain , values : [39]
==> key : rotate_rows , values : [33]
==> key : multiply , values : [1]
==> key : Depth , values : [12]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [754.8827350139618]
Compile function : linear_reg_32
1
((linear_reg_32(c1):0 - (linear_reg_32(c2):0 * linear_reg_32(c0):0)) - linear_reg_32(c3):0)
2
((linear_reg_32(c1):1 - (linear_reg_32(c2):1 * linear_reg_32(c0):1)) - linear_reg_32(c3):1)
3
((linear_reg_32(c1):2 - (linear_reg_32(c2):2 * linear_reg_32(c0):2)) - linear_reg_32(c3):2)
4
((linear_reg_32(c1):3 - (linear_reg_32(c2):3 * linear_reg_32(c0):3)) - linear_reg_32(c3):3)
5
((linear_reg_32(c1):4 - (linear_reg_32(c2):4 * linear_reg_32(c0):4)) - linear_reg_32(c3):4)
6
((linear_reg_32(c1):5 - (linear_reg_32(c2):5 * linear_reg_32(c0):5)) - linear_reg_32(c3):5)
7
((linear_reg_32(c1):6 - (linear_reg_32(c2):6 * linear_reg_32(c0):6)) - linear_reg_32(c3):6)
8
((linear_reg_32(c1):7 - (linear_reg_32(c2):7 * linear_reg_32(c0):7)) - linear_reg_32(c3):7)
9
((linear_reg_32(c1):8 - (linear_reg_32(c2):8 * linear_reg_32(c0):8)) - linear_reg_32(c3):8)
10
((linear_reg_32(c1):9 - (linear_reg_32(c2):9 * linear_reg_32(c0):9)) - linear_reg_32(c3):9)
11
((linear_reg_32(c1):10 - (linear_reg_32(c2):10 * linear_reg_32(c0):10)) - linear_reg_32(c3):10)
12
((linear_reg_32(c1):11 - (linear_reg_32(c2):11 * linear_reg_32(c0):11)) - linear_reg_32(c3):11)
13
((linear_reg_32(c1):12 - (linear_reg_32(c2):12 * linear_reg_32(c0):12)) - linear_reg_32(c3):12)
14
((linear_reg_32(c1):13 - (linear_reg_32(c2):13 * linear_reg_32(c0):13)) - linear_reg_32(c3):13)
15
((linear_reg_32(c1):14 - (linear_reg_32(c2):14 * linear_reg_32(c0):14)) - linear_reg_32(c3):14)
16
((linear_reg_32(c1):15 - (linear_reg_32(c2):15 * linear_reg_32(c0):15)) - linear_reg_32(c3):15)
17
((linear_reg_32(c1):16 - (linear_reg_32(c2):16 * linear_reg_32(c0):16)) - linear_reg_32(c3):16)
18
((linear_reg_32(c1):17 - (linear_reg_32(c2):17 * linear_reg_32(c0):17)) - linear_reg_32(c3):17)
19
((linear_reg_32(c1):18 - (linear_reg_32(c2):18 * linear_reg_32(c0):18)) - linear_reg_32(c3):18)
20
((linear_reg_32(c1):19 - (linear_reg_32(c2):19 * linear_reg_32(c0):19)) - linear_reg_32(c3):19)
21
((linear_reg_32(c1):20 - (linear_reg_32(c2):20 * linear_reg_32(c0):20)) - linear_reg_32(c3):20)
22
((linear_reg_32(c1):21 - (linear_reg_32(c2):21 * linear_reg_32(c0):21)) - linear_reg_32(c3):21)
23
((linear_reg_32(c1):22 - (linear_reg_32(c2):22 * linear_reg_32(c0):22)) - linear_reg_32(c3):22)
24
((linear_reg_32(c1):23 - (linear_reg_32(c2):23 * linear_reg_32(c0):23)) - linear_reg_32(c3):23)
25
((linear_reg_32(c1):24 - (linear_reg_32(c2):24 * linear_reg_32(c0):24)) - linear_reg_32(c3):24)
26
((linear_reg_32(c1):25 - (linear_reg_32(c2):25 * linear_reg_32(c0):25)) - linear_reg_32(c3):25)
27
((linear_reg_32(c1):26 - (linear_reg_32(c2):26 * linear_reg_32(c0):26)) - linear_reg_32(c3):26)
28
((linear_reg_32(c1):27 - (linear_reg_32(c2):27 * linear_reg_32(c0):27)) - linear_reg_32(c3):27)
29
((linear_reg_32(c1):28 - (linear_reg_32(c2):28 * linear_reg_32(c0):28)) - linear_reg_32(c3):28)
30
((linear_reg_32(c1):29 - (linear_reg_32(c2):29 * linear_reg_32(c0):29)) - linear_reg_32(c3):29)
31
((linear_reg_32(c1):30 - (linear_reg_32(c2):30 * linear_reg_32(c0):30)) - linear_reg_32(c3):30)
32
((linear_reg_32(c1):31 - (linear_reg_32(c2):31 * linear_reg_32(c0):31)) - linear_reg_32(c3):31)
Successfully compiled benchmark linear_reg_32; outputs placed in outputs/linear_reg_32!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 1
Number of additions: 6
Number of substitutions: 3
Number of rotations: 44
Number of scalar/plain multiplications: 50
Depth of the circuit: 12
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [6]
==> key : sub , values : [3]
==> key : multiply_plain , values : [50]
==> key : rotate_rows , values : [44]
==> key : multiply , values : [1]
==> key : Depth , values : [12]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [955.7247185707092]
Compile function : hamming_distance_3
1
((hamming_distance_3(a):0 + hamming_distance_3(b):0) - (2 * (hamming_distance_3(a):0 * hamming_distance_3(b):0)))
2
((hamming_distance_3(a):1 + hamming_distance_3(b):1) - (2 * (hamming_distance_3(a):1 * hamming_distance_3(b):1)))
3
((hamming_distance_3(a):2 + hamming_distance_3(b):2) - (2 * (hamming_distance_3(a):2 * hamming_distance_3(b):2)))
Successfully compiled benchmark hamming_distance_3; outputs placed in outputs/hamming_distance_3!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 2
Number of additions: 1
Number of substitutions: 1
Number of rotations: 0
Number of scalar/plain multiplications: 0
Depth of the circuit: 3
Multiplicative depth of the circuit: 2
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [1]
==> key : sub , values : [1]
==> key : multiply_plain , values : [0]
==> key : rotate_rows , values : [0]
==> key : multiply , values : [2]
==> key : Depth , values : [3]
==> key : Multiplicative Depth , values : [2]
==> key : compile_time (s) , values : [99.67394757270813]
Compile function : hamming_distance_5
1
((hamming_distance_5(a):0 + hamming_distance_5(b):0) - (2 * (hamming_distance_5(a):0 * hamming_distance_5(b):0)))
2
((hamming_distance_5(a):1 + hamming_distance_5(b):1) - (2 * (hamming_distance_5(a):1 * hamming_distance_5(b):1)))
3
((hamming_distance_5(a):2 + hamming_distance_5(b):2) - (2 * (hamming_distance_5(a):2 * hamming_distance_5(b):2)))
4
((hamming_distance_5(a):3 + hamming_distance_5(b):3) - (2 * (hamming_distance_5(a):3 * hamming_distance_5(b):3)))
5
((hamming_distance_5(a):4 + hamming_distance_5(b):4) - (2 * (hamming_distance_5(a):4 * hamming_distance_5(b):4)))
Successfully compiled benchmark hamming_distance_5; outputs placed in outputs/hamming_distance_5!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 2
Number of additions: 2
Number of substitutions: 2
Number of rotations: 0
Number of scalar/plain multiplications: 0
Depth of the circuit: 3
Multiplicative depth of the circuit: 2
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [2]
==> key : sub , values : [2]
==> key : multiply_plain , values : [0]
==> key : rotate_rows , values : [0]
==> key : multiply , values : [2]
==> key : Depth , values : [3]
==> key : Multiplicative Depth , values : [2]
==> key : compile_time (s) , values : [176.77775502204895]
Compile function : hamming_distance_25
1
((hamming_distance_25(a):0 + hamming_distance_25(b):0) - (2 * (hamming_distance_25(a):0 * hamming_distance_25(b):0)))
2
((hamming_distance_25(a):1 + hamming_distance_25(b):1) - (2 * (hamming_distance_25(a):1 * hamming_distance_25(b):1)))
3
((hamming_distance_25(a):2 + hamming_distance_25(b):2) - (2 * (hamming_distance_25(a):2 * hamming_distance_25(b):2)))
4
((hamming_distance_25(a):3 + hamming_distance_25(b):3) - (2 * (hamming_distance_25(a):3 * hamming_distance_25(b):3)))
5
((hamming_distance_25(a):4 + hamming_distance_25(b):4) - (2 * (hamming_distance_25(a):4 * hamming_distance_25(b):4)))
6
((hamming_distance_25(a):5 + hamming_distance_25(b):5) - (2 * (hamming_distance_25(a):5 * hamming_distance_25(b):5)))
7
((hamming_distance_25(a):6 + hamming_distance_25(b):6) - (2 * (hamming_distance_25(a):6 * hamming_distance_25(b):6)))
8
((hamming_distance_25(a):7 + hamming_distance_25(b):7) - (2 * (hamming_distance_25(a):7 * hamming_distance_25(b):7)))
9
((hamming_distance_25(a):8 + hamming_distance_25(b):8) - (2 * (hamming_distance_25(a):8 * hamming_distance_25(b):8)))
10
((hamming_distance_25(a):9 + hamming_distance_25(b):9) - (2 * (hamming_distance_25(a):9 * hamming_distance_25(b):9)))
11
((hamming_distance_25(a):10 + hamming_distance_25(b):10) - (2 * (hamming_distance_25(a):10 * hamming_distance_25(b):10)))
12
((hamming_distance_25(a):11 + hamming_distance_25(b):11) - (2 * (hamming_distance_25(a):11 * hamming_distance_25(b):11)))
13
((hamming_distance_25(a):12 + hamming_distance_25(b):12) - (2 * (hamming_distance_25(a):12 * hamming_distance_25(b):12)))
14
((hamming_distance_25(a):13 + hamming_distance_25(b):13) - (2 * (hamming_distance_25(a):13 * hamming_distance_25(b):13)))
15
((hamming_distance_25(a):14 + hamming_distance_25(b):14) - (2 * (hamming_distance_25(a):14 * hamming_distance_25(b):14)))
16
((hamming_distance_25(a):15 + hamming_distance_25(b):15) - (2 * (hamming_distance_25(a):15 * hamming_distance_25(b):15)))
17
((hamming_distance_25(a):16 + hamming_distance_25(b):16) - (2 * (hamming_distance_25(a):16 * hamming_distance_25(b):16)))
18
((hamming_distance_25(a):17 + hamming_distance_25(b):17) - (2 * (hamming_distance_25(a):17 * hamming_distance_25(b):17)))
19
((hamming_distance_25(a):18 + hamming_distance_25(b):18) - (2 * (hamming_distance_25(a):18 * hamming_distance_25(b):18)))
20
((hamming_distance_25(a):19 + hamming_distance_25(b):19) - (2 * (hamming_distance_25(a):19 * hamming_distance_25(b):19)))
21
((hamming_distance_25(a):20 + hamming_distance_25(b):20) - (2 * (hamming_distance_25(a):20 * hamming_distance_25(b):20)))
22
((hamming_distance_25(a):21 + hamming_distance_25(b):21) - (2 * (hamming_distance_25(a):21 * hamming_distance_25(b):21)))
23
((hamming_distance_25(a):22 + hamming_distance_25(b):22) - (2 * (hamming_distance_25(a):22 * hamming_distance_25(b):22)))
24
((hamming_distance_25(a):23 + hamming_distance_25(b):23) - (2 * (hamming_distance_25(a):23 * hamming_distance_25(b):23)))
25
((hamming_distance_25(a):24 + hamming_distance_25(b):24) - (2 * (hamming_distance_25(a):24 * hamming_distance_25(b):24)))
Successfully compiled benchmark hamming_distance_25; outputs placed in outputs/hamming_distance_25!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 2
Number of additions: 8
Number of substitutions: 1
Number of rotations: 47
Number of scalar/plain multiplications: 70
Depth of the circuit: 12
Multiplicative depth of the circuit: 2
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [8]
==> key : sub , values : [1]
==> key : multiply_plain , values : [70]
==> key : rotate_rows , values : [47]
==> key : multiply , values : [2]
==> key : Depth , values : [12]
==> key : Multiplicative Depth , values : [2]
==> key : compile_time (s) , values : [831.1840665340424]
Compile function : hamming_distance_32
1
((hamming_distance_32(a):0 + hamming_distance_32(b):0) - (2 * (hamming_distance_32(a):0 * hamming_distance_32(b):0)))
2
((hamming_distance_32(a):1 + hamming_distance_32(b):1) - (2 * (hamming_distance_32(a):1 * hamming_distance_32(b):1)))
3
((hamming_distance_32(a):2 + hamming_distance_32(b):2) - (2 * (hamming_distance_32(a):2 * hamming_distance_32(b):2)))
4
((hamming_distance_32(a):3 + hamming_distance_32(b):3) - (2 * (hamming_distance_32(a):3 * hamming_distance_32(b):3)))
5
((hamming_distance_32(a):4 + hamming_distance_32(b):4) - (2 * (hamming_distance_32(a):4 * hamming_distance_32(b):4)))
6
((hamming_distance_32(a):5 + hamming_distance_32(b):5) - (2 * (hamming_distance_32(a):5 * hamming_distance_32(b):5)))
7
((hamming_distance_32(a):6 + hamming_distance_32(b):6) - (2 * (hamming_distance_32(a):6 * hamming_distance_32(b):6)))
8
((hamming_distance_32(a):7 + hamming_distance_32(b):7) - (2 * (hamming_distance_32(a):7 * hamming_distance_32(b):7)))
9
((hamming_distance_32(a):8 + hamming_distance_32(b):8) - (2 * (hamming_distance_32(a):8 * hamming_distance_32(b):8)))
10
((hamming_distance_32(a):9 + hamming_distance_32(b):9) - (2 * (hamming_distance_32(a):9 * hamming_distance_32(b):9)))
11
((hamming_distance_32(a):10 + hamming_distance_32(b):10) - (2 * (hamming_distance_32(a):10 * hamming_distance_32(b):10)))
12
((hamming_distance_32(a):11 + hamming_distance_32(b):11) - (2 * (hamming_distance_32(a):11 * hamming_distance_32(b):11)))
13
((hamming_distance_32(a):12 + hamming_distance_32(b):12) - (2 * (hamming_distance_32(a):12 * hamming_distance_32(b):12)))
14
((hamming_distance_32(a):13 + hamming_distance_32(b):13) - (2 * (hamming_distance_32(a):13 * hamming_distance_32(b):13)))
15
((hamming_distance_32(a):14 + hamming_distance_32(b):14) - (2 * (hamming_distance_32(a):14 * hamming_distance_32(b):14)))
16
((hamming_distance_32(a):15 + hamming_distance_32(b):15) - (2 * (hamming_distance_32(a):15 * hamming_distance_32(b):15)))
17
((hamming_distance_32(a):16 + hamming_distance_32(b):16) - (2 * (hamming_distance_32(a):16 * hamming_distance_32(b):16)))
18
((hamming_distance_32(a):17 + hamming_distance_32(b):17) - (2 * (hamming_distance_32(a):17 * hamming_distance_32(b):17)))
19
((hamming_distance_32(a):18 + hamming_distance_32(b):18) - (2 * (hamming_distance_32(a):18 * hamming_distance_32(b):18)))
20
((hamming_distance_32(a):19 + hamming_distance_32(b):19) - (2 * (hamming_distance_32(a):19 * hamming_distance_32(b):19)))
21
((hamming_distance_32(a):20 + hamming_distance_32(b):20) - (2 * (hamming_distance_32(a):20 * hamming_distance_32(b):20)))
22
((hamming_distance_32(a):21 + hamming_distance_32(b):21) - (2 * (hamming_distance_32(a):21 * hamming_distance_32(b):21)))
23
((hamming_distance_32(a):22 + hamming_distance_32(b):22) - (2 * (hamming_distance_32(a):22 * hamming_distance_32(b):22)))
24
((hamming_distance_32(a):23 + hamming_distance_32(b):23) - (2 * (hamming_distance_32(a):23 * hamming_distance_32(b):23)))
25
((hamming_distance_32(a):24 + hamming_distance_32(b):24) - (2 * (hamming_distance_32(a):24 * hamming_distance_32(b):24)))
26
((hamming_distance_32(a):25 + hamming_distance_32(b):25) - (2 * (hamming_distance_32(a):25 * hamming_distance_32(b):25)))
27
((hamming_distance_32(a):26 + hamming_distance_32(b):26) - (2 * (hamming_distance_32(a):26 * hamming_distance_32(b):26)))
28
((hamming_distance_32(a):27 + hamming_distance_32(b):27) - (2 * (hamming_distance_32(a):27 * hamming_distance_32(b):27)))
29
((hamming_distance_32(a):28 + hamming_distance_32(b):28) - (2 * (hamming_distance_32(a):28 * hamming_distance_32(b):28)))
30
((hamming_distance_32(a):29 + hamming_distance_32(b):29) - (2 * (hamming_distance_32(a):29 * hamming_distance_32(b):29)))
31
((hamming_distance_32(a):30 + hamming_distance_32(b):30) - (2 * (hamming_distance_32(a):30 * hamming_distance_32(b):30)))
32
((hamming_distance_32(a):31 + hamming_distance_32(b):31) - (2 * (hamming_distance_32(a):31 * hamming_distance_32(b):31)))
Successfully compiled benchmark hamming_distance_32; outputs placed in outputs/hamming_distance_32!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 2
Number of additions: 8
Number of substitutions: 1
Number of rotations: 66
Number of scalar/plain multiplications: 94
Depth of the circuit: 12
Multiplicative depth of the circuit: 2
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [8]
==> key : sub , values : [1]
==> key : multiply_plain , values : [94]
==> key : rotate_rows , values : [66]
==> key : multiply , values : [2]
==> key : Depth , values : [12]
==> key : Multiplicative Depth , values : [2]
==> key : compile_time (s) , values : [1047.1884677410126]
Compile function : box_blur_3x3
1
((((0 + box_blur_3x3(image):0;0) + box_blur_3x3(image):0;1) + box_blur_3x3(image):1;0) + box_blur_3x3(image):1;1)
2
((((((0 + box_blur_3x3(image):0;0) + box_blur_3x3(image):0;1) + box_blur_3x3(image):0;2) + box_blur_3x3(image):1;0) + box_blur_3x3(image):1;1) + box_blur_3x3(image):1;2)
3
((((0 + box_blur_3x3(image):0;1) + box_blur_3x3(image):0;2) + box_blur_3x3(image):1;1) + box_blur_3x3(image):1;2)
4
((((((0 + box_blur_3x3(image):0;0) + box_blur_3x3(image):0;1) + box_blur_3x3(image):1;0) + box_blur_3x3(image):1;1) + box_blur_3x3(image):2;0) + box_blur_3x3(image):2;1)
5
(((((((((0 + box_blur_3x3(image):0;0) + box_blur_3x3(image):0;1) + box_blur_3x3(image):0;2) + box_blur_3x3(image):1;0) + box_blur_3x3(image):1;1) + box_blur_3x3(image):1;2) + box_blur_3x3(image):2;0) + box_blur_3x3(image):2;1) + box_blur_3x3(image):2;2)
6
((((((0 + box_blur_3x3(image):0;1) + box_blur_3x3(image):0;2) + box_blur_3x3(image):1;1) + box_blur_3x3(image):1;2) + box_blur_3x3(image):2;1) + box_blur_3x3(image):2;2)
7
((((0 + box_blur_3x3(image):1;0) + box_blur_3x3(image):1;1) + box_blur_3x3(image):2;0) + box_blur_3x3(image):2;1)
8
((((((0 + box_blur_3x3(image):1;0) + box_blur_3x3(image):1;1) + box_blur_3x3(image):1;2) + box_blur_3x3(image):2;0) + box_blur_3x3(image):2;1) + box_blur_3x3(image):2;2)
9
((((0 + box_blur_3x3(image):1;1) + box_blur_3x3(image):1;2) + box_blur_3x3(image):2;1) + box_blur_3x3(image):2;2)
Successfully compiled benchmark box_blur_3x3; outputs placed in outputs/box_blur_3x3!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 0
Number of additions: 24
Number of substitutions: 0
Number of rotations: 17
Number of scalar/plain multiplications: 44
Depth of the circuit: 27
Multiplicative depth of the circuit: 0
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [24]
==> key : sub , values : [0]
==> key : multiply_plain , values : [44]
==> key : rotate_rows , values : [17]
==> key : multiply , values : [0]
==> key : Depth , values : [27]
==> key : Multiplicative Depth , values : [0]
==> key : compile_time (s) , values : [471.5254192352295]
Compile function : box_blur_5x5
1
((((0 + box_blur_5x5(image):0;0) + box_blur_5x5(image):0;1) + box_blur_5x5(image):1;0) + box_blur_5x5(image):1;1)
2
((((((0 + box_blur_5x5(image):0;0) + box_blur_5x5(image):0;1) + box_blur_5x5(image):0;2) + box_blur_5x5(image):1;0) + box_blur_5x5(image):1;1) + box_blur_5x5(image):1;2)
3
((((((0 + box_blur_5x5(image):0;1) + box_blur_5x5(image):0;2) + box_blur_5x5(image):0;3) + box_blur_5x5(image):1;1) + box_blur_5x5(image):1;2) + box_blur_5x5(image):1;3)
4
((((((0 + box_blur_5x5(image):0;2) + box_blur_5x5(image):0;3) + box_blur_5x5(image):0;4) + box_blur_5x5(image):1;2) + box_blur_5x5(image):1;3) + box_blur_5x5(image):1;4)
5
((((0 + box_blur_5x5(image):0;3) + box_blur_5x5(image):0;4) + box_blur_5x5(image):1;3) + box_blur_5x5(image):1;4)
6
((((((0 + box_blur_5x5(image):0;0) + box_blur_5x5(image):0;1) + box_blur_5x5(image):1;0) + box_blur_5x5(image):1;1) + box_blur_5x5(image):2;0) + box_blur_5x5(image):2;1)
7
(((((((((0 + box_blur_5x5(image):0;0) + box_blur_5x5(image):0;1) + box_blur_5x5(image):0;2) + box_blur_5x5(image):1;0) + box_blur_5x5(image):1;1) + box_blur_5x5(image):1;2) + box_blur_5x5(image):2;0) + box_blur_5x5(image):2;1) + box_blur_5x5(image):2;2)
8
(((((((((0 + box_blur_5x5(image):0;1) + box_blur_5x5(image):0;2) + box_blur_5x5(image):0;3) + box_blur_5x5(image):1;1) + box_blur_5x5(image):1;2) + box_blur_5x5(image):1;3) + box_blur_5x5(image):2;1) + box_blur_5x5(image):2;2) + box_blur_5x5(image):2;3)
9
(((((((((0 + box_blur_5x5(image):0;2) + box_blur_5x5(image):0;3) + box_blur_5x5(image):0;4) + box_blur_5x5(image):1;2) + box_blur_5x5(image):1;3) + box_blur_5x5(image):1;4) + box_blur_5x5(image):2;2) + box_blur_5x5(image):2;3) + box_blur_5x5(image):2;4)
10
((((((0 + box_blur_5x5(image):0;3) + box_blur_5x5(image):0;4) + box_blur_5x5(image):1;3) + box_blur_5x5(image):1;4) + box_blur_5x5(image):2;3) + box_blur_5x5(image):2;4)
11
((((((0 + box_blur_5x5(image):1;0) + box_blur_5x5(image):1;1) + box_blur_5x5(image):2;0) + box_blur_5x5(image):2;1) + box_blur_5x5(image):3;0) + box_blur_5x5(image):3;1)
12
(((((((((0 + box_blur_5x5(image):1;0) + box_blur_5x5(image):1;1) + box_blur_5x5(image):1;2) + box_blur_5x5(image):2;0) + box_blur_5x5(image):2;1) + box_blur_5x5(image):2;2) + box_blur_5x5(image):3;0) + box_blur_5x5(image):3;1) + box_blur_5x5(image):3;2)
13
(((((((((0 + box_blur_5x5(image):1;1) + box_blur_5x5(image):1;2) + box_blur_5x5(image):1;3) + box_blur_5x5(image):2;1) + box_blur_5x5(image):2;2) + box_blur_5x5(image):2;3) + box_blur_5x5(image):3;1) + box_blur_5x5(image):3;2) + box_blur_5x5(image):3;3)
14
(((((((((0 + box_blur_5x5(image):1;2) + box_blur_5x5(image):1;3) + box_blur_5x5(image):1;4) + box_blur_5x5(image):2;2) + box_blur_5x5(image):2;3) + box_blur_5x5(image):2;4) + box_blur_5x5(image):3;2) + box_blur_5x5(image):3;3) + box_blur_5x5(image):3;4)
15
((((((0 + box_blur_5x5(image):1;3) + box_blur_5x5(image):1;4) + box_blur_5x5(image):2;3) + box_blur_5x5(image):2;4) + box_blur_5x5(image):3;3) + box_blur_5x5(image):3;4)
16
((((((0 + box_blur_5x5(image):2;0) + box_blur_5x5(image):2;1) + box_blur_5x5(image):3;0) + box_blur_5x5(image):3;1) + box_blur_5x5(image):4;0) + box_blur_5x5(image):4;1)
17
(((((((((0 + box_blur_5x5(image):2;0) + box_blur_5x5(image):2;1) + box_blur_5x5(image):2;2) + box_blur_5x5(image):3;0) + box_blur_5x5(image):3;1) + box_blur_5x5(image):3;2) + box_blur_5x5(image):4;0) + box_blur_5x5(image):4;1) + box_blur_5x5(image):4;2)
18
(((((((((0 + box_blur_5x5(image):2;1) + box_blur_5x5(image):2;2) + box_blur_5x5(image):2;3) + box_blur_5x5(image):3;1) + box_blur_5x5(image):3;2) + box_blur_5x5(image):3;3) + box_blur_5x5(image):4;1) + box_blur_5x5(image):4;2) + box_blur_5x5(image):4;3)
19
(((((((((0 + box_blur_5x5(image):2;2) + box_blur_5x5(image):2;3) + box_blur_5x5(image):2;4) + box_blur_5x5(image):3;2) + box_blur_5x5(image):3;3) + box_blur_5x5(image):3;4) + box_blur_5x5(image):4;2) + box_blur_5x5(image):4;3) + box_blur_5x5(image):4;4)
20
((((((0 + box_blur_5x5(image):2;3) + box_blur_5x5(image):2;4) + box_blur_5x5(image):3;3) + box_blur_5x5(image):3;4) + box_blur_5x5(image):4;3) + box_blur_5x5(image):4;4)
21
((((0 + box_blur_5x5(image):3;0) + box_blur_5x5(image):3;1) + box_blur_5x5(image):4;0) + box_blur_5x5(image):4;1)
22
((((((0 + box_blur_5x5(image):3;0) + box_blur_5x5(image):3;1) + box_blur_5x5(image):3;2) + box_blur_5x5(image):4;0) + box_blur_5x5(image):4;1) + box_blur_5x5(image):4;2)
23
((((((0 + box_blur_5x5(image):3;1) + box_blur_5x5(image):3;2) + box_blur_5x5(image):3;3) + box_blur_5x5(image):4;1) + box_blur_5x5(image):4;2) + box_blur_5x5(image):4;3)
24
((((((0 + box_blur_5x5(image):3;2) + box_blur_5x5(image):3;3) + box_blur_5x5(image):3;4) + box_blur_5x5(image):4;2) + box_blur_5x5(image):4;3) + box_blur_5x5(image):4;4)
25
((((0 + box_blur_5x5(image):3;3) + box_blur_5x5(image):3;4) + box_blur_5x5(image):4;3) + box_blur_5x5(image):4;4)
Successfully compiled benchmark box_blur_5x5; outputs placed in outputs/box_blur_5x5!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 0
Number of additions: 26
Number of substitutions: 0
Number of rotations: 96
Number of scalar/plain multiplications: 192
Depth of the circuit: 36
Multiplicative depth of the circuit: 0
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [26]
==> key : sub , values : [0]
==> key : multiply_plain , values : [192]
==> key : rotate_rows , values : [96]
==> key : multiply , values : [0]
==> key : Depth , values : [36]
==> key : Multiplicative Depth , values : [0]
==> key : compile_time (s) , values : [1570.779545545578]
Compile function : gx_kernel_3x3
1
((((0 * -1) + (0 * 1)) + ((-2 * 0) + (2 * gx_kernel_3x3(image):0;1))) + ((0 * -1) + (gx_kernel_3x3(image):1;1 * 1)))
2
((((0 * -1) + (0 * 1)) + ((-2 * gx_kernel_3x3(image):0;0) + (2 * gx_kernel_3x3(image):0;2))) + ((gx_kernel_3x3(image):1;0 * -1) + (gx_kernel_3x3(image):1;2 * 1)))
3
((((0 * -1) + (0 * 1)) + ((-2 * gx_kernel_3x3(image):0;1) + (2 * 0))) + ((gx_kernel_3x3(image):1;1 * -1) + (0 * 1)))
4
((((0 * -1) + (gx_kernel_3x3(image):0;1 * 1)) + ((-2 * 0) + (2 * gx_kernel_3x3(image):1;1))) + ((0 * -1) + (gx_kernel_3x3(image):2;1 * 1)))
5
((((gx_kernel_3x3(image):0;0 * -1) + (gx_kernel_3x3(image):0;2 * 1)) + ((-2 * gx_kernel_3x3(image):1;0) + (2 * gx_kernel_3x3(image):1;2))) + ((gx_kernel_3x3(image):2;0 * -1) + (gx_kernel_3x3(image):2;2 * 1)))
6
((((gx_kernel_3x3(image):0;1 * -1) + (0 * 1)) + ((-2 * gx_kernel_3x3(image):1;1) + (2 * 0))) + ((gx_kernel_3x3(image):2;1 * -1) + (0 * 1)))
7
((((0 * -1) + (gx_kernel_3x3(image):1;1 * 1)) + ((-2 * 0) + (2 * gx_kernel_3x3(image):2;1))) + ((0 * -1) + (0 * 1)))
8
((((gx_kernel_3x3(image):1;0 * -1) + (gx_kernel_3x3(image):1;2 * 1)) + ((-2 * gx_kernel_3x3(image):2;0) + (2 * gx_kernel_3x3(image):2;2))) + ((0 * -1) + (0 * 1)))
9
((((gx_kernel_3x3(image):1;1 * -1) + (0 * 1)) + ((-2 * gx_kernel_3x3(image):2;1) + (2 * 0))) + ((0 * -1) + (0 * 1)))
Successfully compiled benchmark gx_kernel_3x3; outputs placed in outputs/gx_kernel_3x3!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 2
Number of additions: 11
Number of substitutions: 0
Number of rotations: 28
Number of scalar/plain multiplications: 55
Depth of the circuit: 16
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [11]
==> key : sub , values : [0]
==> key : multiply_plain , values : [55]
==> key : rotate_rows , values : [28]
==> key : multiply , values : [2]
==> key : Depth , values : [16]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [587.6836261749268]
Compile function : gx_kernel_5x5
1
((((0 * -1) + (0 * 1)) + ((-2 * 0) + (2 * gx_kernel_5x5(image):0;1))) + ((0 * -1) + (gx_kernel_5x5(image):1;1 * 1)))
2
((((0 * -1) + (0 * 1)) + ((-2 * gx_kernel_5x5(image):0;0) + (2 * gx_kernel_5x5(image):0;2))) + ((gx_kernel_5x5(image):1;0 * -1) + (gx_kernel_5x5(image):1;2 * 1)))
3
((((0 * -1) + (0 * 1)) + ((-2 * gx_kernel_5x5(image):0;1) + (2 * gx_kernel_5x5(image):0;3))) + ((gx_kernel_5x5(image):1;1 * -1) + (gx_kernel_5x5(image):1;3 * 1)))
4
((((0 * -1) + (0 * 1)) + ((-2 * gx_kernel_5x5(image):0;2) + (2 * gx_kernel_5x5(image):0;4))) + ((gx_kernel_5x5(image):1;2 * -1) + (gx_kernel_5x5(image):1;4 * 1)))
5
((((0 * -1) + (0 * 1)) + ((-2 * gx_kernel_5x5(image):0;3) + (2 * 0))) + ((gx_kernel_5x5(image):1;3 * -1) + (0 * 1)))
6
((((0 * -1) + (gx_kernel_5x5(image):0;1 * 1)) + ((-2 * 0) + (2 * gx_kernel_5x5(image):1;1))) + ((0 * -1) + (gx_kernel_5x5(image):2;1 * 1)))
7
((((gx_kernel_5x5(image):0;0 * -1) + (gx_kernel_5x5(image):0;2 * 1)) + ((-2 * gx_kernel_5x5(image):1;0) + (2 * gx_kernel_5x5(image):1;2))) + ((gx_kernel_5x5(image):2;0 * -1) + (gx_kernel_5x5(image):2;2 * 1)))
8
((((gx_kernel_5x5(image):0;1 * -1) + (gx_kernel_5x5(image):0;3 * 1)) + ((-2 * gx_kernel_5x5(image):1;1) + (2 * gx_kernel_5x5(image):1;3))) + ((gx_kernel_5x5(image):2;1 * -1) + (gx_kernel_5x5(image):2;3 * 1)))
9
((((gx_kernel_5x5(image):0;2 * -1) + (gx_kernel_5x5(image):0;4 * 1)) + ((-2 * gx_kernel_5x5(image):1;2) + (2 * gx_kernel_5x5(image):1;4))) + ((gx_kernel_5x5(image):2;2 * -1) + (gx_kernel_5x5(image):2;4 * 1)))
10
((((gx_kernel_5x5(image):0;3 * -1) + (0 * 1)) + ((-2 * gx_kernel_5x5(image):1;3) + (2 * 0))) + ((gx_kernel_5x5(image):2;3 * -1) + (0 * 1)))
11
((((0 * -1) + (gx_kernel_5x5(image):1;1 * 1)) + ((-2 * 0) + (2 * gx_kernel_5x5(image):2;1))) + ((0 * -1) + (gx_kernel_5x5(image):3;1 * 1)))
12
((((gx_kernel_5x5(image):1;0 * -1) + (gx_kernel_5x5(image):1;2 * 1)) + ((-2 * gx_kernel_5x5(image):2;0) + (2 * gx_kernel_5x5(image):2;2))) + ((gx_kernel_5x5(image):3;0 * -1) + (gx_kernel_5x5(image):3;2 * 1)))
13
((((gx_kernel_5x5(image):1;1 * -1) + (gx_kernel_5x5(image):1;3 * 1)) + ((-2 * gx_kernel_5x5(image):2;1) + (2 * gx_kernel_5x5(image):2;3))) + ((gx_kernel_5x5(image):3;1 * -1) + (gx_kernel_5x5(image):3;3 * 1)))
14
((((gx_kernel_5x5(image):1;2 * -1) + (gx_kernel_5x5(image):1;4 * 1)) + ((-2 * gx_kernel_5x5(image):2;2) + (2 * gx_kernel_5x5(image):2;4))) + ((gx_kernel_5x5(image):3;2 * -1) + (gx_kernel_5x5(image):3;4 * 1)))
15
((((gx_kernel_5x5(image):1;3 * -1) + (0 * 1)) + ((-2 * gx_kernel_5x5(image):2;3) + (2 * 0))) + ((gx_kernel_5x5(image):3;3 * -1) + (0 * 1)))
16
((((0 * -1) + (gx_kernel_5x5(image):2;1 * 1)) + ((-2 * 0) + (2 * gx_kernel_5x5(image):3;1))) + ((0 * -1) + (gx_kernel_5x5(image):4;1 * 1)))
17
((((gx_kernel_5x5(image):2;0 * -1) + (gx_kernel_5x5(image):2;2 * 1)) + ((-2 * gx_kernel_5x5(image):3;0) + (2 * gx_kernel_5x5(image):3;2))) + ((gx_kernel_5x5(image):4;0 * -1) + (gx_kernel_5x5(image):4;2 * 1)))
18
((((gx_kernel_5x5(image):2;1 * -1) + (gx_kernel_5x5(image):2;3 * 1)) + ((-2 * gx_kernel_5x5(image):3;1) + (2 * gx_kernel_5x5(image):3;3))) + ((gx_kernel_5x5(image):4;1 * -1) + (gx_kernel_5x5(image):4;3 * 1)))
19
((((gx_kernel_5x5(image):2;2 * -1) + (gx_kernel_5x5(image):2;4 * 1)) + ((-2 * gx_kernel_5x5(image):3;2) + (2 * gx_kernel_5x5(image):3;4))) + ((gx_kernel_5x5(image):4;2 * -1) + (gx_kernel_5x5(image):4;4 * 1)))
20
((((gx_kernel_5x5(image):2;3 * -1) + (0 * 1)) + ((-2 * gx_kernel_5x5(image):3;3) + (2 * 0))) + ((gx_kernel_5x5(image):4;3 * -1) + (0 * 1)))
21
((((0 * -1) + (gx_kernel_5x5(image):3;1 * 1)) + ((-2 * 0) + (2 * gx_kernel_5x5(image):4;1))) + ((0 * -1) + (0 * 1)))
22
((((gx_kernel_5x5(image):3;0 * -1) + (gx_kernel_5x5(image):3;2 * 1)) + ((-2 * gx_kernel_5x5(image):4;0) + (2 * gx_kernel_5x5(image):4;2))) + ((0 * -1) + (0 * 1)))
23
((((gx_kernel_5x5(image):3;1 * -1) + (gx_kernel_5x5(image):3;3 * 1)) + ((-2 * gx_kernel_5x5(image):4;1) + (2 * gx_kernel_5x5(image):4;3))) + ((0 * -1) + (0 * 1)))
24
((((gx_kernel_5x5(image):3;2 * -1) + (gx_kernel_5x5(image):3;4 * 1)) + ((-2 * gx_kernel_5x5(image):4;2) + (2 * gx_kernel_5x5(image):4;4))) + ((0 * -1) + (0 * 1)))
25
((((gx_kernel_5x5(image):3;3 * -1) + (0 * 1)) + ((-2 * gx_kernel_5x5(image):4;3) + (2 * 0))) + ((0 * -1) + (0 * 1)))
Successfully compiled benchmark gx_kernel_5x5; outputs placed in outputs/gx_kernel_5x5!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 1
Number of additions: 12
Number of substitutions: 0
Number of rotations: 109
Number of scalar/plain multiplications: 181
Depth of the circuit: 17
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [12]
==> key : sub , values : [0]
==> key : multiply_plain , values : [181]
==> key : rotate_rows , values : [109]
==> key : multiply , values : [1]
==> key : Depth , values : [17]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [1661.8869445323944]
Compile function : gy_kernel_3x3
1
((((-1 * 0) + (-2 * 0)) + (-1 * 0)) + (((1 * 0) + (2 * gy_kernel_3x3(image):1;0)) + (1 * gy_kernel_3x3(image):1;1)))
2
((((-1 * 0) + (-2 * 0)) + (-1 * 0)) + (((1 * gy_kernel_3x3(image):1;0) + (2 * gy_kernel_3x3(image):1;1)) + (1 * gy_kernel_3x3(image):1;2)))
3
((((-1 * 0) + (-2 * 0)) + (-1 * 0)) + (((1 * gy_kernel_3x3(image):1;1) + (2 * gy_kernel_3x3(image):1;2)) + (1 * 0)))
4
((((-1 * 0) + (-2 * gy_kernel_3x3(image):0;0)) + (-1 * gy_kernel_3x3(image):0;1)) + (((1 * 0) + (2 * gy_kernel_3x3(image):2;0)) + (1 * gy_kernel_3x3(image):2;1)))
5
((((-1 * gy_kernel_3x3(image):0;0) + (-2 * gy_kernel_3x3(image):0;1)) + (-1 * gy_kernel_3x3(image):0;2)) + (((1 * gy_kernel_3x3(image):2;0) + (2 * gy_kernel_3x3(image):2;1)) + (1 * gy_kernel_3x3(image):2;2)))
6
((((-1 * gy_kernel_3x3(image):0;1) + (-2 * gy_kernel_3x3(image):0;2)) + (-1 * 0)) + (((1 * gy_kernel_3x3(image):2;1) + (2 * gy_kernel_3x3(image):2;2)) + (1 * 0)))
7
((((-1 * 0) + (-2 * gy_kernel_3x3(image):1;0)) + (-1 * gy_kernel_3x3(image):1;1)) + (((1 * 0) + (2 * 0)) + (1 * 0)))
8
((((-1 * gy_kernel_3x3(image):1;0) + (-2 * gy_kernel_3x3(image):1;1)) + (-1 * gy_kernel_3x3(image):1;2)) + (((1 * 0) + (2 * 0)) + (1 * 0)))
9
((((-1 * gy_kernel_3x3(image):1;1) + (-2 * gy_kernel_3x3(image):1;2)) + (-1 * 0)) + (((1 * 0) + (2 * 0)) + (1 * 0)))
Successfully compiled benchmark gy_kernel_3x3; outputs placed in outputs/gy_kernel_3x3!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 1
Number of additions: 11
Number of substitutions: 0
Number of rotations: 28
Number of scalar/plain multiplications: 53
Depth of the circuit: 17
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [11]
==> key : sub , values : [0]
==> key : multiply_plain , values : [53]
==> key : rotate_rows , values : [28]
==> key : multiply , values : [1]
==> key : Depth , values : [17]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [584.3285136222839]
Compile function : gy_kernel_5x5
1
((((-1 * 0) + (-2 * 0)) + (-1 * 0)) + (((1 * 0) + (2 * gy_kernel_5x5(image):1;0)) + (1 * gy_kernel_5x5(image):1;1)))
2
((((-1 * 0) + (-2 * 0)) + (-1 * 0)) + (((1 * gy_kernel_5x5(image):1;0) + (2 * gy_kernel_5x5(image):1;1)) + (1 * gy_kernel_5x5(image):1;2)))
3
((((-1 * 0) + (-2 * 0)) + (-1 * 0)) + (((1 * gy_kernel_5x5(image):1;1) + (2 * gy_kernel_5x5(image):1;2)) + (1 * gy_kernel_5x5(image):1;3)))
4
((((-1 * 0) + (-2 * 0)) + (-1 * 0)) + (((1 * gy_kernel_5x5(image):1;2) + (2 * gy_kernel_5x5(image):1;3)) + (1 * gy_kernel_5x5(image):1;4)))
5
((((-1 * 0) + (-2 * 0)) + (-1 * 0)) + (((1 * gy_kernel_5x5(image):1;3) + (2 * gy_kernel_5x5(image):1;4)) + (1 * 0)))
6
((((-1 * 0) + (-2 * gy_kernel_5x5(image):0;0)) + (-1 * gy_kernel_5x5(image):0;1)) + (((1 * 0) + (2 * gy_kernel_5x5(image):2;0)) + (1 * gy_kernel_5x5(image):2;1)))
7
((((-1 * gy_kernel_5x5(image):0;0) + (-2 * gy_kernel_5x5(image):0;1)) + (-1 * gy_kernel_5x5(image):0;2)) + (((1 * gy_kernel_5x5(image):2;0) + (2 * gy_kernel_5x5(image):2;1)) + (1 * gy_kernel_5x5(image):2;2)))
8
((((-1 * gy_kernel_5x5(image):0;1) + (-2 * gy_kernel_5x5(image):0;2)) + (-1 * gy_kernel_5x5(image):0;3)) + (((1 * gy_kernel_5x5(image):2;1) + (2 * gy_kernel_5x5(image):2;2)) + (1 * gy_kernel_5x5(image):2;3)))
9
((((-1 * gy_kernel_5x5(image):0;2) + (-2 * gy_kernel_5x5(image):0;3)) + (-1 * gy_kernel_5x5(image):0;4)) + (((1 * gy_kernel_5x5(image):2;2) + (2 * gy_kernel_5x5(image):2;3)) + (1 * gy_kernel_5x5(image):2;4)))
10
((((-1 * gy_kernel_5x5(image):0;3) + (-2 * gy_kernel_5x5(image):0;4)) + (-1 * 0)) + (((1 * gy_kernel_5x5(image):2;3) + (2 * gy_kernel_5x5(image):2;4)) + (1 * 0)))
11
((((-1 * 0) + (-2 * gy_kernel_5x5(image):1;0)) + (-1 * gy_kernel_5x5(image):1;1)) + (((1 * 0) + (2 * gy_kernel_5x5(image):3;0)) + (1 * gy_kernel_5x5(image):3;1)))
12
((((-1 * gy_kernel_5x5(image):1;0) + (-2 * gy_kernel_5x5(image):1;1)) + (-1 * gy_kernel_5x5(image):1;2)) + (((1 * gy_kernel_5x5(image):3;0) + (2 * gy_kernel_5x5(image):3;1)) + (1 * gy_kernel_5x5(image):3;2)))
13
((((-1 * gy_kernel_5x5(image):1;1) + (-2 * gy_kernel_5x5(image):1;2)) + (-1 * gy_kernel_5x5(image):1;3)) + (((1 * gy_kernel_5x5(image):3;1) + (2 * gy_kernel_5x5(image):3;2)) + (1 * gy_kernel_5x5(image):3;3)))
14
((((-1 * gy_kernel_5x5(image):1;2) + (-2 * gy_kernel_5x5(image):1;3)) + (-1 * gy_kernel_5x5(image):1;4)) + (((1 * gy_kernel_5x5(image):3;2) + (2 * gy_kernel_5x5(image):3;3)) + (1 * gy_kernel_5x5(image):3;4)))
15
((((-1 * gy_kernel_5x5(image):1;3) + (-2 * gy_kernel_5x5(image):1;4)) + (-1 * 0)) + (((1 * gy_kernel_5x5(image):3;3) + (2 * gy_kernel_5x5(image):3;4)) + (1 * 0)))
16
((((-1 * 0) + (-2 * gy_kernel_5x5(image):2;0)) + (-1 * gy_kernel_5x5(image):2;1)) + (((1 * 0) + (2 * gy_kernel_5x5(image):4;0)) + (1 * gy_kernel_5x5(image):4;1)))
17
((((-1 * gy_kernel_5x5(image):2;0) + (-2 * gy_kernel_5x5(image):2;1)) + (-1 * gy_kernel_5x5(image):2;2)) + (((1 * gy_kernel_5x5(image):4;0) + (2 * gy_kernel_5x5(image):4;1)) + (1 * gy_kernel_5x5(image):4;2)))
18
((((-1 * gy_kernel_5x5(image):2;1) + (-2 * gy_kernel_5x5(image):2;2)) + (-1 * gy_kernel_5x5(image):2;3)) + (((1 * gy_kernel_5x5(image):4;1) + (2 * gy_kernel_5x5(image):4;2)) + (1 * gy_kernel_5x5(image):4;3)))
19
((((-1 * gy_kernel_5x5(image):2;2) + (-2 * gy_kernel_5x5(image):2;3)) + (-1 * gy_kernel_5x5(image):2;4)) + (((1 * gy_kernel_5x5(image):4;2) + (2 * gy_kernel_5x5(image):4;3)) + (1 * gy_kernel_5x5(image):4;4)))
20
((((-1 * gy_kernel_5x5(image):2;3) + (-2 * gy_kernel_5x5(image):2;4)) + (-1 * 0)) + (((1 * gy_kernel_5x5(image):4;3) + (2 * gy_kernel_5x5(image):4;4)) + (1 * 0)))
21
((((-1 * 0) + (-2 * gy_kernel_5x5(image):3;0)) + (-1 * gy_kernel_5x5(image):3;1)) + (((1 * 0) + (2 * 0)) + (1 * 0)))
22
((((-1 * gy_kernel_5x5(image):3;0) + (-2 * gy_kernel_5x5(image):3;1)) + (-1 * gy_kernel_5x5(image):3;2)) + (((1 * 0) + (2 * 0)) + (1 * 0)))
23
((((-1 * gy_kernel_5x5(image):3;1) + (-2 * gy_kernel_5x5(image):3;2)) + (-1 * gy_kernel_5x5(image):3;3)) + (((1 * 0) + (2 * 0)) + (1 * 0)))
24
((((-1 * gy_kernel_5x5(image):3;2) + (-2 * gy_kernel_5x5(image):3;3)) + (-1 * gy_kernel_5x5(image):3;4)) + (((1 * 0) + (2 * 0)) + (1 * 0)))
25
((((-1 * gy_kernel_5x5(image):3;3) + (-2 * gy_kernel_5x5(image):3;4)) + (-1 * 0)) + (((1 * 0) + (2 * 0)) + (1 * 0)))
Successfully compiled benchmark gy_kernel_5x5; outputs placed in outputs/gy_kernel_5x5!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 1
Number of additions: 10
Number of substitutions: 0
Number of rotations: 105
Number of scalar/plain multiplications: 165
Depth of the circuit: 16
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [10]
==> key : sub , values : [0]
==> key : multiply_plain , values : [165]
==> key : rotate_rows , values : [105]
==> key : multiply , values : [1]
==> key : Depth , values : [16]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [1643.6932921409607]
Compile function : roberts_cross_3x3
1
(((roberts_cross_3x3(image):0;0 + roberts_cross_3x3(image):1;1) * (roberts_cross_3x3(image):0;0 + roberts_cross_3x3(image):1;1)) + ((roberts_cross_3x3(image):0;1 + roberts_cross_3x3(image):1;0) * (roberts_cross_3x3(image):0;1 + roberts_cross_3x3(image):1;0)))
2
(((roberts_cross_3x3(image):0;1 + roberts_cross_3x3(image):1;2) * (roberts_cross_3x3(image):0;1 + roberts_cross_3x3(image):1;2)) + ((roberts_cross_3x3(image):0;2 + roberts_cross_3x3(image):1;1) * (roberts_cross_3x3(image):0;2 + roberts_cross_3x3(image):1;1)))
3
(((roberts_cross_3x3(image):0;2 + 0) * (roberts_cross_3x3(image):0;2 + 0)) + ((0 + roberts_cross_3x3(image):1;2) * (0 + roberts_cross_3x3(image):1;2)))
4
(((roberts_cross_3x3(image):1;0 + roberts_cross_3x3(image):2;1) * (roberts_cross_3x3(image):1;0 + roberts_cross_3x3(image):2;1)) + ((roberts_cross_3x3(image):1;1 + roberts_cross_3x3(image):2;0) * (roberts_cross_3x3(image):1;1 + roberts_cross_3x3(image):2;0)))
5
(((roberts_cross_3x3(image):1;1 + roberts_cross_3x3(image):2;2) * (roberts_cross_3x3(image):1;1 + roberts_cross_3x3(image):2;2)) + ((roberts_cross_3x3(image):1;2 + roberts_cross_3x3(image):2;1) * (roberts_cross_3x3(image):1;2 + roberts_cross_3x3(image):2;1)))
6
(((roberts_cross_3x3(image):1;2 + 0) * (roberts_cross_3x3(image):1;2 + 0)) + ((0 + roberts_cross_3x3(image):2;2) * (0 + roberts_cross_3x3(image):2;2)))
7
(((roberts_cross_3x3(image):2;0 + 0) * (roberts_cross_3x3(image):2;0 + 0)) + ((roberts_cross_3x3(image):2;1 + 0) * (roberts_cross_3x3(image):2;1 + 0)))
8
(((roberts_cross_3x3(image):2;1 + 0) * (roberts_cross_3x3(image):2;1 + 0)) + ((roberts_cross_3x3(image):2;2 + 0) * (roberts_cross_3x3(image):2;2 + 0)))
9
(((roberts_cross_3x3(image):2;2 + 0) * (roberts_cross_3x3(image):2;2 + 0)) + ((0 + 0) * (0 + 0)))
Successfully compiled benchmark roberts_cross_3x3; outputs placed in outputs/roberts_cross_3x3!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 3
Number of additions: 10
Number of substitutions: 0
Number of rotations: 9
Number of scalar/plain multiplications: 22
Depth of the circuit: 12
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [10]
==> key : sub , values : [0]
==> key : multiply_plain , values : [22]
==> key : rotate_rows , values : [9]
==> key : multiply , values : [3]
==> key : Depth , values : [12]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [288.99104833602905]
Compile function : roberts_cross_5x5
1
(((roberts_cross_5x5(image):0;0 + roberts_cross_5x5(image):1;1) * (roberts_cross_5x5(image):0;0 + roberts_cross_5x5(image):1;1)) + ((roberts_cross_5x5(image):0;1 + roberts_cross_5x5(image):1;0) * (roberts_cross_5x5(image):0;1 + roberts_cross_5x5(image):1;0)))
2
(((roberts_cross_5x5(image):0;1 + roberts_cross_5x5(image):1;2) * (roberts_cross_5x5(image):0;1 + roberts_cross_5x5(image):1;2)) + ((roberts_cross_5x5(image):0;2 + roberts_cross_5x5(image):1;1) * (roberts_cross_5x5(image):0;2 + roberts_cross_5x5(image):1;1)))
3
(((roberts_cross_5x5(image):0;2 + roberts_cross_5x5(image):1;3) * (roberts_cross_5x5(image):0;2 + roberts_cross_5x5(image):1;3)) + ((roberts_cross_5x5(image):0;3 + roberts_cross_5x5(image):1;2) * (roberts_cross_5x5(image):0;3 + roberts_cross_5x5(image):1;2)))
4
(((roberts_cross_5x5(image):0;3 + roberts_cross_5x5(image):1;4) * (roberts_cross_5x5(image):0;3 + roberts_cross_5x5(image):1;4)) + ((roberts_cross_5x5(image):0;4 + roberts_cross_5x5(image):1;3) * (roberts_cross_5x5(image):0;4 + roberts_cross_5x5(image):1;3)))
5
(((roberts_cross_5x5(image):0;4 + 0) * (roberts_cross_5x5(image):0;4 + 0)) + ((0 + roberts_cross_5x5(image):1;4) * (0 + roberts_cross_5x5(image):1;4)))
6
(((roberts_cross_5x5(image):1;0 + roberts_cross_5x5(image):2;1) * (roberts_cross_5x5(image):1;0 + roberts_cross_5x5(image):2;1)) + ((roberts_cross_5x5(image):1;1 + roberts_cross_5x5(image):2;0) * (roberts_cross_5x5(image):1;1 + roberts_cross_5x5(image):2;0)))
7
(((roberts_cross_5x5(image):1;1 + roberts_cross_5x5(image):2;2) * (roberts_cross_5x5(image):1;1 + roberts_cross_5x5(image):2;2)) + ((roberts_cross_5x5(image):1;2 + roberts_cross_5x5(image):2;1) * (roberts_cross_5x5(image):1;2 + roberts_cross_5x5(image):2;1)))
8
(((roberts_cross_5x5(image):1;2 + roberts_cross_5x5(image):2;3) * (roberts_cross_5x5(image):1;2 + roberts_cross_5x5(image):2;3)) + ((roberts_cross_5x5(image):1;3 + roberts_cross_5x5(image):2;2) * (roberts_cross_5x5(image):1;3 + roberts_cross_5x5(image):2;2)))
9
(((roberts_cross_5x5(image):1;3 + roberts_cross_5x5(image):2;4) * (roberts_cross_5x5(image):1;3 + roberts_cross_5x5(image):2;4)) + ((roberts_cross_5x5(image):1;4 + roberts_cross_5x5(image):2;3) * (roberts_cross_5x5(image):1;4 + roberts_cross_5x5(image):2;3)))
10
(((roberts_cross_5x5(image):1;4 + 0) * (roberts_cross_5x5(image):1;4 + 0)) + ((0 + roberts_cross_5x5(image):2;4) * (0 + roberts_cross_5x5(image):2;4)))
11
(((roberts_cross_5x5(image):2;0 + roberts_cross_5x5(image):3;1) * (roberts_cross_5x5(image):2;0 + roberts_cross_5x5(image):3;1)) + ((roberts_cross_5x5(image):2;1 + roberts_cross_5x5(image):3;0) * (roberts_cross_5x5(image):2;1 + roberts_cross_5x5(image):3;0)))
12
(((roberts_cross_5x5(image):2;1 + roberts_cross_5x5(image):3;2) * (roberts_cross_5x5(image):2;1 + roberts_cross_5x5(image):3;2)) + ((roberts_cross_5x5(image):2;2 + roberts_cross_5x5(image):3;1) * (roberts_cross_5x5(image):2;2 + roberts_cross_5x5(image):3;1)))
13
(((roberts_cross_5x5(image):2;2 + roberts_cross_5x5(image):3;3) * (roberts_cross_5x5(image):2;2 + roberts_cross_5x5(image):3;3)) + ((roberts_cross_5x5(image):2;3 + roberts_cross_5x5(image):3;2) * (roberts_cross_5x5(image):2;3 + roberts_cross_5x5(image):3;2)))
14
(((roberts_cross_5x5(image):2;3 + roberts_cross_5x5(image):3;4) * (roberts_cross_5x5(image):2;3 + roberts_cross_5x5(image):3;4)) + ((roberts_cross_5x5(image):2;4 + roberts_cross_5x5(image):3;3) * (roberts_cross_5x5(image):2;4 + roberts_cross_5x5(image):3;3)))
15
(((roberts_cross_5x5(image):2;4 + 0) * (roberts_cross_5x5(image):2;4 + 0)) + ((0 + roberts_cross_5x5(image):3;4) * (0 + roberts_cross_5x5(image):3;4)))
16
(((roberts_cross_5x5(image):3;0 + roberts_cross_5x5(image):4;1) * (roberts_cross_5x5(image):3;0 + roberts_cross_5x5(image):4;1)) + ((roberts_cross_5x5(image):3;1 + roberts_cross_5x5(image):4;0) * (roberts_cross_5x5(image):3;1 + roberts_cross_5x5(image):4;0)))
17
(((roberts_cross_5x5(image):3;1 + roberts_cross_5x5(image):4;2) * (roberts_cross_5x5(image):3;1 + roberts_cross_5x5(image):4;2)) + ((roberts_cross_5x5(image):3;2 + roberts_cross_5x5(image):4;1) * (roberts_cross_5x5(image):3;2 + roberts_cross_5x5(image):4;1)))
18
(((roberts_cross_5x5(image):3;2 + roberts_cross_5x5(image):4;3) * (roberts_cross_5x5(image):3;2 + roberts_cross_5x5(image):4;3)) + ((roberts_cross_5x5(image):3;3 + roberts_cross_5x5(image):4;2) * (roberts_cross_5x5(image):3;3 + roberts_cross_5x5(image):4;2)))
19
(((roberts_cross_5x5(image):3;3 + roberts_cross_5x5(image):4;4) * (roberts_cross_5x5(image):3;3 + roberts_cross_5x5(image):4;4)) + ((roberts_cross_5x5(image):3;4 + roberts_cross_5x5(image):4;3) * (roberts_cross_5x5(image):3;4 + roberts_cross_5x5(image):4;3)))
20
(((roberts_cross_5x5(image):3;4 + 0) * (roberts_cross_5x5(image):3;4 + 0)) + ((0 + roberts_cross_5x5(image):4;4) * (0 + roberts_cross_5x5(image):4;4)))
21
(((roberts_cross_5x5(image):4;0 + 0) * (roberts_cross_5x5(image):4;0 + 0)) + ((roberts_cross_5x5(image):4;1 + 0) * (roberts_cross_5x5(image):4;1 + 0)))
22
(((roberts_cross_5x5(image):4;1 + 0) * (roberts_cross_5x5(image):4;1 + 0)) + ((roberts_cross_5x5(image):4;2 + 0) * (roberts_cross_5x5(image):4;2 + 0)))
23
(((roberts_cross_5x5(image):4;2 + 0) * (roberts_cross_5x5(image):4;2 + 0)) + ((roberts_cross_5x5(image):4;3 + 0) * (roberts_cross_5x5(image):4;3 + 0)))
24
(((roberts_cross_5x5(image):4;3 + 0) * (roberts_cross_5x5(image):4;3 + 0)) + ((roberts_cross_5x5(image):4;4 + 0) * (roberts_cross_5x5(image):4;4 + 0)))
25
(((roberts_cross_5x5(image):4;4 + 0) * (roberts_cross_5x5(image):4;4 + 0)) + ((0 + 0) * (0 + 0)))
Successfully compiled benchmark roberts_cross_5x5; outputs placed in outputs/roberts_cross_5x5!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 2
Number of additions: 8
Number of substitutions: 0
Number of rotations: 43
Number of scalar/plain multiplications: 79
Depth of the circuit: 12
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [8]
==> key : sub , values : [0]
==> key : multiply_plain , values : [79]
==> key : rotate_rows , values : [43]
==> key : multiply , values : [2]
==> key : Depth , values : [12]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [839.9998400211334]
Compile function : matmul_3x3_fully
1
((matmul_3x3_fully(a):0;0 * matmul_3x3_fully(b):0;0) + ((matmul_3x3_fully(a):0;1 * matmul_3x3_fully(b):1;0) + (matmul_3x3_fully(a):0;2 * matmul_3x3_fully(b):2;0)))
2
((matmul_3x3_fully(a):0;0 * matmul_3x3_fully(b):0;1) + ((matmul_3x3_fully(a):0;1 * matmul_3x3_fully(b):1;1) + (matmul_3x3_fully(a):0;2 * matmul_3x3_fully(b):2;1)))
3
((matmul_3x3_fully(a):0;0 * matmul_3x3_fully(b):0;2) + ((matmul_3x3_fully(a):0;1 * matmul_3x3_fully(b):1;2) + (matmul_3x3_fully(a):0;2 * matmul_3x3_fully(b):2;2)))
4
((matmul_3x3_fully(a):1;0 * matmul_3x3_fully(b):0;0) + ((matmul_3x3_fully(a):1;1 * matmul_3x3_fully(b):1;0) + (matmul_3x3_fully(a):1;2 * matmul_3x3_fully(b):2;0)))
5
((matmul_3x3_fully(a):1;0 * matmul_3x3_fully(b):0;1) + ((matmul_3x3_fully(a):1;1 * matmul_3x3_fully(b):1;1) + (matmul_3x3_fully(a):1;2 * matmul_3x3_fully(b):2;1)))
6
((matmul_3x3_fully(a):1;0 * matmul_3x3_fully(b):0;2) + ((matmul_3x3_fully(a):1;1 * matmul_3x3_fully(b):1;2) + (matmul_3x3_fully(a):1;2 * matmul_3x3_fully(b):2;2)))
7
((matmul_3x3_fully(a):2;0 * matmul_3x3_fully(b):0;0) + ((matmul_3x3_fully(a):2;1 * matmul_3x3_fully(b):1;0) + (matmul_3x3_fully(a):2;2 * matmul_3x3_fully(b):2;0)))
8
((matmul_3x3_fully(a):2;0 * matmul_3x3_fully(b):0;1) + ((matmul_3x3_fully(a):2;1 * matmul_3x3_fully(b):1;1) + (matmul_3x3_fully(a):2;2 * matmul_3x3_fully(b):2;1)))
9
((matmul_3x3_fully(a):2;0 * matmul_3x3_fully(b):0;2) + ((matmul_3x3_fully(a):2;1 * matmul_3x3_fully(b):1;2) + (matmul_3x3_fully(a):2;2 * matmul_3x3_fully(b):2;2)))
Successfully compiled benchmark matmul_3x3_fully; outputs placed in outputs/matmul_3x3_fully!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 2
Number of additions: 5
Number of substitutions: 0
Number of rotations: 9
Number of scalar/plain multiplications: 14
Depth of the circuit: 9
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [5]
==> key : sub , values : [0]
==> key : multiply_plain , values : [14]
==> key : rotate_rows , values : [9]
==> key : multiply , values : [2]
==> key : Depth , values : [9]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [447.68520188331604]
Compile function : matmul_5x5_fully
1
(((matmul_5x5_fully(a):0;0 * matmul_5x5_fully(b):0;0) + (matmul_5x5_fully(a):0;1 * matmul_5x5_fully(b):1;0)) + ((matmul_5x5_fully(a):0;2 * matmul_5x5_fully(b):2;0) + ((matmul_5x5_fully(a):0;3 * matmul_5x5_fully(b):3;0) + (matmul_5x5_fully(a):0;4 * matmul_5x5_fully(b):4;0))))
2
(((matmul_5x5_fully(a):0;0 * matmul_5x5_fully(b):0;1) + (matmul_5x5_fully(a):0;1 * matmul_5x5_fully(b):1;1)) + ((matmul_5x5_fully(a):0;2 * matmul_5x5_fully(b):2;1) + ((matmul_5x5_fully(a):0;3 * matmul_5x5_fully(b):3;1) + (matmul_5x5_fully(a):0;4 * matmul_5x5_fully(b):4;1))))
3
(((matmul_5x5_fully(a):0;0 * matmul_5x5_fully(b):0;2) + (matmul_5x5_fully(a):0;1 * matmul_5x5_fully(b):1;2)) + ((matmul_5x5_fully(a):0;2 * matmul_5x5_fully(b):2;2) + ((matmul_5x5_fully(a):0;3 * matmul_5x5_fully(b):3;2) + (matmul_5x5_fully(a):0;4 * matmul_5x5_fully(b):4;2))))
4
(((matmul_5x5_fully(a):0;0 * matmul_5x5_fully(b):0;3) + (matmul_5x5_fully(a):0;1 * matmul_5x5_fully(b):1;3)) + ((matmul_5x5_fully(a):0;2 * matmul_5x5_fully(b):2;3) + ((matmul_5x5_fully(a):0;3 * matmul_5x5_fully(b):3;3) + (matmul_5x5_fully(a):0;4 * matmul_5x5_fully(b):4;3))))
5
(((matmul_5x5_fully(a):0;0 * matmul_5x5_fully(b):0;4) + (matmul_5x5_fully(a):0;1 * matmul_5x5_fully(b):1;4)) + ((matmul_5x5_fully(a):0;2 * matmul_5x5_fully(b):2;4) + ((matmul_5x5_fully(a):0;3 * matmul_5x5_fully(b):3;4) + (matmul_5x5_fully(a):0;4 * matmul_5x5_fully(b):4;4))))
6
(((matmul_5x5_fully(a):1;0 * matmul_5x5_fully(b):0;0) + (matmul_5x5_fully(a):1;1 * matmul_5x5_fully(b):1;0)) + ((matmul_5x5_fully(a):1;2 * matmul_5x5_fully(b):2;0) + ((matmul_5x5_fully(a):1;3 * matmul_5x5_fully(b):3;0) + (matmul_5x5_fully(a):1;4 * matmul_5x5_fully(b):4;0))))
7
(((matmul_5x5_fully(a):1;0 * matmul_5x5_fully(b):0;1) + (matmul_5x5_fully(a):1;1 * matmul_5x5_fully(b):1;1)) + ((matmul_5x5_fully(a):1;2 * matmul_5x5_fully(b):2;1) + ((matmul_5x5_fully(a):1;3 * matmul_5x5_fully(b):3;1) + (matmul_5x5_fully(a):1;4 * matmul_5x5_fully(b):4;1))))
8
(((matmul_5x5_fully(a):1;0 * matmul_5x5_fully(b):0;2) + (matmul_5x5_fully(a):1;1 * matmul_5x5_fully(b):1;2)) + ((matmul_5x5_fully(a):1;2 * matmul_5x5_fully(b):2;2) + ((matmul_5x5_fully(a):1;3 * matmul_5x5_fully(b):3;2) + (matmul_5x5_fully(a):1;4 * matmul_5x5_fully(b):4;2))))
9
(((matmul_5x5_fully(a):1;0 * matmul_5x5_fully(b):0;3) + (matmul_5x5_fully(a):1;1 * matmul_5x5_fully(b):1;3)) + ((matmul_5x5_fully(a):1;2 * matmul_5x5_fully(b):2;3) + ((matmul_5x5_fully(a):1;3 * matmul_5x5_fully(b):3;3) + (matmul_5x5_fully(a):1;4 * matmul_5x5_fully(b):4;3))))
10
(((matmul_5x5_fully(a):1;0 * matmul_5x5_fully(b):0;4) + (matmul_5x5_fully(a):1;1 * matmul_5x5_fully(b):1;4)) + ((matmul_5x5_fully(a):1;2 * matmul_5x5_fully(b):2;4) + ((matmul_5x5_fully(a):1;3 * matmul_5x5_fully(b):3;4) + (matmul_5x5_fully(a):1;4 * matmul_5x5_fully(b):4;4))))
11
(((matmul_5x5_fully(a):2;0 * matmul_5x5_fully(b):0;0) + (matmul_5x5_fully(a):2;1 * matmul_5x5_fully(b):1;0)) + ((matmul_5x5_fully(a):2;2 * matmul_5x5_fully(b):2;0) + ((matmul_5x5_fully(a):2;3 * matmul_5x5_fully(b):3;0) + (matmul_5x5_fully(a):2;4 * matmul_5x5_fully(b):4;0))))
12
(((matmul_5x5_fully(a):2;0 * matmul_5x5_fully(b):0;1) + (matmul_5x5_fully(a):2;1 * matmul_5x5_fully(b):1;1)) + ((matmul_5x5_fully(a):2;2 * matmul_5x5_fully(b):2;1) + ((matmul_5x5_fully(a):2;3 * matmul_5x5_fully(b):3;1) + (matmul_5x5_fully(a):2;4 * matmul_5x5_fully(b):4;1))))
13
(((matmul_5x5_fully(a):2;0 * matmul_5x5_fully(b):0;2) + (matmul_5x5_fully(a):2;1 * matmul_5x5_fully(b):1;2)) + ((matmul_5x5_fully(a):2;2 * matmul_5x5_fully(b):2;2) + ((matmul_5x5_fully(a):2;3 * matmul_5x5_fully(b):3;2) + (matmul_5x5_fully(a):2;4 * matmul_5x5_fully(b):4;2))))
14
(((matmul_5x5_fully(a):2;0 * matmul_5x5_fully(b):0;3) + (matmul_5x5_fully(a):2;1 * matmul_5x5_fully(b):1;3)) + ((matmul_5x5_fully(a):2;2 * matmul_5x5_fully(b):2;3) + ((matmul_5x5_fully(a):2;3 * matmul_5x5_fully(b):3;3) + (matmul_5x5_fully(a):2;4 * matmul_5x5_fully(b):4;3))))
15
(((matmul_5x5_fully(a):2;0 * matmul_5x5_fully(b):0;4) + (matmul_5x5_fully(a):2;1 * matmul_5x5_fully(b):1;4)) + ((matmul_5x5_fully(a):2;2 * matmul_5x5_fully(b):2;4) + ((matmul_5x5_fully(a):2;3 * matmul_5x5_fully(b):3;4) + (matmul_5x5_fully(a):2;4 * matmul_5x5_fully(b):4;4))))
16
(((matmul_5x5_fully(a):3;0 * matmul_5x5_fully(b):0;0) + (matmul_5x5_fully(a):3;1 * matmul_5x5_fully(b):1;0)) + ((matmul_5x5_fully(a):3;2 * matmul_5x5_fully(b):2;0) + ((matmul_5x5_fully(a):3;3 * matmul_5x5_fully(b):3;0) + (matmul_5x5_fully(a):3;4 * matmul_5x5_fully(b):4;0))))
17
(((matmul_5x5_fully(a):3;0 * matmul_5x5_fully(b):0;1) + (matmul_5x5_fully(a):3;1 * matmul_5x5_fully(b):1;1)) + ((matmul_5x5_fully(a):3;2 * matmul_5x5_fully(b):2;1) + ((matmul_5x5_fully(a):3;3 * matmul_5x5_fully(b):3;1) + (matmul_5x5_fully(a):3;4 * matmul_5x5_fully(b):4;1))))
18
(((matmul_5x5_fully(a):3;0 * matmul_5x5_fully(b):0;2) + (matmul_5x5_fully(a):3;1 * matmul_5x5_fully(b):1;2)) + ((matmul_5x5_fully(a):3;2 * matmul_5x5_fully(b):2;2) + ((matmul_5x5_fully(a):3;3 * matmul_5x5_fully(b):3;2) + (matmul_5x5_fully(a):3;4 * matmul_5x5_fully(b):4;2))))
19
(((matmul_5x5_fully(a):3;0 * matmul_5x5_fully(b):0;3) + (matmul_5x5_fully(a):3;1 * matmul_5x5_fully(b):1;3)) + ((matmul_5x5_fully(a):3;2 * matmul_5x5_fully(b):2;3) + ((matmul_5x5_fully(a):3;3 * matmul_5x5_fully(b):3;3) + (matmul_5x5_fully(a):3;4 * matmul_5x5_fully(b):4;3))))
20
(((matmul_5x5_fully(a):3;0 * matmul_5x5_fully(b):0;4) + (matmul_5x5_fully(a):3;1 * matmul_5x5_fully(b):1;4)) + ((matmul_5x5_fully(a):3;2 * matmul_5x5_fully(b):2;4) + ((matmul_5x5_fully(a):3;3 * matmul_5x5_fully(b):3;4) + (matmul_5x5_fully(a):3;4 * matmul_5x5_fully(b):4;4))))
21
(((matmul_5x5_fully(a):4;0 * matmul_5x5_fully(b):0;0) + (matmul_5x5_fully(a):4;1 * matmul_5x5_fully(b):1;0)) + ((matmul_5x5_fully(a):4;2 * matmul_5x5_fully(b):2;0) + ((matmul_5x5_fully(a):4;3 * matmul_5x5_fully(b):3;0) + (matmul_5x5_fully(a):4;4 * matmul_5x5_fully(b):4;0))))
22
(((matmul_5x5_fully(a):4;0 * matmul_5x5_fully(b):0;1) + (matmul_5x5_fully(a):4;1 * matmul_5x5_fully(b):1;1)) + ((matmul_5x5_fully(a):4;2 * matmul_5x5_fully(b):2;1) + ((matmul_5x5_fully(a):4;3 * matmul_5x5_fully(b):3;1) + (matmul_5x5_fully(a):4;4 * matmul_5x5_fully(b):4;1))))
23
(((matmul_5x5_fully(a):4;0 * matmul_5x5_fully(b):0;2) + (matmul_5x5_fully(a):4;1 * matmul_5x5_fully(b):1;2)) + ((matmul_5x5_fully(a):4;2 * matmul_5x5_fully(b):2;2) + ((matmul_5x5_fully(a):4;3 * matmul_5x5_fully(b):3;2) + (matmul_5x5_fully(a):4;4 * matmul_5x5_fully(b):4;2))))
24
(((matmul_5x5_fully(a):4;0 * matmul_5x5_fully(b):0;3) + (matmul_5x5_fully(a):4;1 * matmul_5x5_fully(b):1;3)) + ((matmul_5x5_fully(a):4;2 * matmul_5x5_fully(b):2;3) + ((matmul_5x5_fully(a):4;3 * matmul_5x5_fully(b):3;3) + (matmul_5x5_fully(a):4;4 * matmul_5x5_fully(b):4;3))))
25
(((matmul_5x5_fully(a):4;0 * matmul_5x5_fully(b):0;4) + (matmul_5x5_fully(a):4;1 * matmul_5x5_fully(b):1;4)) + ((matmul_5x5_fully(a):4;2 * matmul_5x5_fully(b):2;4) + ((matmul_5x5_fully(a):4;3 * matmul_5x5_fully(b):3;4) + (matmul_5x5_fully(a):4;4 * matmul_5x5_fully(b):4;4))))
Successfully compiled benchmark matmul_5x5_fully; outputs placed in outputs/matmul_5x5_fully!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 2
Number of additions: 15
Number of substitutions: 0
Number of rotations: 67
Number of scalar/plain multiplications: 85
Depth of the circuit: 16
Multiplicative depth of the circuit: 1
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [15]
==> key : sub , values : [0]
==> key : multiply_plain , values : [85]
==> key : rotate_rows , values : [67]
==> key : multiply , values : [2]
==> key : Depth , values : [16]
==> key : Multiplicative Depth , values : [1]
==> key : compile_time (s) , values : [2112.7374827861786]
Compile function : sort_4_packed_fully
1
((sort_4_packed_fully(cs):0 * ((sort_4_packed_fully(cs):2 * ((sort_4_packed_fully(cs):3 * ((sort_4_packed_fully(cs):1 * ((sort_4_packed_fully(cs):4 * ((sort_4_packed_fully(cs):5 * sort_4_packed_fully(os):0) + ((1 + sort_4_packed_fully(cs):5) * sort_4_packed_fully(os):1))) + ((1 + sort_4_packed_fully(cs):4) * ((sort_4_packed_fully(cs):1 * sort_4_packed_fully(os):4) + ((1 + sort_4_packed_fully(cs):1) * sort_4_packed_fully(os):18))))) + ((1 + sort_4_packed_fully(cs):1) * sort_4_packed_fully(os):0))) + ((1 + sort_4_packed_fully(cs):3) * ((sort_4_packed_fully(cs):1 * ((sort_4_packed_fully(cs):5 * ((sort_4_packed_fully(cs):4 * sort_4_packed_fully(os):2) + ((1 + sort_4_packed_fully(cs):4) * sort_4_packed_fully(os):3))) + ((1 + sort_4_packed_fully(cs):5) * ((sort_4_packed_fully(cs):1 * sort_4_packed_fully(os):5) + ((1 + sort_4_packed_fully(cs):1) * sort_4_packed_fully(os):19))))) + ((1 + sort_4_packed_fully(cs):1) * sort_4_packed_fully(os):2))))) + ((1 + sort_4_packed_fully(cs):2) * ((sort_4_packed_fully(cs):5 * ((sort_4_packed_fully(cs):1 * ((sort_4_packed_fully(cs):4 * sort_4_packed_fully(os):12) + ((1 + sort_4_packed_fully(cs):4) * sort_4_packed_fully(os):13))) + ((1 + sort_4_packed_fully(cs):1) * ((sort_4_packed_fully(cs):5 * sort_4_packed_fully(os):16) + ((1 + sort_4_packed_fully(cs):5) * sort_4_packed_fully(os):22))))) + ((1 + sort_4_packed_fully(cs):5) * sort_4_packed_fully(os):12))))) + ((1 + sort_4_packed_fully(cs):0) * ((sort_4_packed_fully(cs):3 * ((sort_4_packed_fully(cs):2 * ((sort_4_packed_fully(cs):4 * ((sort_4_packed_fully(cs):1 * ((sort_4_packed_fully(cs):5 * sort_4_packed_fully(os):6) + ((1 + sort_4_packed_fully(cs):5) * sort_4_packed_fully(os):7))) + ((1 + sort_4_packed_fully(cs):1) * ((sort_4_packed_fully(cs):4 * sort_4_packed_fully(os):10) + ((1 + sort_4_packed_fully(cs):4) * sort_4_packed_fully(os):20))))) + ((1 + sort_4_packed_fully(cs):4) * sort_4_packed_fully(os):6))) + ((1 + sort_4_packed_fully(cs):2) * ((sort_4_packed_fully(cs):4 * ((sort_4_packed_fully(cs):5 * ((sort_4_packed_fully(cs):1 * sort_4_packed_fully(os):8) + ((1 + sort_4_packed_fully(cs):1) * sort_4_packed_fully(os):9))) + ((1 + sort_4_packed_fully(cs):5) * ((sort_4_packed_fully(cs):4 * sort_4_packed_fully(os):11) + ((1 + sort_4_packed_fully(cs):4) * sort_4_packed_fully(os):21))))) + ((1 + sort_4_packed_fully(cs):4) * sort_4_packed_fully(os):8))))) + ((1 + sort_4_packed_fully(cs):3) * ((sort_4_packed_fully(cs):5 * ((sort_4_packed_fully(cs):4 * ((sort_4_packed_fully(cs):1 * sort_4_packed_fully(os):14) + ((1 + sort_4_packed_fully(cs):1) * sort_4_packed_fully(os):15))) + ((1 + sort_4_packed_fully(cs):4) * ((sort_4_packed_fully(cs):5 * sort_4_packed_fully(os):17) + ((1 + sort_4_packed_fully(cs):5) * sort_4_packed_fully(os):23))))) + ((1 + sort_4_packed_fully(cs):5) * sort_4_packed_fully(os):14))))))
Successfully compiled benchmark sort_4_packed_fully; outputs placed in outputs/sort_4_packed_fully!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 10
Number of additions: 29
Number of substitutions: 0
Number of rotations: 56
Number of scalar/plain multiplications: 80
Depth of the circuit: 46
Multiplicative depth of the circuit: 7
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [29]
==> key : sub , values : [0]
==> key : multiply_plain , values : [80]
==> key : rotate_rows , values : [56]
==> key : multiply , values : [10]
==> key : Depth , values : [46]
==> key : Multiplicative Depth , values : [7]
==> key : compile_time (s) , values : [941.5440499782562]
Compile function : max_3_packed_fully
1
((max_3_packed_fully(cs):0 * ((max_3_packed_fully(cs):1 * max_3_packed_fully(os):0) + ((1 + max_3_packed_fully(cs):1) * max_3_packed_fully(os):2))) + ((1 + max_3_packed_fully(cs):0) * ((max_3_packed_fully(cs):2 * max_3_packed_fully(os):1) + ((1 + max_3_packed_fully(cs):2) * max_3_packed_fully(os):2))))
Successfully compiled benchmark max_3_packed_fully; outputs placed in outputs/max_3_packed_fully!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 4
Number of additions: 4
Number of substitutions: 0
Number of rotations: 3
Number of scalar/plain multiplications: 0
Depth of the circuit: 7
Multiplicative depth of the circuit: 2
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [4]
==> key : sub , values : [0]
==> key : multiply_plain , values : [0]
==> key : rotate_rows , values : [3]
==> key : multiply , values : [4]
==> key : Depth , values : [7]
==> key : Multiplicative Depth , values : [2]
==> key : compile_time (s) , values : [132.19544339179993]
Compile function : max_4_packed_fully
1
((max_4_packed_fully(cs):0 * ((max_4_packed_fully(cs):1 * ((max_4_packed_fully(cs):2 * max_4_packed_fully(os):0) + ((1 + max_4_packed_fully(cs):2) * max_4_packed_fully(os):3))) + ((1 + max_4_packed_fully(cs):1) * ((max_4_packed_fully(cs):4 * max_4_packed_fully(os):2) + ((1 + max_4_packed_fully(cs):4) * max_4_packed_fully(os):3))))) + ((1 + max_4_packed_fully(cs):0) * ((max_4_packed_fully(cs):3 * ((max_4_packed_fully(cs):5 * max_4_packed_fully(os):1) + ((1 + max_4_packed_fully(cs):5) * max_4_packed_fully(os):3))) + ((1 + max_4_packed_fully(cs):3) * ((max_4_packed_fully(cs):4 * max_4_packed_fully(os):2) + ((1 + max_4_packed_fully(cs):4) * max_4_packed_fully(os):3))))))
Successfully compiled benchmark max_4_packed_fully; outputs placed in outputs/max_4_packed_fully!
compile to bfv the benchmark :

==> Results of evaluating Vectorized code :
Number of multiplications: 6
Number of additions: 17
Number of substitutions: 0
Number of rotations: 7
Number of scalar/plain multiplications: 24
Depth of the circuit: 22
Multiplicative depth of the circuit: 3
['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
==> key : add , values : [17]
==> key : sub , values : [0]
==> key : multiply_plain , values : [24]
==> key : rotate_rows , values : [7]
==> key : multiply , values : [6]
==> key : Depth , values : [22]
==> key : Multiplicative Depth , values : [3]
==> key : compile_time (s) , values : [231.1811294555664]
Benchmark tree_100-100_10_2...
==> Results of evaluating Vectorized code :
Number of multiplications: 11
Number of additions: 15
Number of substitutions: 0
Number of rotations: 334
Number of scalar/plain multiplications: 373
Depth of the circuit: 36
Multiplicative depth of the circuit: 11
keys : ['add', 'sub', 'multiply_plain', 'rotate_rows', 'multiply', 'Depth', 'Multiplicative Depth', 'compile_time (s)']
||| Final ====> dot_product_3x3_fully,dot_product_5x5_fully,dot_product_25x25_fully,l2_distance_3,l2_distance_5,l2_distance_25,l2_distance_32,poly_reg_3,poly_reg_5,poly_reg_25,poly_reg_32,linear_reg_3,linear_reg_5,linear_reg_25,linear_reg_32,hamming_distance_3,hamming_distance_5,hamming_distance_25,hamming_distance_32,box_blur_3x3,box_blur_5x5,gx_kernel_3x3,gx_kernel_5x5,gy_kernel_3x3,gy_kernel_5x5,roberts_cross_3x3,roberts_cross_5x5,matmul_3x3_fully,matmul_5x5_fully,sort_4_packed_fully,max_3_packed_fully,max_4_packed_fully,tree_100-100_10_2 

benchmark : dot_product_5x5_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '38', '431', '469', '302']]
benchmark : matmul_4x4_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '51', '3701', '3752', '275']]
benchmark : linear_reg_25 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '88', '3504', '3592', '246']]
benchmark : box_blur_4x4 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '69', '6665', '6734', '122']]
benchmark : tree_100-50_5_2 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '115', '1327', '1442', '164']]
benchmark : gy_kernel_4x4 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '207', '4332', '4539', '172']]
benchmark : gx_kernel_3x3 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '94', '3367', '3461', '219']]
benchmark : dot_product_3x3_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '38', '297', '335', '328']]
benchmark : dot_product_8x8_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '38', '484', '522', '276']]
benchmark : box_blur_8x8 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '201', '51876', '52077', '111']]
benchmark : max_5_packed_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '87', '4108', '4195', '48']]
benchmark : l2_distance_25 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '59', '6020', '6079', '141']]
benchmark : hamming_distance_8 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '56', '451', '507', '296']]
benchmark : poly_reg_3 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '94', '802', '896', '219']]
benchmark : matmul_8x8_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '133', '47418', '47551', '244']]
benchmark : poly_reg_8 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '106', '2312', '2418', '164']]
benchmark : sort_4_packed_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', 'ErrorV', 'ErrorV', 'ErrorV', '0']]
benchmark : l2_distance_8 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '42', '1074', '1116', '247']]
benchmark : gx_kernel_5x5 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '116', '13712', '13828', '215']]
benchmark : tree_100-50_10_2 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', 'ErrorV', 'ErrorV', 'ErrorV', '0']]
benchmark : poly_reg_4 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '96', '920', '1016', '216']]
benchmark : hamming_distance_25 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '83', '5323', '5406', '213']]
benchmark : tree_100-100_5_1 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '153', '1077', '1230', '158']]
benchmark : linear_reg_32 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '95', '5144', '5239', '245']]
benchmark : tree_50-50_5_1 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '147', '349', '496', '296']]
benchmark : gx_kernel_4x4 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '120', '6101', '6221', '219']]
benchmark : hamming_distance_5 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '58', '349', '407', '296']]
benchmark : poly_reg_25 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '139', '12135', '12274', '160']]
benchmark : poly_reg_32 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '153', '16054', '16207', '159']]
benchmark : l2_distance_4 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '37', '353', '390', '301']]
benchmark : l2_distance_32 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '70', '7867', '7937', '190']]
benchmark : dot_product_25x25_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '44', '2060', '2104', '224']]
benchmark : roberts_cross_4x4 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '71', '2787', '2858', '244']]
benchmark : tree_100-50_5_1 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '152', '1076', '1228', '157']]
benchmark : tree_100-100_5_2 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '77', '1325', '1402', '122']]
benchmark : tree_100-100_10_2 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', 'ErrorV', 'ErrorV', 'ErrorV', '0']]
benchmark : tree_100-100_10_1 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', 'ErrorV', 'ErrorV', 'ErrorV', '0']]
benchmark : hamming_distance_3 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '57', '349', '406', '296']]
benchmark : gy_kernel_5x5 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '111', '12501', '12612', '215']]
benchmark : max_4_packed_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '96', '1602', '1698', '134']]
benchmark : l2_distance_5 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '38', '397', '435', '301']]
benchmark : roberts_cross_5x5 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '81', '5042', '5123', '243']]
benchmark : matmul_3x3_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '43', '1206', '1249', '276']]
benchmark : gy_kernel_8x8 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '204', '45971', '46175', '212']]
benchmark : max_3_packed_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '75', '698', '773', '294']]
benchmark : gy_kernel_3x3 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '75', '3453', '3528', '220']]
benchmark : matmul_5x5_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '65', '8064', '8129', '224']]
benchmark : linear_reg_5 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '76', '227', '303', '328']]
benchmark : gx_kernel_8x8 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '216', '44695', '44911', '212']]
benchmark : hamming_distance_32 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '88', '7258', '7346', '213']]
benchmark : roberts_cross_3x3 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '62', '1283', '1345', '273']]
benchmark : poly_reg_5 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '100', '1187', '1287', '192']]
benchmark : box_blur_3x3 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '51', '2108', '2159', '228']]
benchmark : l2_distance_3 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '38', '296', '334', '327']]
benchmark : linear_reg_4 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '74', '223', '297', '328']]
benchmark : hamming_distance_4 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '56', '449', '505', '270']]
benchmark : roberts_cross_8x8 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '127', '16495', '16622', '240']]
benchmark : linear_reg_3 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '74', '228', '302', '328']]
benchmark : tree_50-50_10_1 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '313', '1247', '1560', '126']]
benchmark : tree_100-50_10_1 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', 'ErrorV', 'ErrorV', 'ErrorV', '0']]
benchmark : dot_product_4x4_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '37', '292', '329', '327']]
benchmark : box_blur_5x5 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '93', '13035', '13128', '119']]
benchmark : tree_50-50_5_2 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '130', '349', '479', '296']]
benchmark : linear_reg_8 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '75', '371', '446', '303']]
benchmark : tree_50-50_10_2 infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '315', '1639', '1954', '13']]
benchmark : sort_3_packed_fully infos ===>[['VEC', 'ENC', 'RUN', 'ENC + RUN', 'Remaining_noise_budget'], ['v', '76', '984', '1060', '181']]

===> Obtained runtimes in seconds: {'dot_product_5x5_fully': '0.469', 'matmul_4x4_fully': '3.752', 'linear_reg_25': '3.592', 'box_blur_4x4': '6.734', 'tree_100-50_5_2': '1.442', 'gy_kernel_4x4': '4.539', 'gx_kernel_3x3': '3.461', 'dot_product_3x3_fully': '0.335', 'dot_product_8x8_fully': '0.522', 'box_blur_8x8': '52.077', 'max_5_packed_fully': '4.195', 'l2_distance_25': '6.079', 'hamming_distance_8': '0.507', 'poly_reg_3': '0.896', 'matmul_8x8_fully': '47.551', 'poly_reg_8': '2.418', 'sort_4_packed_fully': 'ErrorV', 'l2_distance_8': '1.116', 'gx_kernel_5x5': '13.828', 'tree_100-50_10_2': 'ErrorV', 'poly_reg_4': '1.016', 'hamming_distance_25': '5.406', 'tree_100-100_5_1': '1.230', 'linear_reg_32': '5.239', 'tree_50-50_5_1': '0.496', 'gx_kernel_4x4': '6.221', 'hamming_distance_5': '0.407', 'poly_reg_25': '12.274', 'poly_reg_32': '16.207', 'l2_distance_4': '0.390', 'l2_distance_32': '7.937', 'dot_product_25x25_fully': '2.104', 'roberts_cross_4x4': '2.858', 'tree_100-50_5_1': '1.228', 'tree_100-100_5_2': '1.402', 'tree_100-100_10_2': 'ErrorV', 'tree_100-100_10_1': 'ErrorV', 'hamming_distance_3': '0.406', 'gy_kernel_5x5': '12.612', 'max_4_packed_fully': '1.698', 'l2_distance_5': '0.435', 'roberts_cross_5x5': '5.123', 'matmul_3x3_fully': '1.249', 'gy_kernel_8x8': '46.175', 'max_3_packed_fully': '0.773', 'gy_kernel_3x3': '3.528', 'matmul_5x5_fully': '8.129', 'linear_reg_5': '0.303', 'gx_kernel_8x8': '44.911', 'hamming_distance_32': '7.346', 'roberts_cross_3x3': '1.345', 'poly_reg_5': '1.287', 'box_blur_3x3': '2.159', 'l2_distance_3': '0.334', 'linear_reg_4': '0.297', 'hamming_distance_4': '0.505', 'roberts_cross_8x8': '16.622', 'linear_reg_3': '0.302', 'tree_50-50_10_1': '1.560', 'tree_100-50_10_1': 'ErrorV', 'dot_product_4x4_fully': '0.329', 'box_blur_5x5': '13.128', 'tree_50-50_5_2': '0.479', 'linear_reg_8': '0.446', 'tree_50-50_10_2': '1.954', 'sort_3_packed_fully': '1.060'}


===> Obtained remaining noise budgets: {'dot_product_5x5_fully': '302', 'matmul_4x4_fully': '275', 'linear_reg_25': '246', 'box_blur_4x4': '122', 'tree_100-50_5_2': '164', 'gy_kernel_4x4': '172', 'gx_kernel_3x3': '219', 'dot_product_3x3_fully': '328', 'dot_product_8x8_fully': '276', 'box_blur_8x8': '111', 'max_5_packed_fully': '48', 'l2_distance_25': '141', 'hamming_distance_8': '296', 'poly_reg_3': '219', 'matmul_8x8_fully': '244', 'poly_reg_8': '164', 'sort_4_packed_fully': '0', 'l2_distance_8': '247', 'gx_kernel_5x5': '215', 'tree_100-50_10_2': '0', 'poly_reg_4': '216', 'hamming_distance_25': '213', 'tree_100-100_5_1': '158', 'linear_reg_32': '245', 'tree_50-50_5_1': '296', 'gx_kernel_4x4': '219', 'hamming_distance_5': '296', 'poly_reg_25': '160', 'poly_reg_32': '159', 'l2_distance_4': '301', 'l2_distance_32': '190', 'dot_product_25x25_fully': '224', 'roberts_cross_4x4': '244', 'tree_100-50_5_1': '157', 'tree_100-100_5_2': '122', 'tree_100-100_10_2': '0', 'tree_100-100_10_1': '0', 'hamming_distance_3': '296', 'gy_kernel_5x5': '215', 'max_4_packed_fully': '134', 'l2_distance_5': '301', 'roberts_cross_5x5': '243', 'matmul_3x3_fully': '276', 'gy_kernel_8x8': '212', 'max_3_packed_fully': '294', 'gy_kernel_3x3': '220', 'matmul_5x5_fully': '224', 'linear_reg_5': '328', 'gx_kernel_8x8': '212', 'hamming_distance_32': '213', 'roberts_cross_3x3': '273', 'poly_reg_5': '192', 'box_blur_3x3': '228', 'l2_distance_3': '327', 'linear_reg_4': '328', 'hamming_distance_4': '270', 'roberts_cross_8x8': '240', 'linear_reg_3': '328', 'tree_50-50_10_1': '126', 'tree_100-50_10_1': '0', 'dot_product_4x4_fully': '327', 'box_blur_5x5': '119', 'tree_50-50_5_2': '296', 'linear_reg_8': '303', 'tree_50-50_10_2': '13', 'sort_3_packed_fully': '181'}

