
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "0000000000000000000000000000000000000000001000000", info);
    add_bitstring(bits, "1100000001111011011111010000101100001010000000000", info);
    add_bitstring(bits, "0000000000000000000000000001000010000100000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000010000000000000000", info);
    add_bitstring(bits, "0000000000000000000000100000000000000100000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000010000", info);
    add_bitstring(bits, "1100000001111011011111010000101100001010000010000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000100000000000", info);
    add_bitstring(bits, "0000000000000000000000000001000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000100000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000001000010000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(16);
    ts[0] = encrypt_input("1111111111000111111111111111011011111111111111011111111111111111111111111111110110111111111111111111111001111011111110101111101111011111111100011111111111101111111001111111111111110001111111011", info);
    ts[2] = encrypt_input("1111111110000111111111111110011011111111111111011111111101111111111101101111110110111111111111111101111011011111101111111010111110111101111111010001111111111110111111100011010111111101100011010", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[13];
    ctxt ss[20];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -3, gk, ss[0]); // __s0 = __v0 >> 3
    info.eval->rotate_rows(vs[0], -44, gk, ss[1]); // __s1 = __v0 >> 44
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -18, gk, ss[2]); // __s2 = __v1 >> 18
    info.eval->multiply(vs[1], vs[0], vs[2]); // __v2 = __v1 * __v0
    info.eval->relinearize_inplace(vs[2], rk);
    info.eval->rotate_rows(vs[2], -22, gk, ss[3]); // __s3 = __v2 >> 22
    info.eval->rotate_rows(vs[2], -21, gk, ss[4]); // __s4 = __v2 >> 21
    info.eval->rotate_rows(vs[2], -15, gk, ss[5]); // __s5 = __v2 >> 15
    info.eval->rotate_rows(vs[2], -9, gk, ss[6]); // __s6 = __v2 >> 9
    info.eval->rotate_rows(vs[2], -2, gk, ss[7]); // __s7 = __v2 >> 2
    info.eval->rotate_rows(vs[2], -1, gk, ss[8]); // __s8 = __v2 >> 1
    info.eval->rotate_rows(vs[2], -38, gk, ss[9]); // __s9 = __v2 >> 38
    
    // __t4 = blend(__v1@1100000001111011011111010000101100001010000010000, __s2@0000000000000000000000000000000000000000001000000)
    ctxt t4_1, t4_2;
    info.eval->multiply_plain(vs[1], bits["1100000001111011011111010000101100001010000010000"], t4_1);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000000000000000000001000000"], t4_2);
    info.eval->add(t4_1, t4_2, ts[4]);
    
    
    // __t5 = blend(__v0@1100000001111011011111010000101100001010000000000, __s1@0000000000000000000000000000000000000000001000000, __s0@0000000000000000000000000000000000000000000010000)
    ctxt t5_1, t5_2, t5_3;
    info.eval->multiply_plain(vs[0], bits["1100000001111011011111010000101100001010000000000"], t5_1);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000000000000000000000000001000000"], t5_2);
    info.eval->multiply_plain(ss[0], bits["0000000000000000000000000000000000000000000010000"], t5_3);
    info.eval->add_many({t5_1, t5_2, t5_3}, ts[5]);
    
    info.eval->multiply(ts[4], ts[5], vs[3]); // __v3 = __t4 * __t5
    info.eval->relinearize_inplace(vs[3], rk);
    info.eval->rotate_rows(vs[3], -22, gk, ss[10]); // __s10 = __v3 >> 22
    info.eval->rotate_rows(vs[3], -21, gk, ss[11]); // __s11 = __v3 >> 21
    info.eval->rotate_rows(vs[3], -18, gk, ss[12]); // __s12 = __v3 >> 18
    info.eval->rotate_rows(vs[3], -15, gk, ss[13]); // __s13 = __v3 >> 15
    info.eval->rotate_rows(vs[3], -9, gk, ss[14]); // __s14 = __v3 >> 9
    info.eval->rotate_rows(vs[3], -2, gk, ss[15]); // __s15 = __v3 >> 2
    info.eval->rotate_rows(vs[3], -1, gk, ss[16]); // __s16 = __v3 >> 1
    info.eval->rotate_rows(vs[3], -38, gk, ss[17]); // __s17 = __v3 >> 38
    info.eval->rotate_rows(vs[3], -27, gk, ss[18]); // __s18 = __v3 >> 27
    info.eval->add(vs[2], vs[3], vs[4]); // __v4 = __v2 + __v3
    info.eval->rotate_rows(vs[4], -29, gk, ss[19]); // __s19 = __v4 >> 29
    
    // __t6 = blend(__s19@0000000000000000000000100000000000000000000000000, __v2@0000000000000000000000000001000010000000000000000, __s9@0000000000000000000000000000000000000100000000000)
    ctxt t6_1, t6_2, t6_3;
    info.eval->multiply_plain(ss[19], bits["0000000000000000000000100000000000000000000000000"], t6_1);
    info.eval->multiply_plain(vs[2], bits["0000000000000000000000000001000010000000000000000"], t6_2);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000000000000000000000100000000000"], t6_3);
    info.eval->add_many({t6_1, t6_2, t6_3}, ts[6]);
    
    
    // __t7 = blend(__s18@0000000000000000000000100000000000000000000000000, __s12@0000000000000000000000000001000010000000000000000, __v2@0000000000000000000000000000000000000100000000000)
    ctxt t7_1, t7_2, t7_3;
    info.eval->multiply_plain(ss[18], bits["0000000000000000000000100000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[12], bits["0000000000000000000000000001000010000000000000000"], t7_2);
    info.eval->multiply_plain(vs[2], bits["0000000000000000000000000000000000000100000000000"], t7_3);
    info.eval->add_many({t7_1, t7_2, t7_3}, ts[7]);
    
    info.eval->add(ts[6], ts[7], vs[5]); // __v5 = __t6 + __t7
    
    // __t8 = blend(__s5@0000000000000000000000100000000000000000000000000, __s13@0000000000000000000000000001000010000000000000000, __s12@0000000000000000000000000000000000000100000000000)
    ctxt t8_1, t8_2, t8_3;
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000100000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[13], bits["0000000000000000000000000001000010000000000000000"], t8_2);
    info.eval->multiply_plain(ss[12], bits["0000000000000000000000000000000000000100000000000"], t8_3);
    info.eval->add_many({t8_1, t8_2, t8_3}, ts[8]);
    
    info.eval->add(vs[5], ts[8], vs[6]); // __v6 = __v5 + __t8
    
    // __t9 = blend(__s14@0000000000000000000000000001000010000000000000000, __s5@0000000000000000000000000000000000000100000000000)
    ctxt t9_1, t9_2;
    info.eval->multiply_plain(ss[14], bits["0000000000000000000000000001000010000000000000000"], t9_1);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000000000000000100000000000"], t9_2);
    info.eval->add(t9_1, t9_2, ts[9]);
    
    info.eval->add(vs[6], ts[9], vs[7]); // __v7 = __v6 + __t9
    
    // __t10 = blend(__v6@0000000000000000000000100000000000000000000000000, __v7@0000000000000000000000000001000010000100000000000)
    ctxt t10_1, t10_2;
    info.eval->multiply_plain(vs[6], bits["0000000000000000000000100000000000000000000000000"], t10_1);
    info.eval->multiply_plain(vs[7], bits["0000000000000000000000000001000010000100000000000"], t10_2);
    info.eval->add(t10_1, t10_2, ts[10]);
    
    
    // __t11 = blend(__s6@0000000000000000000000100000000000000000000000000, __s8@0000000000000000000000000001000000000000000000000, __s16@0000000000000000000000000000000010000000000000000, __s14@0000000000000000000000000000000000000100000000000)
    ctxt t11_1, t11_2, t11_3, t11_4;
    info.eval->multiply_plain(ss[6], bits["0000000000000000000000100000000000000000000000000"], t11_1);
    info.eval->multiply_plain(ss[8], bits["0000000000000000000000000001000000000000000000000"], t11_2);
    info.eval->multiply_plain(ss[16], bits["0000000000000000000000000000000010000000000000000"], t11_3);
    info.eval->multiply_plain(ss[14], bits["0000000000000000000000000000000000000100000000000"], t11_4);
    info.eval->add_many({t11_1, t11_2, t11_3, t11_4}, ts[11]);
    
    info.eval->add(ts[10], ts[11], vs[8]); // __v8 = __t10 + __t11
    
    // __t12 = blend(__s16@0000000000000000000000100000000000000100000000000, __s4@0000000000000000000000000001000000000000000000000, __s11@0000000000000000000000000000000010000000000000000)
    ctxt t12_1, t12_2, t12_3;
    info.eval->multiply_plain(ss[16], bits["0000000000000000000000100000000000000100000000000"], t12_1);
    info.eval->multiply_plain(ss[4], bits["0000000000000000000000000001000000000000000000000"], t12_2);
    info.eval->multiply_plain(ss[11], bits["0000000000000000000000000000000010000000000000000"], t12_3);
    info.eval->add_many({t12_1, t12_2, t12_3}, ts[12]);
    
    info.eval->add(vs[8], ts[12], vs[9]); // __v9 = __v8 + __t12
    
    // __t13 = blend(__s11@0000000000000000000000100000000000000000000000000, __s7@0000000000000000000000000001000000000000000000000, __s15@0000000000000000000000000000000010000000000000000, __s4@0000000000000000000000000000000000000100000000000)
    ctxt t13_1, t13_2, t13_3, t13_4;
    info.eval->multiply_plain(ss[11], bits["0000000000000000000000100000000000000000000000000"], t13_1);
    info.eval->multiply_plain(ss[7], bits["0000000000000000000000000001000000000000000000000"], t13_2);
    info.eval->multiply_plain(ss[15], bits["0000000000000000000000000000000010000000000000000"], t13_3);
    info.eval->multiply_plain(ss[4], bits["0000000000000000000000000000000000000100000000000"], t13_4);
    info.eval->add_many({t13_1, t13_2, t13_3, t13_4}, ts[13]);
    
    info.eval->add(vs[9], ts[13], vs[10]); // __v10 = __v9 + __t13
    
    // __t14 = blend(__s15@0000000000000000000000100000000000000000000000000, __s3@0000000000000000000000000001000000000000000000000, __s10@0000000000000000000000000000000010000000000000000, __s7@0000000000000000000000000000000000000100000000000)
    ctxt t14_1, t14_2, t14_3, t14_4;
    info.eval->multiply_plain(ss[15], bits["0000000000000000000000100000000000000000000000000"], t14_1);
    info.eval->multiply_plain(ss[3], bits["0000000000000000000000000001000000000000000000000"], t14_2);
    info.eval->multiply_plain(ss[10], bits["0000000000000000000000000000000010000000000000000"], t14_3);
    info.eval->multiply_plain(ss[7], bits["0000000000000000000000000000000000000100000000000"], t14_4);
    info.eval->add_many({t14_1, t14_2, t14_3, t14_4}, ts[14]);
    
    info.eval->add(vs[10], ts[14], vs[11]); // __v11 = __v10 + __t14
    
    // __t15 = blend(__s10@0000000000000000000000100000000000000100000000000, __s17@0000000000000000000000000001000000000000000000000, __s9@0000000000000000000000000000000010000000000000000)
    ctxt t15_1, t15_2, t15_3;
    info.eval->multiply_plain(ss[10], bits["0000000000000000000000100000000000000100000000000"], t15_1);
    info.eval->multiply_plain(ss[17], bits["0000000000000000000000000001000000000000000000000"], t15_2);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000000000000000010000000000000000"], t15_3);
    info.eval->add_many({t15_1, t15_2, t15_3}, ts[15]);
    
    info.eval->add(vs[11], ts[15], vs[12]); // __v12 = __v11 + __t15
    return vs[12];
}
    