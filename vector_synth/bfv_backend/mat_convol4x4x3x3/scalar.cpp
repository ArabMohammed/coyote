
# include "../scalar.hpp"
int ScalarProgram::num_registers()
{
    return 140;
}

std::vector<std::string> ScalarProgram::vars_used()
{
    return {"a:3,0", "a:0,1", "a:0,3", "b:2,0", "a:1,1", "b:0,2", "a:3,1", "a:1,3", "b:2,1", "b:0,0", "b:2,2", "b:1,0", "b:1,1", "b:1,2", "a:0,0", "a:3,3", "a:2,0", "a:1,2", "a:3,2", "a:2,3", "a:1,0", "a:2,1", "b:0,1", "a:2,2", "a:0,2"};
}

std::vector<ctxt> ScalarProgram::computation(std::map<std::string, ctxt> locs, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    ctxt regs[num_registers()];
    regs[0] = locs["b:0,0"];
    regs[1] = locs["a:0,0"];
    info.eval->multiply(regs[0], regs[1], regs[2]);
    info.eval->relinearize_inplace(regs[2], rk);
    regs[3] = locs["b:0,1"];
    regs[4] = locs["a:0,1"];
    info.eval->multiply(regs[3], regs[4], regs[5]);
    info.eval->relinearize_inplace(regs[5], rk);
    info.eval->add(regs[2], regs[5], regs[6]);
    regs[7] = locs["b:0,2"];
    regs[8] = locs["a:0,2"];
    info.eval->multiply(regs[7], regs[8], regs[9]);
    info.eval->relinearize_inplace(regs[9], rk);
    info.eval->add(regs[6], regs[9], regs[10]);
    regs[11] = locs["b:1,0"];
    regs[12] = locs["a:1,0"];
    info.eval->multiply(regs[11], regs[12], regs[13]);
    info.eval->relinearize_inplace(regs[13], rk);
    info.eval->add(regs[10], regs[13], regs[14]);
    regs[15] = locs["b:1,1"];
    regs[16] = locs["a:1,1"];
    info.eval->multiply(regs[15], regs[16], regs[17]);
    info.eval->relinearize_inplace(regs[17], rk);
    info.eval->add(regs[14], regs[17], regs[18]);
    regs[19] = locs["b:1,2"];
    regs[20] = locs["a:1,2"];
    info.eval->multiply(regs[19], regs[20], regs[21]);
    info.eval->relinearize_inplace(regs[21], rk);
    info.eval->add(regs[18], regs[21], regs[22]);
    regs[23] = locs["b:2,0"];
    regs[24] = locs["a:2,0"];
    info.eval->multiply(regs[23], regs[24], regs[25]);
    info.eval->relinearize_inplace(regs[25], rk);
    info.eval->add(regs[22], regs[25], regs[26]);
    regs[27] = locs["b:2,1"];
    regs[28] = locs["a:2,1"];
    info.eval->multiply(regs[27], regs[28], regs[29]);
    info.eval->relinearize_inplace(regs[29], rk);
    info.eval->add(regs[26], regs[29], regs[30]);
    regs[31] = locs["b:2,2"];
    regs[32] = locs["a:2,2"];
    info.eval->multiply(regs[31], regs[32], regs[33]);
    info.eval->relinearize_inplace(regs[33], rk);
    info.eval->add(regs[30], regs[33], regs[34]);
    regs[35] = locs["b:0,0"];
    regs[36] = locs["a:0,1"];
    info.eval->multiply(regs[35], regs[36], regs[37]);
    info.eval->relinearize_inplace(regs[37], rk);
    regs[38] = locs["b:0,1"];
    regs[39] = locs["a:0,2"];
    info.eval->multiply(regs[38], regs[39], regs[40]);
    info.eval->relinearize_inplace(regs[40], rk);
    info.eval->add(regs[37], regs[40], regs[41]);
    regs[42] = locs["b:0,2"];
    regs[43] = locs["a:0,3"];
    info.eval->multiply(regs[42], regs[43], regs[44]);
    info.eval->relinearize_inplace(regs[44], rk);
    info.eval->add(regs[41], regs[44], regs[45]);
    regs[46] = locs["b:1,0"];
    regs[47] = locs["a:1,1"];
    info.eval->multiply(regs[46], regs[47], regs[48]);
    info.eval->relinearize_inplace(regs[48], rk);
    info.eval->add(regs[45], regs[48], regs[49]);
    regs[50] = locs["b:1,1"];
    regs[51] = locs["a:1,2"];
    info.eval->multiply(regs[50], regs[51], regs[52]);
    info.eval->relinearize_inplace(regs[52], rk);
    info.eval->add(regs[49], regs[52], regs[53]);
    regs[54] = locs["b:1,2"];
    regs[55] = locs["a:1,3"];
    info.eval->multiply(regs[54], regs[55], regs[56]);
    info.eval->relinearize_inplace(regs[56], rk);
    info.eval->add(regs[53], regs[56], regs[57]);
    regs[58] = locs["b:2,0"];
    regs[59] = locs["a:2,1"];
    info.eval->multiply(regs[58], regs[59], regs[60]);
    info.eval->relinearize_inplace(regs[60], rk);
    info.eval->add(regs[57], regs[60], regs[61]);
    regs[62] = locs["b:2,1"];
    regs[63] = locs["a:2,2"];
    info.eval->multiply(regs[62], regs[63], regs[64]);
    info.eval->relinearize_inplace(regs[64], rk);
    info.eval->add(regs[61], regs[64], regs[65]);
    regs[66] = locs["b:2,2"];
    regs[67] = locs["a:2,3"];
    info.eval->multiply(regs[66], regs[67], regs[68]);
    info.eval->relinearize_inplace(regs[68], rk);
    info.eval->add(regs[65], regs[68], regs[69]);
    regs[70] = locs["b:0,0"];
    regs[71] = locs["a:1,0"];
    info.eval->multiply(regs[70], regs[71], regs[72]);
    info.eval->relinearize_inplace(regs[72], rk);
    regs[73] = locs["b:0,1"];
    regs[74] = locs["a:1,1"];
    info.eval->multiply(regs[73], regs[74], regs[75]);
    info.eval->relinearize_inplace(regs[75], rk);
    info.eval->add(regs[72], regs[75], regs[76]);
    regs[77] = locs["b:0,2"];
    regs[78] = locs["a:1,2"];
    info.eval->multiply(regs[77], regs[78], regs[79]);
    info.eval->relinearize_inplace(regs[79], rk);
    info.eval->add(regs[76], regs[79], regs[80]);
    regs[81] = locs["b:1,0"];
    regs[82] = locs["a:2,0"];
    info.eval->multiply(regs[81], regs[82], regs[83]);
    info.eval->relinearize_inplace(regs[83], rk);
    info.eval->add(regs[80], regs[83], regs[84]);
    regs[85] = locs["b:1,1"];
    regs[86] = locs["a:2,1"];
    info.eval->multiply(regs[85], regs[86], regs[87]);
    info.eval->relinearize_inplace(regs[87], rk);
    info.eval->add(regs[84], regs[87], regs[88]);
    regs[89] = locs["b:1,2"];
    regs[90] = locs["a:2,2"];
    info.eval->multiply(regs[89], regs[90], regs[91]);
    info.eval->relinearize_inplace(regs[91], rk);
    info.eval->add(regs[88], regs[91], regs[92]);
    regs[93] = locs["b:2,0"];
    regs[94] = locs["a:3,0"];
    info.eval->multiply(regs[93], regs[94], regs[95]);
    info.eval->relinearize_inplace(regs[95], rk);
    info.eval->add(regs[92], regs[95], regs[96]);
    regs[97] = locs["b:2,1"];
    regs[98] = locs["a:3,1"];
    info.eval->multiply(regs[97], regs[98], regs[99]);
    info.eval->relinearize_inplace(regs[99], rk);
    info.eval->add(regs[96], regs[99], regs[100]);
    regs[101] = locs["b:2,2"];
    regs[102] = locs["a:3,2"];
    info.eval->multiply(regs[101], regs[102], regs[103]);
    info.eval->relinearize_inplace(regs[103], rk);
    info.eval->add(regs[100], regs[103], regs[104]);
    regs[105] = locs["b:0,0"];
    regs[106] = locs["a:1,1"];
    info.eval->multiply(regs[105], regs[106], regs[107]);
    info.eval->relinearize_inplace(regs[107], rk);
    regs[108] = locs["b:0,1"];
    regs[109] = locs["a:1,2"];
    info.eval->multiply(regs[108], regs[109], regs[110]);
    info.eval->relinearize_inplace(regs[110], rk);
    info.eval->add(regs[107], regs[110], regs[111]);
    regs[112] = locs["b:0,2"];
    regs[113] = locs["a:1,3"];
    info.eval->multiply(regs[112], regs[113], regs[114]);
    info.eval->relinearize_inplace(regs[114], rk);
    info.eval->add(regs[111], regs[114], regs[115]);
    regs[116] = locs["b:1,0"];
    regs[117] = locs["a:2,1"];
    info.eval->multiply(regs[116], regs[117], regs[118]);
    info.eval->relinearize_inplace(regs[118], rk);
    info.eval->add(regs[115], regs[118], regs[119]);
    regs[120] = locs["b:1,1"];
    regs[121] = locs["a:2,2"];
    info.eval->multiply(regs[120], regs[121], regs[122]);
    info.eval->relinearize_inplace(regs[122], rk);
    info.eval->add(regs[119], regs[122], regs[123]);
    regs[124] = locs["b:1,2"];
    regs[125] = locs["a:2,3"];
    info.eval->multiply(regs[124], regs[125], regs[126]);
    info.eval->relinearize_inplace(regs[126], rk);
    info.eval->add(regs[123], regs[126], regs[127]);
    regs[128] = locs["b:2,0"];
    regs[129] = locs["a:3,1"];
    info.eval->multiply(regs[128], regs[129], regs[130]);
    info.eval->relinearize_inplace(regs[130], rk);
    info.eval->add(regs[127], regs[130], regs[131]);
    regs[132] = locs["b:2,1"];
    regs[133] = locs["a:3,2"];
    info.eval->multiply(regs[132], regs[133], regs[134]);
    info.eval->relinearize_inplace(regs[134], rk);
    info.eval->add(regs[131], regs[134], regs[135]);
    regs[136] = locs["b:2,2"];
    regs[137] = locs["a:3,3"];
    info.eval->multiply(regs[136], regs[137], regs[138]);
    info.eval->relinearize_inplace(regs[138], rk);
    info.eval->add(regs[135], regs[138], regs[139]);
    std::vector<ctxt> answer;
    answer.push_back(regs[34]);
    answer.push_back(regs[69]);
    answer.push_back(regs[104]);
    answer.push_back(regs[139]);
    return answer;
}
    