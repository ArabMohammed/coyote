
# include "../scalar.hpp"
int ScalarProgram::num_registers()
{
    return 110;
}

std::vector<std::string> ScalarProgram::vars_used()
{
    return {"a:2,1", "b:2,2", "b:0,2", "a:2,2", "a:0,1", "b:2,0", "a:3,2", "a:0,2", "a:3,3", "a:1,0", "a:0,3", "b:0,0", "a:2,3", "a:0,0", "a:1,2", "a:1,1", "b:0,1", "a:1,3", "b:1,0", "b:2,1", "a:3,1", "b:1,2", "b:1,1", "a:2,0", "a:3,0"};
}

std::vector<ctxt> ScalarProgram::computation(std::map<std::string, ctxt> locs, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    ctxt regs[num_registers()];
    regs[0] = locs["b:0,0"];
    regs[1] = locs["a:0,0"];
    info.eval->multiply(regs[0], regs[1], regs[2]);
    info.eval->relinearize_inplace(regs[2], rk);
    regs[3] = locs["b:0,1"];
    regs[4] = locs["a:0,1"];
    info.eval->multiply(regs[3], regs[4], regs[5]);
    info.eval->relinearize_inplace(regs[5], rk);
    info.eval->add(regs[2], regs[5], regs[6]);
    regs[7] = locs["b:0,2"];
    regs[8] = locs["a:0,2"];
    info.eval->multiply(regs[7], regs[8], regs[9]);
    info.eval->relinearize_inplace(regs[9], rk);
    info.eval->add(regs[6], regs[9], regs[10]);
    regs[11] = locs["b:1,0"];
    regs[12] = locs["a:1,0"];
    info.eval->multiply(regs[11], regs[12], regs[13]);
    info.eval->relinearize_inplace(regs[13], rk);
    info.eval->add(regs[10], regs[13], regs[14]);
    regs[15] = locs["b:1,1"];
    regs[16] = locs["a:1,1"];
    info.eval->multiply(regs[15], regs[16], regs[17]);
    info.eval->relinearize_inplace(regs[17], rk);
    info.eval->add(regs[14], regs[17], regs[18]);
    regs[19] = locs["b:1,2"];
    regs[20] = locs["a:1,2"];
    info.eval->multiply(regs[19], regs[20], regs[21]);
    info.eval->relinearize_inplace(regs[21], rk);
    info.eval->add(regs[18], regs[21], regs[22]);
    info.eval->multiply(locs["b:2,0"], locs["a:2,0"], regs[23]);
    info.eval->relinearize_inplace(regs[23], rk);
    info.eval->add(regs[22], regs[23], regs[24]);
    info.eval->multiply(locs["b:2,1"], locs["a:2,1"], regs[25]);
    info.eval->relinearize_inplace(regs[25], rk);
    info.eval->add(regs[24], regs[25], regs[26]);
    info.eval->multiply(locs["b:2,2"], locs["a:2,2"], regs[27]);
    info.eval->relinearize_inplace(regs[27], rk);
    info.eval->add(regs[26], regs[27], regs[28]);
    regs[29] = locs["b:0,0"];
    regs[30] = locs["a:0,1"];
    info.eval->multiply(regs[29], regs[30], regs[31]);
    info.eval->relinearize_inplace(regs[31], rk);
    regs[32] = locs["b:0,1"];
    regs[33] = locs["a:0,2"];
    info.eval->multiply(regs[32], regs[33], regs[34]);
    info.eval->relinearize_inplace(regs[34], rk);
    info.eval->add(regs[31], regs[34], regs[35]);
    regs[36] = locs["b:0,2"];
    regs[37] = locs["a:0,3"];
    info.eval->multiply(regs[36], regs[37], regs[38]);
    info.eval->relinearize_inplace(regs[38], rk);
    info.eval->add(regs[35], regs[38], regs[39]);
    regs[40] = locs["b:1,0"];
    regs[41] = locs["a:1,1"];
    info.eval->multiply(regs[40], regs[41], regs[42]);
    info.eval->relinearize_inplace(regs[42], rk);
    info.eval->add(regs[39], regs[42], regs[43]);
    regs[44] = locs["b:1,1"];
    regs[45] = locs["a:1,2"];
    info.eval->multiply(regs[44], regs[45], regs[46]);
    info.eval->relinearize_inplace(regs[46], rk);
    info.eval->add(regs[43], regs[46], regs[47]);
    regs[48] = locs["b:1,2"];
    regs[49] = locs["a:1,3"];
    info.eval->multiply(regs[48], regs[49], regs[50]);
    info.eval->relinearize_inplace(regs[50], rk);
    info.eval->add(regs[47], regs[50], regs[51]);
    info.eval->multiply(locs["b:2,0"], locs["a:2,1"], regs[52]);
    info.eval->relinearize_inplace(regs[52], rk);
    info.eval->add(regs[51], regs[52], regs[53]);
    info.eval->multiply(locs["b:2,1"], locs["a:2,2"], regs[54]);
    info.eval->relinearize_inplace(regs[54], rk);
    info.eval->add(regs[53], regs[54], regs[55]);
    info.eval->multiply(locs["b:2,2"], locs["a:2,3"], regs[56]);
    info.eval->relinearize_inplace(regs[56], rk);
    info.eval->add(regs[55], regs[56], regs[57]);
    regs[58] = locs["b:0,0"];
    regs[59] = locs["a:1,0"];
    info.eval->multiply(regs[58], regs[59], regs[60]);
    info.eval->relinearize_inplace(regs[60], rk);
    regs[61] = locs["b:0,1"];
    regs[62] = locs["a:1,1"];
    info.eval->multiply(regs[61], regs[62], regs[63]);
    info.eval->relinearize_inplace(regs[63], rk);
    info.eval->add(regs[60], regs[63], regs[64]);
    regs[65] = locs["b:0,2"];
    regs[66] = locs["a:1,2"];
    info.eval->multiply(regs[65], regs[66], regs[67]);
    info.eval->relinearize_inplace(regs[67], rk);
    info.eval->add(regs[64], regs[67], regs[68]);
    regs[69] = locs["b:1,0"];
    info.eval->multiply(regs[69], locs["a:2,0"], regs[70]);
    info.eval->relinearize_inplace(regs[70], rk);
    info.eval->add(regs[68], regs[70], regs[71]);
    regs[72] = locs["b:1,1"];
    info.eval->multiply(regs[72], locs["a:2,1"], regs[73]);
    info.eval->relinearize_inplace(regs[73], rk);
    info.eval->add(regs[71], regs[73], regs[74]);
    regs[75] = locs["b:1,2"];
    info.eval->multiply(regs[75], locs["a:2,2"], regs[76]);
    info.eval->relinearize_inplace(regs[76], rk);
    info.eval->add(regs[74], regs[76], regs[77]);
    info.eval->multiply(locs["b:2,0"], locs["a:3,0"], regs[78]);
    info.eval->relinearize_inplace(regs[78], rk);
    info.eval->add(regs[77], regs[78], regs[79]);
    info.eval->multiply(locs["b:2,1"], locs["a:3,1"], regs[80]);
    info.eval->relinearize_inplace(regs[80], rk);
    info.eval->add(regs[79], regs[80], regs[81]);
    info.eval->multiply(locs["b:2,2"], locs["a:3,2"], regs[82]);
    info.eval->relinearize_inplace(regs[82], rk);
    info.eval->add(regs[81], regs[82], regs[83]);
    regs[84] = locs["b:0,0"];
    regs[85] = locs["a:1,1"];
    info.eval->multiply(regs[84], regs[85], regs[86]);
    info.eval->relinearize_inplace(regs[86], rk);
    regs[87] = locs["b:0,1"];
    regs[88] = locs["a:1,2"];
    info.eval->multiply(regs[87], regs[88], regs[89]);
    info.eval->relinearize_inplace(regs[89], rk);
    info.eval->add(regs[86], regs[89], regs[90]);
    regs[91] = locs["b:0,2"];
    regs[92] = locs["a:1,3"];
    info.eval->multiply(regs[91], regs[92], regs[93]);
    info.eval->relinearize_inplace(regs[93], rk);
    info.eval->add(regs[90], regs[93], regs[94]);
    regs[95] = locs["b:1,0"];
    info.eval->multiply(regs[95], locs["a:2,1"], regs[96]);
    info.eval->relinearize_inplace(regs[96], rk);
    info.eval->add(regs[94], regs[96], regs[97]);
    regs[98] = locs["b:1,1"];
    info.eval->multiply(regs[98], locs["a:2,2"], regs[99]);
    info.eval->relinearize_inplace(regs[99], rk);
    info.eval->add(regs[97], regs[99], regs[100]);
    regs[101] = locs["b:1,2"];
    info.eval->multiply(regs[101], locs["a:2,3"], regs[102]);
    info.eval->relinearize_inplace(regs[102], rk);
    info.eval->add(regs[100], regs[102], regs[103]);
    info.eval->multiply(locs["b:2,0"], locs["a:3,1"], regs[104]);
    info.eval->relinearize_inplace(regs[104], rk);
    info.eval->add(regs[103], regs[104], regs[105]);
    info.eval->multiply(locs["b:2,1"], locs["a:3,2"], regs[106]);
    info.eval->relinearize_inplace(regs[106], rk);
    info.eval->add(regs[105], regs[106], regs[107]);
    info.eval->multiply(locs["b:2,2"], locs["a:3,3"], regs[108]);
    info.eval->relinearize_inplace(regs[108], rk);
    info.eval->add(regs[107], regs[108], regs[109]);
    std::vector<ctxt> answer;
    answer.push_back(regs[28]);
    answer.push_back(regs[57]);
    answer.push_back(regs[83]);
    answer.push_back(regs[109]);
    return answer;
}
    