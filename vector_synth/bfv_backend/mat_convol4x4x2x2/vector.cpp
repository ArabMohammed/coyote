
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "0000100000000000000000000011000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000010000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0010000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "1000100010001000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "1000100000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0010100000000000000000000010100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "1000000010001000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000100000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0010000000000000000000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000100000000001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0010100000000000000000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "1000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0010100000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000100000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "1000000000001000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000010001000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000011000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000010000000100000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000100000000000100000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "1010000000000000000000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0010000000000000000000000010100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000100010000000100000000001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000010000000100000000001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0010000000000000000000000011100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000001000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000100000001000000000000000000000000000000000000000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(20);
    ts[0] = encrypt_input("001111001111100001101100000000000000000000000000000011111011111110100110111101100000000000000000000000", info);
    ts[2] = encrypt_input("1101101101101111100011011111110111111101111011001101111111000111110001111111011110111101100000011111111111111111110011110110101101011010011110111100011010111100011010111100011010000000111101111011110110101101011010", info);
    ts[4] = encrypt_input("000000001111100011111000111110000000000111111111100000000000000000000000000000000000000000", info);
    ts[7] = encrypt_input("0000000000001111100011110000000000011111000000000000000000000000000000000000000000", info);
    ts[10] = encrypt_input("00000000000011111000111110000000001111011111000000000000000000000000000000000000000000", info);
    ts[13] = encrypt_input("0000000011111000111110001111000000000011111111111111100000000000000000000000000000000000000000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[9];
    ctxt ss[14];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -24, gk, ss[0]); // __s0 = __v0 >> 24
    info.eval->rotate_rows(vs[0], -65, gk, ss[1]); // __s1 = __v0 >> 65
    info.eval->rotate_rows(vs[0], -61, gk, ss[2]); // __s2 = __v0 >> 61
    info.eval->rotate_rows(vs[0], -32, gk, ss[3]); // __s3 = __v0 >> 32
    info.eval->rotate_rows(vs[0], -38, gk, ss[4]); // __s4 = __v0 >> 38
    info.eval->rotate_rows(vs[0], -56, gk, ss[5]); // __s5 = __v0 >> 56
    info.eval->rotate_rows(vs[0], -30, gk, ss[6]); // __s6 = __v0 >> 30
    info.eval->rotate_rows(vs[0], -28, gk, ss[7]); // __s7 = __v0 >> 28
    info.eval->rotate_rows(vs[0], -36, gk, ss[8]); // __s8 = __v0 >> 36
    info.eval->rotate_rows(vs[0], -29, gk, ss[9]); // __s9 = __v0 >> 29
    info.eval->rotate_rows(vs[0], -26, gk, ss[10]); // __s10 = __v0 >> 26
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -61, gk, ss[11]); // __s11 = __v1 >> 61
    info.eval->rotate_rows(vs[1], -32, gk, ss[12]); // __s12 = __v1 >> 32
    info.eval->rotate_rows(vs[1], -29, gk, ss[13]); // __s13 = __v1 >> 29
    
    // __t5 = blend(__v1@1000000000001000000000000000000000000000000000000000000000000000000000, __s12@0010100000000000000000000000100000000000000000000000000000000000000000, __s11@0000000010000000100000000000000000000000000000000000000000000000000000, __s13@0000000000000000000000000011000000000000000000000000000000000000000000)
    ctxt t5_1, t5_2, t5_3, t5_4;
    info.eval->multiply_plain(vs[1], bits["1000000000001000000000000000000000000000000000000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[12], bits["0010100000000000000000000000100000000000000000000000000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[11], bits["0000000010000000100000000000000000000000000000000000000000000000000000"], t5_3);
    info.eval->multiply_plain(ss[13], bits["0000000000000000000000000011000000000000000000000000000000000000000000"], t5_4);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4}, ts[5]);
    
    
    // __t6 = blend(__s2@1000000000000000000000000000000000000000000000000000000000000000000000, __v0@0010000000000000000000000000000000000000000000000000000000000000000000, __s1@0000100000000000000000000000000000000000000000000000000000000000000000, __s0@0000000000000000000000000010000000000000000000000000000000000000000000, __t4@0000000010001000100000000001100000000000000000000000000000000000000000)
    ctxt t6_1, t6_2, t6_3, t6_4;
    info.eval->multiply_plain(ss[2], bits["1000000000000000000000000000000000000000000000000000000000000000000000"], t6_1);
    info.eval->multiply_plain(vs[0], bits["0010000000000000000000000000000000000000000000000000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[1], bits["0000100000000000000000000000000000000000000000000000000000000000000000"], t6_3);
    info.eval->multiply_plain(ss[0], bits["0000000000000000000000000010000000000000000000000000000000000000000000"], t6_4);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4, ts[4]}, ts[6]);
    
    info.eval->multiply(ts[5], ts[6], vs[2]); // __v2 = __t5 * __t6
    info.eval->relinearize_inplace(vs[2], rk);
    
    // __t8 = blend(__s11@1000000000000000000000000000000000000000000000000000000000000000000000, __v1@0010100000000000000000000010100000000000000000000000000000000000000000, __s13@0000000010001000000000000000000000000000000000000000000000000000000000, __s12@0000000000000000100000000001000000000000000000000000000000000000000000)
    ctxt t8_1, t8_2, t8_3, t8_4;
    info.eval->multiply_plain(ss[11], bits["1000000000000000000000000000000000000000000000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(vs[1], bits["0010100000000000000000000010100000000000000000000000000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[13], bits["0000000010001000000000000000000000000000000000000000000000000000000000"], t8_3);
    info.eval->multiply_plain(ss[12], bits["0000000000000000100000000001000000000000000000000000000000000000000000"], t8_4);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4}, ts[8]);
    
    
    // __t9 = blend(__s7@1000000000000000000000000000000000000000000000000000000000000000000000, __s10@0010000000000000000000000000000000000000000000000000000000000000000000, __v0@0000100000000000000000000000000000000000000000000000000000000000000000, __s4@0000000010000000000000000000000000000000000000000000000000000000000000, __s5@0000000000000000000000000010000000000000000000000000000000000000000000, __s0@0000000000000000000000000000100000000000000000000000000000000000000000, __t7@0000000000001000100000000001000000000000000000000000000000000000000000)
    ctxt t9_1, t9_2, t9_3, t9_4, t9_5, t9_6;
    info.eval->multiply_plain(ss[7], bits["1000000000000000000000000000000000000000000000000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[10], bits["0010000000000000000000000000000000000000000000000000000000000000000000"], t9_2);
    info.eval->multiply_plain(vs[0], bits["0000100000000000000000000000000000000000000000000000000000000000000000"], t9_3);
    info.eval->multiply_plain(ss[4], bits["0000000010000000000000000000000000000000000000000000000000000000000000"], t9_4);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000010000000000000000000000000000000000000000000"], t9_5);
    info.eval->multiply_plain(ss[0], bits["0000000000000000000000000000100000000000000000000000000000000000000000"], t9_6);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, ts[7]}, ts[9]);
    
    info.eval->multiply(ts[8], ts[9], vs[3]); // __v3 = __t8 * __t9
    info.eval->relinearize_inplace(vs[3], rk);
    
    // __t11 = blend(__s13@1010000000000000000000000000100000000000000000000000000000000000000000, __s11@0000100000001000000000000000000000000000000000000000000000000000000000, __v1@0000000010000000100000000001000000000000000000000000000000000000000000, __s12@0000000000000000000000000010000000000000000000000000000000000000000000)
    ctxt t11_1, t11_2, t11_3, t11_4;
    info.eval->multiply_plain(ss[13], bits["1010000000000000000000000000100000000000000000000000000000000000000000"], t11_1);
    info.eval->multiply_plain(ss[11], bits["0000100000001000000000000000000000000000000000000000000000000000000000"], t11_2);
    info.eval->multiply_plain(vs[1], bits["0000000010000000100000000001000000000000000000000000000000000000000000"], t11_3);
    info.eval->multiply_plain(ss[12], bits["0000000000000000000000000010000000000000000000000000000000000000000000"], t11_4);
    info.eval->add_many({t11_1, t11_2, t11_3, t11_4}, ts[11]);
    
    
    // __t12 = blend(__s0@1000000000000000000000000000000000000000000000000000000000000000000000, __s9@0010100000000000000000000000000000000000000000000000000000000000000000, __s8@0000000010000000000000000000000000000000000000000000000000000000000000, __s5@0000000000000000000000000000100000000000000000000000000000000000000000, __t00@0000000000001000100000000011000000000000000000000000000000000000000000)
    ctxt t12_1, t12_2, t12_3, t12_4;
    info.eval->multiply_plain(ss[0], bits["1000000000000000000000000000000000000000000000000000000000000000000000"], t12_1);
    info.eval->multiply_plain(ss[9], bits["0010100000000000000000000000000000000000000000000000000000000000000000"], t12_2);
    info.eval->multiply_plain(ss[8], bits["0000000010000000000000000000000000000000000000000000000000000000000000"], t12_3);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000000100000000000000000000000000000000000000000"], t12_4);
    info.eval->add_many({t12_1, t12_2, t12_3, t12_4, ts[00]}, ts[12]);
    
    info.eval->multiply(ts[01], ts[02], vs[4]); // __v4 = __t01 * __t02
    info.eval->relinearize_inplace(vs[4], rk);
    
    // __t14 = blend(__s12@1000000010001000000000000000000000000000000000000000000000000000000000, __s11@0010000000000000000000000011100000000000000000000000000000000000000000, __s13@0000100000000000100000000000000000000000000000000000000000000000000000)
    ctxt t14_1, t14_2, t14_3;
    info.eval->multiply_plain(ss[12], bits["1000000010001000000000000000000000000000000000000000000000000000000000"], t14_1);
    info.eval->multiply_plain(ss[11], bits["0010000000000000000000000011100000000000000000000000000000000000000000"], t14_2);
    info.eval->multiply_plain(ss[13], bits["0000100000000000100000000000000000000000000000000000000000000000000000"], t14_3);
    info.eval->add_many({t14_1, t14_2, t14_3}, ts[14]);
    
    
    // __t15 = blend(__s6@1000000000000000000000000000000000000000000000000000000000000000000000, __s3@0010100000000000000000000000000000000000000000000000000000000000000000, __t03@0000000010001000100000000011100000000000000000000000000000000000000000)
    ctxt t15_1, t15_2;
    info.eval->multiply_plain(ss[6], bits["1000000000000000000000000000000000000000000000000000000000000000000000"], t15_1);
    info.eval->multiply_plain(ss[3], bits["0010100000000000000000000000000000000000000000000000000000000000000000"], t15_2);
    info.eval->add_many({t15_1, t15_2, ts[03]}, ts[15]);
    
    info.eval->multiply(ts[04], ts[05], vs[5]); // __v5 = __t04 * __t05
    info.eval->relinearize_inplace(vs[5], rk);
    
    // __t16 = blend(__v4@1010000000000000000000000000100000000000000000000000000000000000000000, __v2@0000100000000000000000000011000000000000000000000000000000000000000000, __v3@0000000010001000000000000000000000000000000000000000000000000000000000, __v5@0000000000000000100000000000000000000000000000000000000000000000000000)
    ctxt t16_1, t16_2, t16_3, t16_4;
    info.eval->multiply_plain(vs[4], bits["1010000000000000000000000000100000000000000000000000000000000000000000"], t16_1);
    info.eval->multiply_plain(vs[2], bits["0000100000000000000000000011000000000000000000000000000000000000000000"], t16_2);
    info.eval->multiply_plain(vs[3], bits["0000000010001000000000000000000000000000000000000000000000000000000000"], t16_3);
    info.eval->multiply_plain(vs[5], bits["0000000000000000100000000000000000000000000000000000000000000000000000"], t16_4);
    info.eval->add_many({t16_1, t16_2, t16_3, t16_4}, ts[16]);
    
    
    // __t17 = blend(__v2@1000000000001000000000000000000000000000000000000000000000000000000000, __v3@0010000000000000000000000010100000000000000000000000000000000000000000, __v4@0000100010000000100000000001000000000000000000000000000000000000000000)
    ctxt t17_1, t17_2, t17_3;
    info.eval->multiply_plain(vs[2], bits["1000000000001000000000000000000000000000000000000000000000000000000000"], t17_1);
    info.eval->multiply_plain(vs[3], bits["0010000000000000000000000010100000000000000000000000000000000000000000"], t17_2);
    info.eval->multiply_plain(vs[4], bits["0000100010000000100000000001000000000000000000000000000000000000000000"], t17_3);
    info.eval->add_many({t17_1, t17_2, t17_3}, ts[17]);
    
    info.eval->add(ts[06], ts[07], vs[6]); // __v6 = __t06 + __t07
    
    // __t18 = blend(__v5@1000100010001000000000000000000000000000000000000000000000000000000000, __v2@0010000000000000000000000000100000000000000000000000000000000000000000, __v3@0000000000000000100000000001000000000000000000000000000000000000000000, __v4@0000000000000000000000000010000000000000000000000000000000000000000000)
    ctxt t18_1, t18_2, t18_3, t18_4;
    info.eval->multiply_plain(vs[5], bits["1000100010001000000000000000000000000000000000000000000000000000000000"], t18_1);
    info.eval->multiply_plain(vs[2], bits["0010000000000000000000000000100000000000000000000000000000000000000000"], t18_2);
    info.eval->multiply_plain(vs[3], bits["0000000000000000100000000001000000000000000000000000000000000000000000"], t18_3);
    info.eval->multiply_plain(vs[4], bits["0000000000000000000000000010000000000000000000000000000000000000000000"], t18_4);
    info.eval->add_many({t18_1, t18_2, t18_3, t18_4}, ts[18]);
    
    info.eval->add(vs[6], ts[08], vs[7]); // __v7 = __v6 + __t08
    
    // __t19 = blend(__v3@1000100000000000000000000000000000000000000000000000000000000000000000, __v5@0010000000000000000000000011100000000000000000000000000000000000000000, __v2@0000000010000000100000000000000000000000000000000000000000000000000000, __v4@0000000000001000000000000000000000000000000000000000000000000000000000)
    ctxt t19_1, t19_2, t19_3, t19_4;
    info.eval->multiply_plain(vs[3], bits["1000100000000000000000000000000000000000000000000000000000000000000000"], t19_1);
    info.eval->multiply_plain(vs[5], bits["0010000000000000000000000011100000000000000000000000000000000000000000"], t19_2);
    info.eval->multiply_plain(vs[2], bits["0000000010000000100000000000000000000000000000000000000000000000000000"], t19_3);
    info.eval->multiply_plain(vs[4], bits["0000000000001000000000000000000000000000000000000000000000000000000000"], t19_4);
    info.eval->add_many({t19_1, t19_2, t19_3, t19_4}, ts[19]);
    
    info.eval->add(vs[7], ts[09], vs[8]); // __v8 = __v7 + __t09
    return vs[8];
}
    