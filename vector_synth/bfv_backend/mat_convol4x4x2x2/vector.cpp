
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "000100000000100100101000000000000100000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000001", info);
    add_bitstring(bits, "000000000000000000100000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000010000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000010000000000000000000000100000000001000000000000010000001000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", info);
    add_bitstring(bits, "001000000000100000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "001000000000000000000000000000000000000000000000000010000000000000001000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "001000000000001000000000010000000000100000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000010000000000000000011000000000000000000000000000000101000000100001000000000000000000000000000000000000000000000000000000000000010", info);
    add_bitstring(bits, "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "100001000000000010001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "001000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "001000000000000010000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000010000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000001000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000010000000000001000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000010000000000000001000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "001000000000000000000010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(23);
    ts[0] = encrypt_input("0011111000000000111100001101100011010111110000000001111000001111100111110000000011111011011000011110110110011111000000000000111110000000000000000000000000000000000000000000000000000001111111111000", info);
    ts[2] = encrypt_input("110101111011111000000011010011110111101101001101101111101101011111011110000000011110001101011011111101111100000001101100111110110100110101101011110110111111000001111111011011111011010001101100000000000000011011001101100000000000011011111100000000000000000000000000111111111100", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[12];
    ctxt ss[42];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -2, gk, ss[0]); // __s0 = __v0 >> 2
    info.eval->rotate_rows(vs[0], -113, gk, ss[1]); // __s1 = __v0 >> 113
    info.eval->rotate_rows(vs[0], -32, gk, ss[2]); // __s2 = __v0 >> 32
    info.eval->rotate_rows(vs[0], -98, gk, ss[3]); // __s3 = __v0 >> 98
    info.eval->rotate_rows(vs[0], -96, gk, ss[4]); // __s4 = __v0 >> 96
    info.eval->rotate_rows(vs[0], -15, gk, ss[5]); // __s5 = __v0 >> 15
    info.eval->rotate_rows(vs[0], -99, gk, ss[6]); // __s6 = __v0 >> 99
    info.eval->rotate_rows(vs[0], -128, gk, ss[7]); // __s7 = __v0 >> 128
    info.eval->rotate_rows(vs[0], -4, gk, ss[8]); // __s8 = __v0 >> 4
    info.eval->rotate_rows(vs[0], -85, gk, ss[9]); // __s9 = __v0 >> 85
    info.eval->rotate_rows(vs[0], -73, gk, ss[10]); // __s10 = __v0 >> 73
    info.eval->rotate_rows(vs[0], -69, gk, ss[11]); // __s11 = __v0 >> 69
    info.eval->rotate_rows(vs[0], -61, gk, ss[12]); // __s12 = __v0 >> 61
    info.eval->rotate_rows(vs[0], -72, gk, ss[13]); // __s13 = __v0 >> 72
    info.eval->rotate_rows(vs[0], -59, gk, ss[14]); // __s14 = __v0 >> 59
    info.eval->rotate_rows(vs[0], -6, gk, ss[15]); // __s15 = __v0 >> 6
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -2, gk, ss[16]); // __s16 = __v1 >> 2
    info.eval->rotate_rows(vs[1], -99, gk, ss[17]); // __s17 = __v1 >> 99
    info.eval->rotate_rows(vs[1], -98, gk, ss[18]); // __s18 = __v1 >> 98
    info.eval->rotate_rows(vs[1], -4, gk, ss[19]); // __s19 = __v1 >> 4
    
    // __t4 = blend(__s16@000010000000000000000011000000000000000000000000000000101000000100001000000000000000000000000000000000000000000000000000000000000010, __s17@000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    ctxt t4_1, t4_2;
    info.eval->multiply_plain(ss[16], bits["000010000000000000000011000000000000000000000000000000101000000100001000000000000000000000000000000000000000000000000000000000000010"], t4_1);
    info.eval->multiply_plain(ss[17], bits["000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t4_2);
    info.eval->add(t4_1, t4_2, ts[4]);
    
    
    // __t5 = blend(__s0@000010000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010, __s9@000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s5@000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000, __s12@000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000, __s8@000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000, __s10@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5, t5_6;
    info.eval->multiply_plain(ss[0], bits["000010000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010"], t5_1);
    info.eval->multiply_plain(ss[9], bits["000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000"], t5_3);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000"], t5_4);
    info.eval->multiply_plain(ss[8], bits["000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000"], t5_5);
    info.eval->multiply_plain(ss[10], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t5_6);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5, t5_6}, ts[5]);
    
    info.eval->multiply(ts[4], ts[5], vs[2]); // __v2 = __t4 * __t5
    info.eval->relinearize_inplace(vs[2], rk);
    info.eval->rotate_rows(vs[2], -2, gk, ss[20]); // __s20 = __v2 >> 2
    info.eval->rotate_rows(vs[2], -128, gk, ss[21]); // __s21 = __v2 >> 128
    info.eval->rotate_rows(vs[2], -99, gk, ss[22]); // __s22 = __v2 >> 99
    info.eval->rotate_rows(vs[2], -96, gk, ss[23]); // __s23 = __v2 >> 96
    info.eval->rotate_rows(vs[2], -69, gk, ss[24]); // __s24 = __v2 >> 69
    info.eval->rotate_rows(vs[2], -23, gk, ss[25]); // __s25 = __v2 >> 23
    
    // __t6 = blend(__s17@001000000000000000000010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000, __s16@000000000000000010000000000000000000000100000000001000000000000010000001000000000000000000000000000000000000000000000000000000000000, __s18@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t6_1, t6_2, t6_3;
    info.eval->multiply_plain(ss[17], bits["001000000000000000000010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000"], t6_1);
    info.eval->multiply_plain(ss[16], bits["000000000000000010000000000000000000000100000000001000000000000010000001000000000000000000000000000000000000000000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[18], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t6_3);
    info.eval->add_many({t6_1, t6_2, t6_3}, ts[6]);
    
    
    // __t7 = blend(__s3@001000000000000010000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s6@000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s0@000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000, __s11@000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000, __s13@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000, __s2@000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000)
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6;
    info.eval->multiply_plain(ss[3], bits["001000000000000010000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000"], t7_4);
    info.eval->multiply_plain(ss[13], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t7_5);
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000"], t7_6);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6}, ts[7]);
    
    info.eval->multiply(ts[6], ts[7], vs[3]); // __v3 = __t6 * __t7
    info.eval->relinearize_inplace(vs[3], rk);
    info.eval->rotate_rows(vs[3], -4, gk, ss[26]); // __s26 = __v3 >> 4
    info.eval->rotate_rows(vs[3], -113, gk, ss[27]); // __s27 = __v3 >> 113
    info.eval->rotate_rows(vs[3], -98, gk, ss[28]); // __s28 = __v3 >> 98
    info.eval->rotate_rows(vs[3], -89, gk, ss[29]); // __s29 = __v3 >> 89
    info.eval->rotate_rows(vs[3], -61, gk, ss[30]); // __s30 = __v3 >> 61
    
    // __t8 = blend(__s16@001000000000001000000000010000000000100000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000, __s18@000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s17@000000000000000000000000000000000000000000000000000000010000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t8_1, t8_2, t8_3;
    info.eval->multiply_plain(ss[16], bits["001000000000001000000000010000000000100000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[18], bits["000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[17], bits["000000000000000000000000000000000000000000000000000000010000000000001000000000000000000000000000000000000000000000000000000000000000"], t8_3);
    info.eval->add_many({t8_1, t8_2, t8_3}, ts[8]);
    
    
    // __t9 = blend(__s15@001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s0@000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s6@000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s3@000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s1@000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s7@000000000000000000000000000000000000000000000000000010000000000000001000000000000000000000000000000000000000000000000000000000000000, __s14@000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000)
    ctxt t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;
    info.eval->multiply_plain(ss[15], bits["001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[0], bits["000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t9_2);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t9_3);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t9_4);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t9_5);
    info.eval->multiply_plain(ss[7], bits["000000000000000000000000000000000000000000000000000010000000000000001000000000000000000000000000000000000000000000000000000000000000"], t9_6);
    info.eval->multiply_plain(ss[14], bits["000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000"], t9_7);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7}, ts[9]);
    
    info.eval->multiply(ts[8], ts[9], vs[4]); // __v4 = __t8 * __t9
    info.eval->relinearize_inplace(vs[4], rk);
    info.eval->rotate_rows(vs[4], -2, gk, ss[31]); // __s31 = __v4 >> 2
    info.eval->rotate_rows(vs[4], -128, gk, ss[32]); // __s32 = __v4 >> 128
    info.eval->rotate_rows(vs[4], -96, gk, ss[33]); // __s33 = __v4 >> 96
    
    // __t10 = blend(__v3@000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v4@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t10_1, t10_2;
    info.eval->multiply_plain(vs[3], bits["000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t10_1);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t10_2);
    info.eval->add(t10_1, t10_2, ts[10]);
    
    info.eval->add(vs[2], ts[10], vs[5]); // __v5 = __v2 + __t10
    
    // __t11 = blend(__v4@001000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000, __v5@000000000000000000000010000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t11_1, t11_2;
    info.eval->multiply_plain(vs[4], bits["001000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000"], t11_1);
    info.eval->multiply_plain(vs[5], bits["000000000000000000000010000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t11_2);
    info.eval->add(t11_1, t11_2, ts[11]);
    
    
    // __t12 = blend(__v3@001000000000000000000000000000000000000000000000000010000000000000001000000000000000000000000000000000000000000000000000000000000000, __v4@000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    ctxt t12_1, t12_2;
    info.eval->multiply_plain(vs[3], bits["001000000000000000000000000000000000000000000000000010000000000000001000000000000000000000000000000000000000000000000000000000000000"], t12_1);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t12_2);
    info.eval->add(t12_1, t12_2, ts[12]);
    
    info.eval->add(ts[11], ts[12], vs[6]); // __v6 = __t11 + __t12
    info.eval->rotate_rows(vs[6], -2, gk, ss[34]); // __s34 = __v6 >> 2
    info.eval->rotate_rows(vs[6], -85, gk, ss[35]); // __s35 = __v6 >> 85
    
    // __t13 = blend(__s18@001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s16@000100000000100100101000000000000100000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000001, __s19@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t13_1, t13_2, t13_3;
    info.eval->multiply_plain(ss[18], bits["001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t13_1);
    info.eval->multiply_plain(ss[16], bits["000100000000100100101000000000000100000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000001"], t13_2);
    info.eval->multiply_plain(ss[19], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t13_3);
    info.eval->add_many({t13_1, t13_2, t13_3}, ts[13]);
    
    
    // __t14 = blend(__s1@001000000000100000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s4@000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s6@000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s0@000000000000000000100000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s7@000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000, __s2@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000, __s8@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
    ctxt t14_1, t14_2, t14_3, t14_4, t14_5, t14_6, t14_7;
    info.eval->multiply_plain(ss[1], bits["001000000000100000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t14_1);
    info.eval->multiply_plain(ss[4], bits["000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t14_2);
    info.eval->multiply_plain(ss[6], bits["000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t14_3);
    info.eval->multiply_plain(ss[0], bits["000000000000000000100000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t14_4);
    info.eval->multiply_plain(ss[7], bits["000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000"], t14_5);
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t14_6);
    info.eval->multiply_plain(ss[8], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"], t14_7);
    info.eval->add_many({t14_1, t14_2, t14_3, t14_4, t14_5, t14_6, t14_7}, ts[14]);
    
    info.eval->multiply(ts[13], ts[14], vs[7]); // __v7 = __t13 * __t14
    info.eval->relinearize_inplace(vs[7], rk);
    info.eval->rotate_rows(vs[7], -2, gk, ss[36]); // __s36 = __v7 >> 2
    info.eval->rotate_rows(vs[7], -4, gk, ss[37]); // __s37 = __v7 >> 4
    info.eval->rotate_rows(vs[7], -99, gk, ss[38]); // __s38 = __v7 >> 99
    info.eval->rotate_rows(vs[7], -6, gk, ss[39]); // __s39 = __v7 >> 6
    
    // __t15 = blend(__v6@001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000, __v7@000000000000100000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000)
    ctxt t15_1, t15_2;
    info.eval->multiply_plain(vs[6], bits["001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t15_1);
    info.eval->multiply_plain(vs[7], bits["000000000000100000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000"], t15_2);
    info.eval->add(t15_1, t15_2, ts[15]);
    
    
    // __t16 = blend(__v7@001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000, __v2@000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v4@000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000)
    ctxt t16_1, t16_2, t16_3;
    info.eval->multiply_plain(vs[7], bits["001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t16_1);
    info.eval->multiply_plain(vs[2], bits["000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t16_2);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000"], t16_3);
    info.eval->add_many({t16_1, t16_2, t16_3}, ts[16]);
    
    info.eval->add(ts[15], ts[16], vs[8]); // __v8 = __t15 + __t16
    info.eval->rotate_rows(vs[8], -4, gk, ss[40]); // __s40 = __v8 >> 4
    info.eval->rotate_rows(vs[8], -96, gk, ss[41]); // __s41 = __v8 >> 96
    
    // __t17 = blend(__s33@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s35@000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s40@000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s41@000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s26@000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s22@000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    ctxt t17_1, t17_2, t17_3, t17_4, t17_5, t17_6;
    info.eval->multiply_plain(ss[33], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t17_1);
    info.eval->multiply_plain(ss[35], bits["000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t17_2);
    info.eval->multiply_plain(ss[40], bits["000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t17_3);
    info.eval->multiply_plain(ss[41], bits["000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t17_4);
    info.eval->multiply_plain(ss[26], bits["000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t17_5);
    info.eval->multiply_plain(ss[22], bits["000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t17_6);
    info.eval->add_many({t17_1, t17_2, t17_3, t17_4, t17_5, t17_6}, ts[17]);
    
    
    // __t18 = blend(__s30@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s36@000001000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s31@000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s37@000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s29@000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    ctxt t18_1, t18_2, t18_3, t18_4, t18_5;
    info.eval->multiply_plain(ss[30], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t18_1);
    info.eval->multiply_plain(ss[36], bits["000001000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t18_2);
    info.eval->multiply_plain(ss[31], bits["000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t18_3);
    info.eval->multiply_plain(ss[37], bits["000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t18_4);
    info.eval->multiply_plain(ss[29], bits["000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t18_5);
    info.eval->add_many({t18_1, t18_2, t18_3, t18_4, t18_5}, ts[18]);
    
    info.eval->add(ts[17], ts[18], vs[9]); // __v9 = __t17 + __t18
    
    // __t19 = blend(__v9@100001000000000010001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s34@000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    ctxt t19_1, t19_2;
    info.eval->multiply_plain(vs[9], bits["100001000000000010001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t19_1);
    info.eval->multiply_plain(ss[34], bits["000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t19_2);
    info.eval->add(t19_1, t19_2, ts[19]);
    
    
    // __t20 = blend(__s38@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s39@000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s28@000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s23@000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s32@000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s37@000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    ctxt t20_1, t20_2, t20_3, t20_4, t20_5, t20_6;
    info.eval->multiply_plain(ss[38], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t20_1);
    info.eval->multiply_plain(ss[39], bits["000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t20_2);
    info.eval->multiply_plain(ss[28], bits["000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t20_3);
    info.eval->multiply_plain(ss[23], bits["000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t20_4);
    info.eval->multiply_plain(ss[32], bits["000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t20_5);
    info.eval->multiply_plain(ss[37], bits["000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t20_6);
    info.eval->add_many({t20_1, t20_2, t20_3, t20_4, t20_5, t20_6}, ts[20]);
    
    info.eval->add(ts[19], ts[20], vs[10]); // __v10 = __t19 + __t20
    
    // __t21 = blend(__v10@100000000000000000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s40@000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v9@000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    ctxt t21_1, t21_2, t21_3;
    info.eval->multiply_plain(vs[10], bits["100000000000000000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t21_1);
    info.eval->multiply_plain(ss[40], bits["000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t21_2);
    info.eval->multiply_plain(vs[9], bits["000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t21_3);
    info.eval->add_many({t21_1, t21_2, t21_3}, ts[21]);
    
    
    // __t22 = blend(__s24@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s20@000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s21@000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s27@000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s25@000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    ctxt t22_1, t22_2, t22_3, t22_4, t22_5;
    info.eval->multiply_plain(ss[24], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t22_1);
    info.eval->multiply_plain(ss[20], bits["000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t22_2);
    info.eval->multiply_plain(ss[21], bits["000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t22_3);
    info.eval->multiply_plain(ss[27], bits["000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t22_4);
    info.eval->multiply_plain(ss[25], bits["000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t22_5);
    info.eval->add_many({t22_1, t22_2, t22_3, t22_4, t22_5}, ts[22]);
    
    info.eval->add(ts[21], ts[22], vs[11]); // __v11 = __t21 + __t22
    return vs[11];
}
    