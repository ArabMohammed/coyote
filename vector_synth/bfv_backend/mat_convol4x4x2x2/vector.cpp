
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "100010000000000010000000001000000000001110001000000000000000000000", info);
    add_bitstring(bits, "100010000000000010000000001000000000001110000000000000000000000000", info);
    add_bitstring(bits, "100010000000000010000000001000000000001110000100000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000001000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000100000000000000000000", info);
    add_bitstring(bits, "000010000000000000000000000000000000000010000000000000000000000000", info);
    add_bitstring(bits, "100010000000000010000000000000000000000010000000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(18);
    ts[0] = encrypt_input("000111111111100110110000000111110001111111111000110110000000000011111000111110011010110110011111111100011110000110110000110110001111111111", info);
    ts[1] = encrypt_input("000111111111100110110000000111110001111111111000110110000000000011111000111110011010110110011111111100011110000110110000110110001111111111", info);
    ts[2] = encrypt_input("111110011010111110011010000111100001111011111001101011011000110110111111111001101000000011011111101111111111111111101011010110101101111111110111111011010111101111011110000110101111001101111011110110001111111011", info);
    ts[3] = encrypt_input("111110011010111110011010000111100001111011111001101011011000110110111111111001101000000011011111101111111111111111101011010110101101111111110111111011010111101111011110000110101111001101111011110110001111111011", info);
    ts[4] = encrypt_input("000000000000000000000000001111100000000000111111111100000000000000000000000000", info);
    ts[7] = encrypt_input("000000000000000000000000001111100000000000111111111000000000000000000000000000", info);
    ts[12] = encrypt_input("111110000000000000001111100000000011111000000000001111111110000001111000000000000000000000", info);
    ts[15] = encrypt_input("111110000000000000001111100000000011111000000000001111111111000001111100000000000000000000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[9];
    ctxt ss[6];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -63, gk, ss[0]); // __s0 = __v0 >> 63
    info.eval->rotate_rows(vs[0], -55, gk, ss[1]); // __s1 = __v0 >> 55
    info.eval->rotate_rows(vs[0], -46, gk, ss[2]); // __s2 = __v0 >> 46
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -63, gk, ss[3]); // __s3 = __v1 >> 63
    info.eval->rotate_rows(vs[1], -55, gk, ss[4]); // __s4 = __v1 >> 55
    info.eval->rotate_rows(vs[1], -46, gk, ss[5]); // __s5 = __v1 >> 46
    
    // __t5 = blend(__s5@100010000000000010000000001000000000001110000000000000000000000000, __v1@000000000000000000000000000000000000000000001000000000000000000000, __s3@000000000000000000000000000000000000000000000100000000000000000000)
    ctxt t5_1, t5_2, t5_3;
    info.eval->multiply_plain(ss[5], bits["100010000000000010000000001000000000001110000000000000000000000000"], t5_1);
    info.eval->multiply_plain(vs[1], bits["000000000000000000000000000000000000000000001000000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000000000000000000000100000000000000000000"], t5_3);
    info.eval->add_many({t5_1, t5_2, t5_3}, ts[5]);
    
    
    // __t6 = blend(__s2@100010000000000010000000000000000000000010000000000000000000000000, __v0@000000000000000000000000000000000000000000001000000000000000000000, __s0@000000000000000000000000000000000000000000000100000000000000000000, __t4@000000000000000000000000001000000000001100000000000000000000000000)
    ctxt t6_1, t6_2, t6_3;
    info.eval->multiply_plain(ss[2], bits["100010000000000010000000000000000000000010000000000000000000000000"], t6_1);
    info.eval->multiply_plain(vs[0], bits["000000000000000000000000000000000000000000001000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000000100000000000000000000"], t6_3);
    info.eval->add_many({t6_1, t6_2, t6_3, ts[4]}, ts[6]);
    
    info.eval->multiply(ts[5], ts[6], vs[2]); // __v2 = __t5 * __t6
    info.eval->relinearize_inplace(vs[2], rk);
    
    // __t8 = blend(__s3@100010000000000010000000001000000000001110000000000000000000000000, __s4@000000000000000000000000000000000000000000001000000000000000000000, __s5@000000000000000000000000000000000000000000000100000000000000000000)
    ctxt t8_1, t8_2, t8_3;
    info.eval->multiply_plain(ss[3], bits["100010000000000010000000001000000000001110000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000000000000001000000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000000000000000100000000000000000000"], t8_3);
    info.eval->add_many({t8_1, t8_2, t8_3}, ts[8]);
    
    
    // __t9 = blend(__s0@100010000000000010000000000000000000000010000000000000000000000000, __s1@000000000000000000000000000000000000000000001000000000000000000000, __s2@000000000000000000000000000000000000000000000100000000000000000000, __t7@000000000000000000000000001000000000001100000000000000000000000000)
    ctxt t9_1, t9_2, t9_3;
    info.eval->multiply_plain(ss[0], bits["100010000000000010000000000000000000000010000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000000000000001000000000000000000000"], t9_2);
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000000000000000100000000000000000000"], t9_3);
    info.eval->add_many({t9_1, t9_2, t9_3, ts[7]}, ts[9]);
    
    info.eval->multiply(ts[8], ts[9], vs[3]); // __v3 = __t8 * __t9
    info.eval->relinearize_inplace(vs[3], rk);
    
    // __t10 = blend(__v3@100010000000000010000000001000000000001110001000000000000000000000, __v2@000000000000000000000000000000000000000000000100000000000000000000)
    ctxt t10_1, t10_2;
    info.eval->multiply_plain(vs[3], bits["100010000000000010000000001000000000001110001000000000000000000000"], t10_1);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000000000000000100000000000000000000"], t10_2);
    info.eval->add(t10_1, t10_2, ts[10]);
    
    
    // __t11 = blend(__v2@100010000000000010000000001000000000001110001000000000000000000000, __v3@000000000000000000000000000000000000000000000100000000000000000000)
    ctxt t11_1, t11_2;
    info.eval->multiply_plain(vs[2], bits["100010000000000010000000001000000000001110001000000000000000000000"], t11_1);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000000000000000100000000000000000000"], t11_2);
    info.eval->add(t11_1, t11_2, ts[11]);
    
    info.eval->add(ts[10], ts[11], vs[4]); // __v4 = __t10 + __t11
    
    // __t13 = blend(__s4@100010000000000010000000001000000000001110000100000000000000000000, __s3@000000000000000000000000000000000000000000001000000000000000000000)
    ctxt t13_1, t13_2;
    info.eval->multiply_plain(ss[4], bits["100010000000000010000000001000000000001110000100000000000000000000"], t13_1);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000000000000000000001000000000000000000000"], t13_2);
    info.eval->add(t13_1, t13_2, ts[13]);
    
    
    // __t14 = blend(__s1@000010000000000000000000000000000000000010000000000000000000000000, __s0@000000000000000000000000000000000000000000001000000000000000000000, __t12@100000000000000010000000001000000000001100000100000000000000000000)
    ctxt t14_1, t14_2;
    info.eval->multiply_plain(ss[1], bits["000010000000000000000000000000000000000010000000000000000000000000"], t14_1);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000001000000000000000000000"], t14_2);
    info.eval->add_many({t14_1, t14_2, ts[12]}, ts[14]);
    
    info.eval->multiply(ts[13], ts[14], vs[5]); // __v5 = __t13 * __t14
    info.eval->relinearize_inplace(vs[5], rk);
    info.eval->add(vs[4], vs[5], vs[6]); // __v6 = __v4 + __v5
    
    // __t16 = blend(__v1@100010000000000010000000001000000000001110000100000000000000000000, __s5@000000000000000000000000000000000000000000001000000000000000000000)
    ctxt t16_1, t16_2;
    info.eval->multiply_plain(vs[1], bits["100010000000000010000000001000000000001110000100000000000000000000"], t16_1);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000000000000001000000000000000000000"], t16_2);
    info.eval->add(t16_1, t16_2, ts[16]);
    
    
    // __t17 = blend(__v0@000010000000000000000000000000000000000010000000000000000000000000, __s2@000000000000000000000000000000000000000000001000000000000000000000, __t15@100000000000000010000000001000000000001100000100000000000000000000)
    ctxt t17_1, t17_2;
    info.eval->multiply_plain(vs[0], bits["000010000000000000000000000000000000000010000000000000000000000000"], t17_1);
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000000000000001000000000000000000000"], t17_2);
    info.eval->add_many({t17_1, t17_2, ts[15]}, ts[17]);
    
    info.eval->multiply(ts[16], ts[17], vs[7]); // __v7 = __t16 * __t17
    info.eval->relinearize_inplace(vs[7], rk);
    info.eval->add(vs[6], vs[7], vs[8]); // __v8 = __v6 + __v7
    return vs[8];
}
    