
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "000101101000010000000000000000000000000000", info);
    add_bitstring(bits, "100000001001010000000000000000000000000000", info);
    add_bitstring(bits, "100001001000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000010000000000000000000000000000", info);
    add_bitstring(bits, "000000110001010000000000000000000000000000", info);
    add_bitstring(bits, "110000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000100010000010000000000000000000000000000", info);
    add_bitstring(bits, "010000100000000000000000000000000000000000", info);
    add_bitstring(bits, "000100000000000000000000000000000000000000", info);
    add_bitstring(bits, "000001000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000001000000000000000000000000000000", info);
    add_bitstring(bits, "000101001000010000000000000000000000000000", info);
    add_bitstring(bits, "110000100000000000000000000000000000000000", info);
    add_bitstring(bits, "000000100000000000000000000000000000000000", info);
    add_bitstring(bits, "010100000000000000000000000000000000000000", info);
    add_bitstring(bits, "000001010000000000000000000000000000000000", info);
    add_bitstring(bits, "000101000000000000000000000000000000000000", info);
    add_bitstring(bits, "010000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000010001010000000000000000000000000000", info);
    add_bitstring(bits, "000101000001000000000000000000000000000000", info);
    add_bitstring(bits, "000000010000000000000000000000000000000000", info);
    add_bitstring(bits, "000000001000000000000000000000000000000000", info);
    add_bitstring(bits, "110000000001000000000000000000000000000000", info);
    add_bitstring(bits, "100000101001010000000000000000000000000000", info);
    add_bitstring(bits, "000000100001000000000000000000000000000000", info);
    add_bitstring(bits, "000100110000010000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000001100000000000000000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(16);
    ts[0] = encrypt_input("0001111111111111101101111111000110100011110000000000110111111100011011011111111111111111111000111100011111", info);
    ts[2] = encrypt_input("110101101001101001101011110110101101011111111111101011111110101111111011111111111111110111101111111110111111111011010111101111011011110111111011011111101101111111110111101100110110110110", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[9];
    ctxt ss[23];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -2, gk, ss[0]); // __s0 = __v0 >> 2
    info.eval->rotate_rows(vs[0], -40, gk, ss[1]); // __s1 = __v0 >> 40
    info.eval->rotate_rows(vs[0], -39, gk, ss[2]); // __s2 = __v0 >> 39
    info.eval->rotate_rows(vs[0], -3, gk, ss[3]); // __s3 = __v0 >> 3
    info.eval->rotate_rows(vs[0], -4, gk, ss[4]); // __s4 = __v0 >> 4
    info.eval->rotate_rows(vs[0], -38, gk, ss[5]); // __s5 = __v0 >> 38
    info.eval->rotate_rows(vs[0], -33, gk, ss[6]); // __s6 = __v0 >> 33
    info.eval->rotate_rows(vs[0], -31, gk, ss[7]); // __s7 = __v0 >> 31
    info.eval->rotate_rows(vs[0], -24, gk, ss[8]); // __s8 = __v0 >> 24
    info.eval->rotate_rows(vs[0], -25, gk, ss[9]); // __s9 = __v0 >> 25
    info.eval->rotate_rows(vs[0], -26, gk, ss[10]); // __s10 = __v0 >> 26
    info.eval->rotate_rows(vs[0], -17, gk, ss[11]); // __s11 = __v0 >> 17
    info.eval->rotate_rows(vs[0], -11, gk, ss[12]); // __s12 = __v0 >> 11
    info.eval->rotate_rows(vs[0], -19, gk, ss[13]); // __s13 = __v0 >> 19
    info.eval->rotate_rows(vs[0], -15, gk, ss[14]); // __s14 = __v0 >> 15
    info.eval->rotate_rows(vs[0], -9, gk, ss[15]); // __s15 = __v0 >> 9
    info.eval->rotate_rows(vs[0], -7, gk, ss[16]); // __s16 = __v0 >> 7
    info.eval->rotate_rows(vs[0], -1, gk, ss[17]); // __s17 = __v0 >> 1
    info.eval->rotate_rows(vs[0], -12, gk, ss[18]); // __s18 = __v0 >> 12
    info.eval->rotate_rows(vs[0], -14, gk, ss[19]); // __s19 = __v0 >> 14
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -33, gk, ss[20]); // __s20 = __v1 >> 33
    info.eval->rotate_rows(vs[1], -24, gk, ss[21]); // __s21 = __v1 >> 24
    info.eval->rotate_rows(vs[1], -15, gk, ss[22]); // __s22 = __v1 >> 15
    
    // __t4 = blend(__s21@110000000001000000000000000000000000000000, __s22@000101001000010000000000000000000000000000, __s20@000000100000000000000000000000000000000000, __v1@000000010000000000000000000000000000000000)
    ctxt t4_1, t4_2, t4_3, t4_4;
    info.eval->multiply_plain(ss[21], bits["110000000001000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[22], bits["000101001000010000000000000000000000000000"], t4_2);
    info.eval->multiply_plain(ss[20], bits["000000100000000000000000000000000000000000"], t4_3);
    info.eval->multiply_plain(vs[1], bits["000000010000000000000000000000000000000000"], t4_4);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4}, ts[4]);
    
    
    // __t5 = blend(__s2@100000000000000000000000000000000000000000, __s12@010000000000000000000000000000000000000000, __s4@000100000000000000000000000000000000000000, __s0@000001000000000000000000000000000000000000, __v0@000000100000000000000000000000000000000000, __s3@000000010000000000000000000000000000000000, __s11@000000001000000000000000000000000000000000, __s14@000000000001000000000000000000000000000000, __s7@000000000000010000000000000000000000000000)
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9;
    info.eval->multiply_plain(ss[2], bits["100000000000000000000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[12], bits["010000000000000000000000000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[4], bits["000100000000000000000000000000000000000000"], t5_3);
    info.eval->multiply_plain(ss[0], bits["000001000000000000000000000000000000000000"], t5_4);
    info.eval->multiply_plain(vs[0], bits["000000100000000000000000000000000000000000"], t5_5);
    info.eval->multiply_plain(ss[3], bits["000000010000000000000000000000000000000000"], t5_6);
    info.eval->multiply_plain(ss[11], bits["000000001000000000000000000000000000000000"], t5_7);
    info.eval->multiply_plain(ss[14], bits["000000000001000000000000000000000000000000"], t5_8);
    info.eval->multiply_plain(ss[7], bits["000000000000010000000000000000000000000000"], t5_9);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9}, ts[5]);
    
    info.eval->multiply(ts[4], ts[5], vs[2]); // __v2 = __t4 * __t5
    info.eval->relinearize_inplace(vs[2], rk);
    
    // __t6 = blend(__s22@110000100000000000000000000000000000000000, __v1@000101000000000000000000000000000000000000, __s20@000000010001010000000000000000000000000000, __s21@000000001000000000000000000000000000000000)
    ctxt t6_1, t6_2, t6_3, t6_4;
    info.eval->multiply_plain(ss[22], bits["110000100000000000000000000000000000000000"], t6_1);
    info.eval->multiply_plain(vs[1], bits["000101000000000000000000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[20], bits["000000010001010000000000000000000000000000"], t6_3);
    info.eval->multiply_plain(ss[21], bits["000000001000000000000000000000000000000000"], t6_4);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4}, ts[6]);
    
    
    // __t7 = blend(__s12@100000000000000000000000000000000000000000, __s2@010000000000000000000000000000000000000000, __s16@000100000000000000000000000000000000000000, __s6@000001000000000000000000000000000000000000, __s14@000000100000000000000000000000000000000000, __v0@000000010000000000000000000000000000000000, __s4@000000001000000000000000000000000000000000, __s18@000000000001000000000000000000000000000000, __s8@000000000000010000000000000000000000000000)
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9;
    info.eval->multiply_plain(ss[12], bits["100000000000000000000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[2], bits["010000000000000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[16], bits["000100000000000000000000000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[6], bits["000001000000000000000000000000000000000000"], t7_4);
    info.eval->multiply_plain(ss[14], bits["000000100000000000000000000000000000000000"], t7_5);
    info.eval->multiply_plain(vs[0], bits["000000010000000000000000000000000000000000"], t7_6);
    info.eval->multiply_plain(ss[4], bits["000000001000000000000000000000000000000000"], t7_7);
    info.eval->multiply_plain(ss[18], bits["000000000001000000000000000000000000000000"], t7_8);
    info.eval->multiply_plain(ss[8], bits["000000000000010000000000000000000000000000"], t7_9);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9}, ts[7]);
    
    info.eval->multiply(ts[6], ts[7], vs[3]); // __v3 = __t6 * __t7
    info.eval->relinearize_inplace(vs[3], rk);
    
    // __t8 = blend(__s20@100001001000000000000000000000000000000000, __v1@010000000000000000000000000000000000000000, __s21@000100110000010000000000000000000000000000, __s22@000000000001000000000000000000000000000000)
    ctxt t8_1, t8_2, t8_3, t8_4;
    info.eval->multiply_plain(ss[20], bits["100001001000000000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(vs[1], bits["010000000000000000000000000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[21], bits["000100110000010000000000000000000000000000"], t8_3);
    info.eval->multiply_plain(ss[22], bits["000000000001000000000000000000000000000000"], t8_4);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4}, ts[8]);
    
    
    // __t9 = blend(__s5@100000000000000000000000000000000000000000, __s1@010000000000000000000000000000000000000000, __s7@000100000000000000000000000000000000000000, __s14@000001010000000000000000000000000000000000, __s8@000000100001000000000000000000000000000000, __s9@000000001000000000000000000000000000000000, __s19@000000000000010000000000000000000000000000)
    ctxt t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;
    info.eval->multiply_plain(ss[5], bits["100000000000000000000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[1], bits["010000000000000000000000000000000000000000"], t9_2);
    info.eval->multiply_plain(ss[7], bits["000100000000000000000000000000000000000000"], t9_3);
    info.eval->multiply_plain(ss[14], bits["000001010000000000000000000000000000000000"], t9_4);
    info.eval->multiply_plain(ss[8], bits["000000100001000000000000000000000000000000"], t9_5);
    info.eval->multiply_plain(ss[9], bits["000000001000000000000000000000000000000000"], t9_6);
    info.eval->multiply_plain(ss[19], bits["000000000000010000000000000000000000000000"], t9_7);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7}, ts[9]);
    
    info.eval->multiply(ts[8], ts[9], vs[4]); // __v4 = __t8 * __t9
    info.eval->relinearize_inplace(vs[4], rk);
    
    // __t10 = blend(__v1@100000101001010000000000000000000000000000, __s20@010100000000000000000000000000000000000000, __s21@000001000000000000000000000000000000000000, __s22@000000010000000000000000000000000000000000)
    ctxt t10_1, t10_2, t10_3, t10_4;
    info.eval->multiply_plain(vs[1], bits["100000101001010000000000000000000000000000"], t10_1);
    info.eval->multiply_plain(ss[20], bits["010100000000000000000000000000000000000000"], t10_2);
    info.eval->multiply_plain(ss[21], bits["000001000000000000000000000000000000000000"], t10_3);
    info.eval->multiply_plain(ss[22], bits["000000010000000000000000000000000000000000"], t10_4);
    info.eval->add_many({t10_1, t10_2, t10_3, t10_4}, ts[10]);
    
    
    // __t11 = blend(__s17@100000000000000000000000000000000000000000, __s15@010000000000000000000000000000000000000000, __v0@000101000001000000000000000000000000000000, __s11@000000100000000000000000000000000000000000, __s8@000000010000000000000000000000000000000000, __s13@000000001000000000000000000000000000000000, __s10@000000000000010000000000000000000000000000)
    ctxt t11_1, t11_2, t11_3, t11_4, t11_5, t11_6, t11_7;
    info.eval->multiply_plain(ss[17], bits["100000000000000000000000000000000000000000"], t11_1);
    info.eval->multiply_plain(ss[15], bits["010000000000000000000000000000000000000000"], t11_2);
    info.eval->multiply_plain(vs[0], bits["000101000001000000000000000000000000000000"], t11_3);
    info.eval->multiply_plain(ss[11], bits["000000100000000000000000000000000000000000"], t11_4);
    info.eval->multiply_plain(ss[8], bits["000000010000000000000000000000000000000000"], t11_5);
    info.eval->multiply_plain(ss[13], bits["000000001000000000000000000000000000000000"], t11_6);
    info.eval->multiply_plain(ss[10], bits["000000000000010000000000000000000000000000"], t11_7);
    info.eval->add_many({t11_1, t11_2, t11_3, t11_4, t11_5, t11_6, t11_7}, ts[11]);
    
    info.eval->multiply(ts[10], ts[11], vs[5]); // __v5 = __t10 * __t11
    info.eval->relinearize_inplace(vs[5], rk);
    
    // __t12 = blend(__v5@100000001001010000000000000000000000000000, __v4@010000100000000000000000000000000000000000, __v3@000101000000000000000000000000000000000000, __v2@000000010000000000000000000000000000000000)
    ctxt t12_1, t12_2, t12_3, t12_4;
    info.eval->multiply_plain(vs[5], bits["100000001001010000000000000000000000000000"], t12_1);
    info.eval->multiply_plain(vs[4], bits["010000100000000000000000000000000000000000"], t12_2);
    info.eval->multiply_plain(vs[3], bits["000101000000000000000000000000000000000000"], t12_3);
    info.eval->multiply_plain(vs[2], bits["000000010000000000000000000000000000000000"], t12_4);
    info.eval->add_many({t12_1, t12_2, t12_3, t12_4}, ts[12]);
    
    
    // __t13 = blend(__v3@110000000000000000000000000000000000000000, __v2@000101101000010000000000000000000000000000, __v5@000000010000000000000000000000000000000000, __v4@000000000001000000000000000000000000000000)
    ctxt t13_1, t13_2, t13_3, t13_4;
    info.eval->multiply_plain(vs[3], bits["110000000000000000000000000000000000000000"], t13_1);
    info.eval->multiply_plain(vs[2], bits["000101101000010000000000000000000000000000"], t13_2);
    info.eval->multiply_plain(vs[5], bits["000000010000000000000000000000000000000000"], t13_3);
    info.eval->multiply_plain(vs[4], bits["000000000001000000000000000000000000000000"], t13_4);
    info.eval->add_many({t13_1, t13_2, t13_3, t13_4}, ts[13]);
    
    info.eval->add(ts[12], ts[13], vs[6]); // __v6 = __t12 + __t13
    
    // __t14 = blend(__v2@110000000001000000000000000000000000000000, __v4@000100010000010000000000000000000000000000, __v5@000001100000000000000000000000000000000000, __v3@000000001000000000000000000000000000000000)
    ctxt t14_1, t14_2, t14_3, t14_4;
    info.eval->multiply_plain(vs[2], bits["110000000001000000000000000000000000000000"], t14_1);
    info.eval->multiply_plain(vs[4], bits["000100010000010000000000000000000000000000"], t14_2);
    info.eval->multiply_plain(vs[5], bits["000001100000000000000000000000000000000000"], t14_3);
    info.eval->multiply_plain(vs[3], bits["000000001000000000000000000000000000000000"], t14_4);
    info.eval->add_many({t14_1, t14_2, t14_3, t14_4}, ts[14]);
    
    info.eval->add(vs[6], ts[14], vs[7]); // __v7 = __v6 + __t14
    
    // __t15 = blend(__v4@100001001000000000000000000000000000000000, __v5@010100000000000000000000000000000000000000, __v3@000000110001010000000000000000000000000000)
    ctxt t15_1, t15_2, t15_3;
    info.eval->multiply_plain(vs[4], bits["100001001000000000000000000000000000000000"], t15_1);
    info.eval->multiply_plain(vs[5], bits["010100000000000000000000000000000000000000"], t15_2);
    info.eval->multiply_plain(vs[3], bits["000000110001010000000000000000000000000000"], t15_3);
    info.eval->add_many({t15_1, t15_2, t15_3}, ts[15]);
    
    info.eval->add(vs[7], ts[15], vs[8]); // __v8 = __v7 + __t15
    return vs[8];
}
    