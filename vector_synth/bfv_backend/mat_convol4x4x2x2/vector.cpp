
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "0000000000000000000000000000000000000000000010000", info);
    add_bitstring(bits, "0000000000010000000000000010000000000000000000000", info);
    add_bitstring(bits, "1000000000001000000000010000000000000000000010000", info);
    add_bitstring(bits, "0000000100100100000010000000101000000000000000100", info);
    add_bitstring(bits, "1000000000000000000000000010100000000000000000000", info);
    add_bitstring(bits, "0100000000000000100000101011010010000001000000000", info);
    add_bitstring(bits, "0000000001010000000000000001000000000000000000000", info);
    add_bitstring(bits, "0000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000100000000000000000000", info);
    add_bitstring(bits, "0000000001000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000100010000000000000000000", info);
    add_bitstring(bits, "1000000000001000000000010000000000000000000000000", info);
    add_bitstring(bits, "0000000001010100000000000010000000000000000000000", info);
    add_bitstring(bits, "1000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000100000000000000000000000000000000000", info);
    add_bitstring(bits, "1000000000000100000000000000000000000000000000000", info);
    add_bitstring(bits, "1000000000000000000000000010000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000001000000000000", info);
    add_bitstring(bits, "0000000000000000000000000100000000000000000000000", info);
    add_bitstring(bits, "0000010000010010011100000100000001000000000001010", info);
    add_bitstring(bits, "0000000000000000000000000000010000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000001000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(18);
    ts[0] = encrypt_input("0110111111100011110110111111100111111111111111111111101001111111111111111111111011011111111101111111011111111111111111111101111111011111101111101111111111111110111110001111111110111111111111111", info);
    ts[2] = encrypt_input("1101111010110100110111111011110011011001101011111110101111111010011011110111101111110110110111111101011111110101111111010111101101011110110111111011011111100011111011111000111100111101111111111", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[12];
    ctxt ss[30];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -48, gk, ss[0]); // __s0 = __v0 >> 48
    info.eval->rotate_rows(vs[0], -42, gk, ss[1]); // __s1 = __v0 >> 42
    info.eval->rotate_rows(vs[0], -36, gk, ss[2]); // __s2 = __v0 >> 36
    info.eval->rotate_rows(vs[0], -30, gk, ss[3]); // __s3 = __v0 >> 30
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -29, gk, ss[4]); // __s4 = __v1 >> 29
    info.eval->rotate_rows(vs[1], -48, gk, ss[5]); // __s5 = __v1 >> 48
    info.eval->rotate_rows(vs[1], -45, gk, ss[6]); // __s6 = __v1 >> 45
    info.eval->rotate_rows(vs[1], -39, gk, ss[7]); // __s7 = __v1 >> 39
    info.eval->rotate_rows(vs[1], -42, gk, ss[8]); // __s8 = __v1 >> 42
    info.eval->rotate_rows(vs[1], -1, gk, ss[9]); // __s9 = __v1 >> 1
    info.eval->rotate_rows(vs[1], -36, gk, ss[10]); // __s10 = __v1 >> 36
    info.eval->rotate_rows(vs[1], -30, gk, ss[11]); // __s11 = __v1 >> 30
    
    // __t4 = blend(__s6@1000000000000000000000000000000000000000000000000, __s5@0100000000000000100000101011010010000001000000000, __s11@0000000000000000000000000100000000000000000000000)
    ctxt t4_1, t4_2, t4_3;
    info.eval->multiply_plain(ss[6], bits["1000000000000000000000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[5], bits["0100000000000000100000101011010010000001000000000"], t4_2);
    info.eval->multiply_plain(ss[11], bits["0000000000000000000000000100000000000000000000000"], t4_3);
    info.eval->add_many({t4_1, t4_2, t4_3}, ts[4]);
    
    
    // __t5 = blend(__s1@1000000000000000000000000000000000000000000000000, __s0@0100000000000000100000101011010010000001000000000, __s3@0000000000000000000000000100000000000000000000000)
    ctxt t5_1, t5_2, t5_3;
    info.eval->multiply_plain(ss[1], bits["1000000000000000000000000000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[0], bits["0100000000000000100000101011010010000001000000000"], t5_2);
    info.eval->multiply_plain(ss[3], bits["0000000000000000000000000100000000000000000000000"], t5_3);
    info.eval->add_many({t5_1, t5_2, t5_3}, ts[5]);
    
    info.eval->multiply(ts[4], ts[5], vs[2]); // __v2 = __t4 * __t5
    info.eval->relinearize_inplace(vs[2], rk);
    info.eval->rotate_rows(vs[2], -48, gk, ss[12]); // __s12 = __v2 >> 48
    info.eval->rotate_rows(vs[2], -42, gk, ss[13]); // __s13 = __v2 >> 42
    info.eval->rotate_rows(vs[2], -36, gk, ss[14]); // __s14 = __v2 >> 36
    info.eval->rotate_rows(vs[2], -30, gk, ss[15]); // __s15 = __v2 >> 30
    
    // __t6 = blend(__s5@0000000100100100000010000000101000000000000000100, __s8@0000000000000000000000000100000000000000000000000, __s4@0000000000000000000000000000010000000000000000000)
    ctxt t6_1, t6_2, t6_3;
    info.eval->multiply_plain(ss[5], bits["0000000100100100000010000000101000000000000000100"], t6_1);
    info.eval->multiply_plain(ss[8], bits["0000000000000000000000000100000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[4], bits["0000000000000000000000000000010000000000000000000"], t6_3);
    info.eval->add_many({t6_1, t6_2, t6_3}, ts[6]);
    
    
    // __t7 = blend(__s0@0000000100100100000010000000101000000000000000100, __s1@0000000000000000000000000100010000000000000000000)
    ctxt t7_1, t7_2;
    info.eval->multiply_plain(ss[0], bits["0000000100100100000010000000101000000000000000100"], t7_1);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000000000100010000000000000000000"], t7_2);
    info.eval->add(t7_1, t7_2, ts[7]);
    
    info.eval->multiply(ts[6], ts[7], vs[3]); // __v3 = __t6 * __t7
    info.eval->relinearize_inplace(vs[3], rk);
    info.eval->rotate_rows(vs[3], -42, gk, ss[16]); // __s16 = __v3 >> 42
    info.eval->rotate_rows(vs[3], -48, gk, ss[17]); // __s17 = __v3 >> 48
    info.eval->rotate_rows(vs[3], -36, gk, ss[18]); // __s18 = __v3 >> 36
    info.eval->rotate_rows(vs[3], -30, gk, ss[19]); // __s19 = __v3 >> 30
    
    // __t8 = blend(__s5@0000010000010010011100000100000001000000000001010, __s9@0000000000000000000000000000000000001000000000000)
    ctxt t8_1, t8_2;
    info.eval->multiply_plain(ss[5], bits["0000010000010010011100000100000001000000000001010"], t8_1);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000000000000000000001000000000000"], t8_2);
    info.eval->add(t8_1, t8_2, ts[8]);
    
    info.eval->multiply(ts[8], ss[0], vs[4]); // __v4 = __t8 * __s0
    info.eval->relinearize_inplace(vs[4], rk);
    info.eval->rotate_rows(vs[4], -48, gk, ss[20]); // __s20 = __v4 >> 48
    info.eval->rotate_rows(vs[4], -42, gk, ss[21]); // __s21 = __v4 >> 42
    info.eval->rotate_rows(vs[4], -36, gk, ss[22]); // __s22 = __v4 >> 36
    info.eval->rotate_rows(vs[4], -30, gk, ss[23]); // __s23 = __v4 >> 30
    info.eval->rotate_rows(vs[4], -41, gk, ss[24]); // __s24 = __v4 >> 41
    
    // __t9 = blend(__s5@1000000000001000000000010000000000000000000000000, __s10@0000000000000000000000000100000000000000000000000, __s7@0000000000000000000000000000000000000000000010000)
    ctxt t9_1, t9_2, t9_3;
    info.eval->multiply_plain(ss[5], bits["1000000000001000000000010000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[10], bits["0000000000000000000000000100000000000000000000000"], t9_2);
    info.eval->multiply_plain(ss[7], bits["0000000000000000000000000000000000000000000010000"], t9_3);
    info.eval->add_many({t9_1, t9_2, t9_3}, ts[9]);
    
    
    // __t10 = blend(__s0@1000000000001000000000010000000000000000000010000, __s2@0000000000000000000000000100000000000000000000000)
    ctxt t10_1, t10_2;
    info.eval->multiply_plain(ss[0], bits["1000000000001000000000010000000000000000000010000"], t10_1);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000100000000000000000000000"], t10_2);
    info.eval->add(t10_1, t10_2, ts[10]);
    
    info.eval->multiply(ts[9], ts[10], vs[5]); // __v5 = __t9 * __t10
    info.eval->relinearize_inplace(vs[5], rk);
    info.eval->rotate_rows(vs[5], -48, gk, ss[25]); // __s25 = __v5 >> 48
    info.eval->rotate_rows(vs[5], -30, gk, ss[26]); // __s26 = __v5 >> 30
    info.eval->rotate_rows(vs[5], -32, gk, ss[27]); // __s27 = __v5 >> 32
    
    // __t11 = blend(__v4@0000000000000000000000000100000000000000000000000, __v2@0000000000000000000000000000010000000000000000000)
    ctxt t11_1, t11_2;
    info.eval->multiply_plain(vs[4], bits["0000000000000000000000000100000000000000000000000"], t11_1);
    info.eval->multiply_plain(vs[2], bits["0000000000000000000000000000010000000000000000000"], t11_2);
    info.eval->add(t11_1, t11_2, ts[11]);
    
    info.eval->add(ts[11], vs[3], vs[6]); // __v6 = __t11 + __v3
    info.eval->rotate_rows(vs[6], -47, gk, ss[28]); // __s28 = __v6 >> 47
    info.eval->add(vs[6], vs[2], vs[7]); // __v7 = __v6 + __v2
    
    // __t12 = blend(__v5@1000000000000000000000000000000000000000000000000, __v7@0000000000000000000000000100000000000000000000000)
    ctxt t12_1, t12_2;
    info.eval->multiply_plain(vs[5], bits["1000000000000000000000000000000000000000000000000"], t12_1);
    info.eval->multiply_plain(vs[7], bits["0000000000000000000000000100000000000000000000000"], t12_2);
    info.eval->add(t12_1, t12_2, ts[12]);
    
    
    // __t13 = blend(__v2@1000000000000000000000000000000000000000000000000, __v5@0000000000000000000000000100000000000000000000000)
    ctxt t13_1, t13_2;
    info.eval->multiply_plain(vs[2], bits["1000000000000000000000000000000000000000000000000"], t13_1);
    info.eval->multiply_plain(vs[5], bits["0000000000000000000000000100000000000000000000000"], t13_2);
    info.eval->add(t13_1, t13_2, ts[13]);
    
    info.eval->add(ts[12], ts[13], vs[8]); // __v8 = __t12 + __t13
    info.eval->rotate_rows(vs[8], -28, gk, ss[29]); // __s29 = __v8 >> 28
    
    // __t14 = blend(__s12@1000000000000000000000000010000000000000000000000, __s26@0000100000000000000000000000000000000000000000000, __s17@0000000001000000000000000000000000000000000000000, __s25@0000000000010000000000000000000000000000000000000, __s20@0000000000000100000000000000000000000000000000000, __s28@0000000000000000000000000001000000000000000000000, __s29@0000000000000000000000000000100000000000000000000)
    ctxt t14_1, t14_2, t14_3, t14_4, t14_5, t14_6, t14_7;
    info.eval->multiply_plain(ss[12], bits["1000000000000000000000000010000000000000000000000"], t14_1);
    info.eval->multiply_plain(ss[26], bits["0000100000000000000000000000000000000000000000000"], t14_2);
    info.eval->multiply_plain(ss[17], bits["0000000001000000000000000000000000000000000000000"], t14_3);
    info.eval->multiply_plain(ss[25], bits["0000000000010000000000000000000000000000000000000"], t14_4);
    info.eval->multiply_plain(ss[20], bits["0000000000000100000000000000000000000000000000000"], t14_5);
    info.eval->multiply_plain(ss[28], bits["0000000000000000000000000001000000000000000000000"], t14_6);
    info.eval->multiply_plain(ss[29], bits["0000000000000000000000000000100000000000000000000"], t14_7);
    info.eval->add_many({t14_1, t14_2, t14_3, t14_4, t14_5, t14_6, t14_7}, ts[14]);
    
    
    // __t15 = blend(__s16@1000000000000100000000000000000000000000000000000, __s22@0000100000000000000000000000000000000000000000000, __s13@0000000001000000000000000000000000000000000000000, __s21@0000000000010000000000000010000000000000000000000, __s27@0000000000000000000000000001000000000000000000000, __s24@0000000000000000000000000000100000000000000000000)
    ctxt t15_1, t15_2, t15_3, t15_4, t15_5, t15_6;
    info.eval->multiply_plain(ss[16], bits["1000000000000100000000000000000000000000000000000"], t15_1);
    info.eval->multiply_plain(ss[22], bits["0000100000000000000000000000000000000000000000000"], t15_2);
    info.eval->multiply_plain(ss[13], bits["0000000001000000000000000000000000000000000000000"], t15_3);
    info.eval->multiply_plain(ss[21], bits["0000000000010000000000000010000000000000000000000"], t15_4);
    info.eval->multiply_plain(ss[27], bits["0000000000000000000000000001000000000000000000000"], t15_5);
    info.eval->multiply_plain(ss[24], bits["0000000000000000000000000000100000000000000000000"], t15_6);
    info.eval->add_many({t15_1, t15_2, t15_3, t15_4, t15_5, t15_6}, ts[15]);
    
    info.eval->add(ts[14], ts[15], vs[9]); // __v9 = __t14 + __t15
    
    // __t16 = blend(__s23@1000000000000000000000000010100000000000000000000, __s20@0000100000000000000000000000000000000000000000000, __s19@0000000001010000000000000001000000000000000000000, __s15@0000000000000100000000000000000000000000000000000)
    ctxt t16_1, t16_2, t16_3, t16_4;
    info.eval->multiply_plain(ss[23], bits["1000000000000000000000000010100000000000000000000"], t16_1);
    info.eval->multiply_plain(ss[20], bits["0000100000000000000000000000000000000000000000000"], t16_2);
    info.eval->multiply_plain(ss[19], bits["0000000001010000000000000001000000000000000000000"], t16_3);
    info.eval->multiply_plain(ss[15], bits["0000000000000100000000000000000000000000000000000"], t16_4);
    info.eval->add_many({t16_1, t16_2, t16_3, t16_4}, ts[16]);
    
    info.eval->add(vs[9], ts[16], vs[10]); // __v10 = __v9 + __t16
    
    // __t17 = blend(__s18@1000000000000000000000000000000000000000000000000, __s21@0000100000000000000000000000000000000000000000000, __s14@0000000001010100000000000010000000000000000000000)
    ctxt t17_1, t17_2, t17_3;
    info.eval->multiply_plain(ss[18], bits["1000000000000000000000000000000000000000000000000"], t17_1);
    info.eval->multiply_plain(ss[21], bits["0000100000000000000000000000000000000000000000000"], t17_2);
    info.eval->multiply_plain(ss[14], bits["0000000001010100000000000010000000000000000000000"], t17_3);
    info.eval->add_many({t17_1, t17_2, t17_3}, ts[17]);
    
    info.eval->add(vs[10], ts[17], vs[11]); // __v11 = __v10 + __t17
    return vs[11];
}
    