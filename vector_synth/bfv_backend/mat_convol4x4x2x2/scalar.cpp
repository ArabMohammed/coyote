
# include "../scalar.hpp"
int ScalarProgram::num_registers()
{
    return 117;
}

std::vector<std::string> ScalarProgram::vars_used()
{
    return {"a:3,0", "a:3,1", "a:3,3", "a:1,2", "a:0,2", "a:2,3", "a:2,0", "a:1,1", "a:1,3", "b:1,1", "a:0,3", "a:0,0", "b:0,0", "a:0,1", "a:1,0", "a:3,2", "b:1,0", "b:0,1", "a:2,2", "a:2,1"};
}

std::vector<ctxt> ScalarProgram::computation(std::map<std::string, ctxt> locs, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    ctxt regs[num_registers()];
    regs[0] = locs["b:0,0"];
    regs[1] = locs["a:0,0"];
    info.eval->multiply(regs[0], regs[1], regs[2]);
    info.eval->relinearize_inplace(regs[2], rk);
    regs[3] = locs["b:0,1"];
    regs[4] = locs["a:0,1"];
    info.eval->multiply(regs[3], regs[4], regs[5]);
    info.eval->relinearize_inplace(regs[5], rk);
    info.eval->add(regs[2], regs[5], regs[6]);
    regs[7] = locs["b:1,0"];
    regs[8] = locs["a:1,0"];
    info.eval->multiply(regs[7], regs[8], regs[9]);
    info.eval->relinearize_inplace(regs[9], rk);
    info.eval->add(regs[6], regs[9], regs[10]);
    regs[11] = locs["b:1,1"];
    regs[12] = locs["a:1,1"];
    info.eval->multiply(regs[11], regs[12], regs[13]);
    info.eval->relinearize_inplace(regs[13], rk);
    info.eval->add(regs[10], regs[13], regs[14]);
    regs[15] = locs["b:0,0"];
    regs[16] = locs["a:0,1"];
    info.eval->multiply(regs[15], regs[16], regs[17]);
    info.eval->relinearize_inplace(regs[17], rk);
    regs[18] = locs["b:0,1"];
    regs[19] = locs["a:0,2"];
    info.eval->multiply(regs[18], regs[19], regs[20]);
    info.eval->relinearize_inplace(regs[20], rk);
    info.eval->add(regs[17], regs[20], regs[21]);
    regs[22] = locs["b:1,0"];
    regs[23] = locs["a:1,1"];
    info.eval->multiply(regs[22], regs[23], regs[24]);
    info.eval->relinearize_inplace(regs[24], rk);
    info.eval->add(regs[21], regs[24], regs[25]);
    regs[26] = locs["b:1,1"];
    regs[27] = locs["a:1,2"];
    info.eval->multiply(regs[26], regs[27], regs[28]);
    info.eval->relinearize_inplace(regs[28], rk);
    info.eval->add(regs[25], regs[28], regs[29]);
    regs[30] = locs["b:0,0"];
    regs[31] = locs["a:0,2"];
    info.eval->multiply(regs[30], regs[31], regs[32]);
    info.eval->relinearize_inplace(regs[32], rk);
    regs[33] = locs["b:0,1"];
    regs[34] = locs["a:0,3"];
    info.eval->multiply(regs[33], regs[34], regs[35]);
    info.eval->relinearize_inplace(regs[35], rk);
    info.eval->add(regs[32], regs[35], regs[36]);
    regs[37] = locs["b:1,0"];
    regs[38] = locs["a:1,2"];
    info.eval->multiply(regs[37], regs[38], regs[39]);
    info.eval->relinearize_inplace(regs[39], rk);
    info.eval->add(regs[36], regs[39], regs[40]);
    regs[41] = locs["b:1,1"];
    regs[42] = locs["a:1,3"];
    info.eval->multiply(regs[41], regs[42], regs[43]);
    info.eval->relinearize_inplace(regs[43], rk);
    info.eval->add(regs[40], regs[43], regs[44]);
    regs[45] = locs["b:0,0"];
    regs[46] = locs["a:1,0"];
    info.eval->multiply(regs[45], regs[46], regs[47]);
    info.eval->relinearize_inplace(regs[47], rk);
    regs[48] = locs["b:0,1"];
    regs[49] = locs["a:1,1"];
    info.eval->multiply(regs[48], regs[49], regs[50]);
    info.eval->relinearize_inplace(regs[50], rk);
    info.eval->add(regs[47], regs[50], regs[51]);
    regs[52] = locs["b:1,0"];
    info.eval->multiply(regs[52], locs["a:2,0"], regs[53]);
    info.eval->relinearize_inplace(regs[53], rk);
    info.eval->add(regs[51], regs[53], regs[54]);
    regs[55] = locs["b:1,1"];
    info.eval->multiply(regs[55], locs["a:2,1"], regs[56]);
    info.eval->relinearize_inplace(regs[56], rk);
    info.eval->add(regs[54], regs[56], regs[57]);
    regs[58] = locs["b:0,0"];
    regs[59] = locs["a:1,1"];
    info.eval->multiply(regs[58], regs[59], regs[60]);
    info.eval->relinearize_inplace(regs[60], rk);
    regs[61] = locs["b:0,1"];
    regs[62] = locs["a:1,2"];
    info.eval->multiply(regs[61], regs[62], regs[63]);
    info.eval->relinearize_inplace(regs[63], rk);
    info.eval->add(regs[60], regs[63], regs[64]);
    regs[65] = locs["b:1,0"];
    info.eval->multiply(regs[65], locs["a:2,1"], regs[66]);
    info.eval->relinearize_inplace(regs[66], rk);
    info.eval->add(regs[64], regs[66], regs[67]);
    regs[68] = locs["b:1,1"];
    info.eval->multiply(regs[68], locs["a:2,2"], regs[69]);
    info.eval->relinearize_inplace(regs[69], rk);
    info.eval->add(regs[67], regs[69], regs[70]);
    regs[71] = locs["b:0,0"];
    regs[72] = locs["a:1,2"];
    info.eval->multiply(regs[71], regs[72], regs[73]);
    info.eval->relinearize_inplace(regs[73], rk);
    regs[74] = locs["b:0,1"];
    regs[75] = locs["a:1,3"];
    info.eval->multiply(regs[74], regs[75], regs[76]);
    info.eval->relinearize_inplace(regs[76], rk);
    info.eval->add(regs[73], regs[76], regs[77]);
    regs[78] = locs["b:1,0"];
    info.eval->multiply(regs[78], locs["a:2,2"], regs[79]);
    info.eval->relinearize_inplace(regs[79], rk);
    info.eval->add(regs[77], regs[79], regs[80]);
    regs[81] = locs["b:1,1"];
    info.eval->multiply(regs[81], locs["a:2,3"], regs[82]);
    info.eval->relinearize_inplace(regs[82], rk);
    info.eval->add(regs[80], regs[82], regs[83]);
    regs[84] = locs["b:0,0"];
    info.eval->multiply(regs[84], locs["a:2,0"], regs[85]);
    info.eval->relinearize_inplace(regs[85], rk);
    regs[86] = locs["b:0,1"];
    info.eval->multiply(regs[86], locs["a:2,1"], regs[87]);
    info.eval->relinearize_inplace(regs[87], rk);
    info.eval->add(regs[85], regs[87], regs[88]);
    regs[89] = locs["b:1,0"];
    info.eval->multiply(regs[89], locs["a:3,0"], regs[90]);
    info.eval->relinearize_inplace(regs[90], rk);
    info.eval->add(regs[88], regs[90], regs[91]);
    regs[92] = locs["b:1,1"];
    info.eval->multiply(regs[92], locs["a:3,1"], regs[93]);
    info.eval->relinearize_inplace(regs[93], rk);
    info.eval->add(regs[91], regs[93], regs[94]);
    regs[95] = locs["b:0,0"];
    info.eval->multiply(regs[95], locs["a:2,1"], regs[96]);
    info.eval->relinearize_inplace(regs[96], rk);
    regs[97] = locs["b:0,1"];
    info.eval->multiply(regs[97], locs["a:2,2"], regs[98]);
    info.eval->relinearize_inplace(regs[98], rk);
    info.eval->add(regs[96], regs[98], regs[99]);
    regs[100] = locs["b:1,0"];
    info.eval->multiply(regs[100], locs["a:3,1"], regs[101]);
    info.eval->relinearize_inplace(regs[101], rk);
    info.eval->add(regs[99], regs[101], regs[102]);
    regs[103] = locs["b:1,1"];
    info.eval->multiply(regs[103], locs["a:3,2"], regs[104]);
    info.eval->relinearize_inplace(regs[104], rk);
    info.eval->add(regs[102], regs[104], regs[105]);
    regs[106] = locs["b:0,0"];
    info.eval->multiply(regs[106], locs["a:2,2"], regs[107]);
    info.eval->relinearize_inplace(regs[107], rk);
    regs[108] = locs["b:0,1"];
    info.eval->multiply(regs[108], locs["a:2,3"], regs[109]);
    info.eval->relinearize_inplace(regs[109], rk);
    info.eval->add(regs[107], regs[109], regs[110]);
    regs[111] = locs["b:1,0"];
    info.eval->multiply(regs[111], locs["a:3,2"], regs[112]);
    info.eval->relinearize_inplace(regs[112], rk);
    info.eval->add(regs[110], regs[112], regs[113]);
    regs[114] = locs["b:1,1"];
    info.eval->multiply(regs[114], locs["a:3,3"], regs[115]);
    info.eval->relinearize_inplace(regs[115], rk);
    info.eval->add(regs[113], regs[115], regs[116]);
    std::vector<ctxt> answer;
    answer.push_back(regs[14]);
    answer.push_back(regs[29]);
    answer.push_back(regs[44]);
    answer.push_back(regs[57]);
    answer.push_back(regs[70]);
    answer.push_back(regs[83]);
    answer.push_back(regs[94]);
    answer.push_back(regs[105]);
    answer.push_back(regs[116]);
    return answer;
}
    