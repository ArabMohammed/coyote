
# include "../scalar.hpp"
int ScalarProgram::num_registers()
{
    return 107;
}

std::vector<std::string> ScalarProgram::vars_used()
{
    return {"a:1,2", "a:0,0", "a:0,3", "a:3,0", "a:0,1", "a:3,2", "b:0,1", "a:3,3", "b:1,1", "a:2,2", "a:3,1", "a:1,1", "a:2,3", "a:2,0", "b:0,0", "a:1,0", "a:0,2", "a:2,1", "a:1,3", "b:1,0"};
}

std::vector<ctxt> ScalarProgram::computation(std::map<std::string, ctxt> locs, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    ctxt regs[num_registers()];
    regs[0] = locs["b:0,0"];
    regs[1] = locs["a:0,0"];
    info.eval->multiply(regs[0], regs[1], regs[2]);
    info.eval->relinearize_inplace(regs[2], rk);
    regs[3] = locs["b:0,1"];
    regs[4] = locs["a:0,1"];
    info.eval->multiply(regs[3], regs[4], regs[5]);
    info.eval->relinearize_inplace(regs[5], rk);
    info.eval->add(regs[2], regs[5], regs[6]);
    regs[7] = locs["b:1,0"];
    regs[8] = locs["a:1,0"];
    info.eval->multiply(regs[7], regs[8], regs[9]);
    info.eval->relinearize_inplace(regs[9], rk);
    info.eval->add(regs[6], regs[9], regs[10]);
    regs[11] = locs["b:1,1"];
    regs[12] = locs["a:1,1"];
    info.eval->multiply(regs[11], regs[12], regs[13]);
    info.eval->relinearize_inplace(regs[13], rk);
    info.eval->add(regs[10], regs[13], regs[14]);
    regs[15] = locs["b:0,0"];
    info.eval->multiply(regs[15], regs[4], regs[16]);
    info.eval->relinearize_inplace(regs[16], rk);
    regs[17] = locs["b:0,1"];
    regs[18] = locs["a:0,2"];
    info.eval->multiply(regs[17], regs[18], regs[19]);
    info.eval->relinearize_inplace(regs[19], rk);
    info.eval->add(regs[16], regs[19], regs[20]);
    regs[21] = locs["b:1,0"];
    info.eval->multiply(regs[21], regs[12], regs[22]);
    info.eval->relinearize_inplace(regs[22], rk);
    info.eval->add(regs[20], regs[22], regs[23]);
    regs[24] = locs["b:1,1"];
    regs[25] = locs["a:1,2"];
    info.eval->multiply(regs[24], regs[25], regs[26]);
    info.eval->relinearize_inplace(regs[26], rk);
    info.eval->add(regs[23], regs[26], regs[27]);
    regs[28] = locs["b:0,0"];
    info.eval->multiply(regs[28], regs[18], regs[29]);
    info.eval->relinearize_inplace(regs[29], rk);
    regs[30] = locs["b:0,1"];
    regs[31] = locs["a:0,3"];
    info.eval->multiply(regs[30], regs[31], regs[32]);
    info.eval->relinearize_inplace(regs[32], rk);
    info.eval->add(regs[29], regs[32], regs[33]);
    regs[34] = locs["b:1,0"];
    info.eval->multiply(regs[34], regs[25], regs[35]);
    info.eval->relinearize_inplace(regs[35], rk);
    info.eval->add(regs[33], regs[35], regs[36]);
    regs[37] = locs["b:1,1"];
    regs[38] = locs["a:1,3"];
    info.eval->multiply(regs[37], regs[38], regs[39]);
    info.eval->relinearize_inplace(regs[39], rk);
    info.eval->add(regs[36], regs[39], regs[40]);
    regs[41] = locs["b:0,0"];
    info.eval->multiply(regs[41], regs[8], regs[42]);
    info.eval->relinearize_inplace(regs[42], rk);
    regs[43] = locs["b:0,1"];
    info.eval->multiply(regs[43], regs[12], regs[44]);
    info.eval->relinearize_inplace(regs[44], rk);
    info.eval->add(regs[42], regs[44], regs[45]);
    regs[46] = locs["b:1,0"];
    info.eval->multiply(regs[46], locs["a:2,0"], regs[47]);
    info.eval->relinearize_inplace(regs[47], rk);
    info.eval->add(regs[45], regs[47], regs[48]);
    regs[49] = locs["b:1,1"];
    info.eval->multiply(regs[49], locs["a:2,1"], regs[50]);
    info.eval->relinearize_inplace(regs[50], rk);
    info.eval->add(regs[48], regs[50], regs[51]);
    regs[52] = locs["b:0,0"];
    info.eval->multiply(regs[52], regs[12], regs[53]);
    info.eval->relinearize_inplace(regs[53], rk);
    regs[54] = locs["b:0,1"];
    info.eval->multiply(regs[54], regs[25], regs[55]);
    info.eval->relinearize_inplace(regs[55], rk);
    info.eval->add(regs[53], regs[55], regs[56]);
    regs[57] = locs["b:1,0"];
    info.eval->multiply(regs[57], locs["a:2,1"], regs[58]);
    info.eval->relinearize_inplace(regs[58], rk);
    info.eval->add(regs[56], regs[58], regs[59]);
    regs[60] = locs["b:1,1"];
    info.eval->multiply(regs[60], locs["a:2,2"], regs[61]);
    info.eval->relinearize_inplace(regs[61], rk);
    info.eval->add(regs[59], regs[61], regs[62]);
    regs[63] = locs["b:0,0"];
    info.eval->multiply(regs[63], regs[25], regs[64]);
    info.eval->relinearize_inplace(regs[64], rk);
    regs[65] = locs["b:0,1"];
    info.eval->multiply(regs[65], regs[38], regs[66]);
    info.eval->relinearize_inplace(regs[66], rk);
    info.eval->add(regs[64], regs[66], regs[67]);
    regs[68] = locs["b:1,0"];
    info.eval->multiply(regs[68], locs["a:2,2"], regs[69]);
    info.eval->relinearize_inplace(regs[69], rk);
    info.eval->add(regs[67], regs[69], regs[70]);
    regs[71] = locs["b:1,1"];
    info.eval->multiply(regs[71], locs["a:2,3"], regs[72]);
    info.eval->relinearize_inplace(regs[72], rk);
    info.eval->add(regs[70], regs[72], regs[73]);
    regs[74] = locs["b:0,0"];
    info.eval->multiply(regs[74], locs["a:2,0"], regs[75]);
    info.eval->relinearize_inplace(regs[75], rk);
    regs[76] = locs["b:0,1"];
    info.eval->multiply(regs[76], locs["a:2,1"], regs[77]);
    info.eval->relinearize_inplace(regs[77], rk);
    info.eval->add(regs[75], regs[77], regs[78]);
    regs[79] = locs["b:1,0"];
    info.eval->multiply(regs[79], locs["a:3,0"], regs[80]);
    info.eval->relinearize_inplace(regs[80], rk);
    info.eval->add(regs[78], regs[80], regs[81]);
    regs[82] = locs["b:1,1"];
    info.eval->multiply(regs[82], locs["a:3,1"], regs[83]);
    info.eval->relinearize_inplace(regs[83], rk);
    info.eval->add(regs[81], regs[83], regs[84]);
    regs[85] = locs["b:0,0"];
    info.eval->multiply(regs[85], locs["a:2,1"], regs[86]);
    info.eval->relinearize_inplace(regs[86], rk);
    regs[87] = locs["b:0,1"];
    info.eval->multiply(regs[87], locs["a:2,2"], regs[88]);
    info.eval->relinearize_inplace(regs[88], rk);
    info.eval->add(regs[86], regs[88], regs[89]);
    regs[90] = locs["b:1,0"];
    info.eval->multiply(regs[90], locs["a:3,1"], regs[91]);
    info.eval->relinearize_inplace(regs[91], rk);
    info.eval->add(regs[89], regs[91], regs[92]);
    regs[93] = locs["b:1,1"];
    info.eval->multiply(regs[93], locs["a:3,2"], regs[94]);
    info.eval->relinearize_inplace(regs[94], rk);
    info.eval->add(regs[92], regs[94], regs[95]);
    regs[96] = locs["b:0,0"];
    info.eval->multiply(regs[96], locs["a:2,2"], regs[97]);
    info.eval->relinearize_inplace(regs[97], rk);
    regs[98] = locs["b:0,1"];
    info.eval->multiply(regs[98], locs["a:2,3"], regs[99]);
    info.eval->relinearize_inplace(regs[99], rk);
    info.eval->add(regs[97], regs[99], regs[100]);
    regs[101] = locs["b:1,0"];
    info.eval->multiply(regs[101], locs["a:3,2"], regs[102]);
    info.eval->relinearize_inplace(regs[102], rk);
    info.eval->add(regs[100], regs[102], regs[103]);
    regs[104] = locs["b:1,1"];
    info.eval->multiply(regs[104], locs["a:3,3"], regs[105]);
    info.eval->relinearize_inplace(regs[105], rk);
    info.eval->add(regs[103], regs[105], regs[106]);
    std::vector<ctxt> answer;
    answer.push_back(regs[14]);
    answer.push_back(regs[27]);
    answer.push_back(regs[40]);
    answer.push_back(regs[51]);
    answer.push_back(regs[62]);
    answer.push_back(regs[73]);
    answer.push_back(regs[84]);
    answer.push_back(regs[95]);
    answer.push_back(regs[106]);
    return answer;
}
    