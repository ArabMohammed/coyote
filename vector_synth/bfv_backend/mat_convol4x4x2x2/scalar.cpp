
# include "../scalar.hpp"
int ScalarProgram::num_registers()
{
    return 115;
}

std::vector<std::string> ScalarProgram::vars_used()
{
    return {"a:1,2", "a:3,3", "a:3,2", "a:0,0", "b:0,0", "b:1,1", "b:0,1", "a:1,0", "a:3,0", "a:0,1", "a:0,2", "a:2,2", "a:1,1", "a:2,3", "a:0,3", "a:3,1", "b:1,0", "a:2,1", "a:2,0", "a:1,3"};
}

std::vector<ctxt> ScalarProgram::computation(std::map<std::string, ctxt> locs, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    ctxt regs[num_registers()];
    regs[0] = locs["b:0,0"];
    regs[1] = locs["a:0,0"];
    info.eval->multiply(regs[0], regs[1], regs[2]);
    info.eval->relinearize_inplace(regs[2], rk);
    regs[3] = locs["b:0,1"];
    regs[4] = locs["a:0,1"];
    info.eval->multiply(regs[3], regs[4], regs[5]);
    info.eval->relinearize_inplace(regs[5], rk);
    info.eval->add(regs[2], regs[5], regs[6]);
    regs[7] = locs["b:1,0"];
    regs[8] = locs["a:1,0"];
    info.eval->multiply(regs[7], regs[8], regs[9]);
    info.eval->relinearize_inplace(regs[9], rk);
    info.eval->add(regs[6], regs[9], regs[10]);
    regs[11] = locs["b:1,1"];
    regs[12] = locs["a:1,1"];
    info.eval->multiply(regs[11], regs[12], regs[13]);
    info.eval->relinearize_inplace(regs[13], rk);
    info.eval->add(regs[10], regs[13], regs[14]);
    regs[15] = locs["b:0,0"];
    info.eval->multiply(regs[15], regs[4], regs[16]);
    info.eval->relinearize_inplace(regs[16], rk);
    regs[17] = locs["b:0,1"];
    regs[18] = locs["a:0,2"];
    info.eval->multiply(regs[17], regs[18], regs[19]);
    info.eval->relinearize_inplace(regs[19], rk);
    info.eval->add(regs[16], regs[19], regs[20]);
    regs[21] = locs["b:1,0"];
    info.eval->multiply(regs[21], regs[12], regs[22]);
    info.eval->relinearize_inplace(regs[22], rk);
    info.eval->add(regs[20], regs[22], regs[23]);
    regs[24] = locs["b:1,1"];
    regs[25] = locs["a:1,2"];
    info.eval->multiply(regs[24], regs[25], regs[26]);
    info.eval->relinearize_inplace(regs[26], rk);
    info.eval->add(regs[23], regs[26], regs[27]);
    regs[28] = locs["b:0,0"];
    info.eval->multiply(regs[28], regs[18], regs[29]);
    info.eval->relinearize_inplace(regs[29], rk);
    regs[30] = locs["b:0,1"];
    regs[31] = locs["a:0,3"];
    info.eval->multiply(regs[30], regs[31], regs[32]);
    info.eval->relinearize_inplace(regs[32], rk);
    info.eval->add(regs[29], regs[32], regs[33]);
    regs[34] = locs["b:1,0"];
    info.eval->multiply(regs[34], regs[25], regs[35]);
    info.eval->relinearize_inplace(regs[35], rk);
    info.eval->add(regs[33], regs[35], regs[36]);
    regs[37] = locs["b:1,1"];
    regs[38] = locs["a:1,3"];
    info.eval->multiply(regs[37], regs[38], regs[39]);
    info.eval->relinearize_inplace(regs[39], rk);
    info.eval->add(regs[36], regs[39], regs[40]);
    regs[41] = locs["b:0,0"];
    info.eval->multiply(regs[41], regs[8], regs[42]);
    info.eval->relinearize_inplace(regs[42], rk);
    regs[43] = locs["b:0,1"];
    info.eval->multiply(regs[43], regs[12], regs[44]);
    info.eval->relinearize_inplace(regs[44], rk);
    info.eval->add(regs[42], regs[44], regs[45]);
    regs[46] = locs["b:1,0"];
    regs[47] = locs["a:2,0"];
    info.eval->multiply(regs[46], regs[47], regs[48]);
    info.eval->relinearize_inplace(regs[48], rk);
    info.eval->add(regs[45], regs[48], regs[49]);
    regs[50] = locs["b:1,1"];
    regs[51] = locs["a:2,1"];
    info.eval->multiply(regs[50], regs[51], regs[52]);
    info.eval->relinearize_inplace(regs[52], rk);
    info.eval->add(regs[49], regs[52], regs[53]);
    regs[54] = locs["b:0,0"];
    info.eval->multiply(regs[54], regs[12], regs[55]);
    info.eval->relinearize_inplace(regs[55], rk);
    regs[56] = locs["b:0,1"];
    info.eval->multiply(regs[56], regs[25], regs[57]);
    info.eval->relinearize_inplace(regs[57], rk);
    info.eval->add(regs[55], regs[57], regs[58]);
    regs[59] = locs["b:1,0"];
    info.eval->multiply(regs[59], regs[51], regs[60]);
    info.eval->relinearize_inplace(regs[60], rk);
    info.eval->add(regs[58], regs[60], regs[61]);
    regs[62] = locs["b:1,1"];
    regs[63] = locs["a:2,2"];
    info.eval->multiply(regs[62], regs[63], regs[64]);
    info.eval->relinearize_inplace(regs[64], rk);
    info.eval->add(regs[61], regs[64], regs[65]);
    regs[66] = locs["b:0,0"];
    info.eval->multiply(regs[66], regs[25], regs[67]);
    info.eval->relinearize_inplace(regs[67], rk);
    regs[68] = locs["b:0,1"];
    info.eval->multiply(regs[68], regs[38], regs[69]);
    info.eval->relinearize_inplace(regs[69], rk);
    info.eval->add(regs[67], regs[69], regs[70]);
    regs[71] = locs["b:1,0"];
    info.eval->multiply(regs[71], regs[63], regs[72]);
    info.eval->relinearize_inplace(regs[72], rk);
    info.eval->add(regs[70], regs[72], regs[73]);
    regs[74] = locs["b:1,1"];
    regs[75] = locs["a:2,3"];
    info.eval->multiply(regs[74], regs[75], regs[76]);
    info.eval->relinearize_inplace(regs[76], rk);
    info.eval->add(regs[73], regs[76], regs[77]);
    regs[78] = locs["b:0,0"];
    info.eval->multiply(regs[78], regs[47], regs[79]);
    info.eval->relinearize_inplace(regs[79], rk);
    regs[80] = locs["b:0,1"];
    info.eval->multiply(regs[80], regs[51], regs[81]);
    info.eval->relinearize_inplace(regs[81], rk);
    info.eval->add(regs[79], regs[81], regs[82]);
    regs[83] = locs["b:1,0"];
    regs[84] = locs["a:3,0"];
    info.eval->multiply(regs[83], regs[84], regs[85]);
    info.eval->relinearize_inplace(regs[85], rk);
    info.eval->add(regs[82], regs[85], regs[86]);
    regs[87] = locs["b:1,1"];
    regs[88] = locs["a:3,1"];
    info.eval->multiply(regs[87], regs[88], regs[89]);
    info.eval->relinearize_inplace(regs[89], rk);
    info.eval->add(regs[86], regs[89], regs[90]);
    regs[91] = locs["b:0,0"];
    info.eval->multiply(regs[91], regs[51], regs[92]);
    info.eval->relinearize_inplace(regs[92], rk);
    regs[93] = locs["b:0,1"];
    info.eval->multiply(regs[93], regs[63], regs[94]);
    info.eval->relinearize_inplace(regs[94], rk);
    info.eval->add(regs[92], regs[94], regs[95]);
    regs[96] = locs["b:1,0"];
    info.eval->multiply(regs[96], regs[88], regs[97]);
    info.eval->relinearize_inplace(regs[97], rk);
    info.eval->add(regs[95], regs[97], regs[98]);
    regs[99] = locs["b:1,1"];
    regs[100] = locs["a:3,2"];
    info.eval->multiply(regs[99], regs[100], regs[101]);
    info.eval->relinearize_inplace(regs[101], rk);
    info.eval->add(regs[98], regs[101], regs[102]);
    regs[103] = locs["b:0,0"];
    info.eval->multiply(regs[103], regs[63], regs[104]);
    info.eval->relinearize_inplace(regs[104], rk);
    regs[105] = locs["b:0,1"];
    info.eval->multiply(regs[105], regs[75], regs[106]);
    info.eval->relinearize_inplace(regs[106], rk);
    info.eval->add(regs[104], regs[106], regs[107]);
    regs[108] = locs["b:1,0"];
    info.eval->multiply(regs[108], regs[100], regs[109]);
    info.eval->relinearize_inplace(regs[109], rk);
    info.eval->add(regs[107], regs[109], regs[110]);
    regs[111] = locs["b:1,1"];
    regs[112] = locs["a:3,3"];
    info.eval->multiply(regs[111], regs[112], regs[113]);
    info.eval->relinearize_inplace(regs[113], rk);
    info.eval->add(regs[110], regs[113], regs[114]);
    std::vector<ctxt> answer;
    answer.push_back(regs[14]);
    answer.push_back(regs[27]);
    answer.push_back(regs[40]);
    answer.push_back(regs[53]);
    answer.push_back(regs[65]);
    answer.push_back(regs[77]);
    answer.push_back(regs[90]);
    answer.push_back(regs[102]);
    answer.push_back(regs[114]);
    return answer;
}
    