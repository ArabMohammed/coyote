
# include "../scalar.hpp"
int ScalarProgram::num_registers()
{
    return 99;
}

std::vector<std::string> ScalarProgram::vars_used()
{
    return {"b:1,2", "b:1,0", "b:0,2", "b:2,2", "a:1,1", "b:2,1", "a:1,2", "a:2,0", "a:0,0", "b:2,0", "b:0,1", "b:1,1", "a:2,2", "a:0,2", "a:1,0", "b:0,0", "a:2,1", "a:0,1"};
}

std::vector<ctxt> ScalarProgram::computation(std::map<std::string, ctxt> locs, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    ctxt regs[num_registers()];
    regs[0] = locs["a:0,0"];
    regs[1] = locs["b:0,0"];
    info.eval->multiply(regs[0], regs[1], regs[2]);
    info.eval->relinearize_inplace(regs[2], rk);
    regs[3] = locs["a:0,1"];
    regs[4] = locs["b:1,0"];
    info.eval->multiply(regs[3], regs[4], regs[5]);
    info.eval->relinearize_inplace(regs[5], rk);
    info.eval->add(regs[2], regs[5], regs[6]);
    regs[7] = locs["a:0,2"];
    regs[8] = locs["b:2,0"];
    info.eval->multiply(regs[7], regs[8], regs[9]);
    info.eval->relinearize_inplace(regs[9], rk);
    info.eval->add(regs[6], regs[9], regs[10]);
    regs[11] = locs["a:0,0"];
    regs[12] = locs["b:0,1"];
    info.eval->multiply(regs[11], regs[12], regs[13]);
    info.eval->relinearize_inplace(regs[13], rk);
    regs[14] = locs["a:0,1"];
    regs[15] = locs["b:1,1"];
    info.eval->multiply(regs[14], regs[15], regs[16]);
    info.eval->relinearize_inplace(regs[16], rk);
    info.eval->add(regs[13], regs[16], regs[17]);
    regs[18] = locs["a:0,2"];
    regs[19] = locs["b:2,1"];
    info.eval->multiply(regs[18], regs[19], regs[20]);
    info.eval->relinearize_inplace(regs[20], rk);
    info.eval->add(regs[17], regs[20], regs[21]);
    regs[22] = locs["a:0,0"];
    regs[23] = locs["b:0,2"];
    info.eval->multiply(regs[22], regs[23], regs[24]);
    info.eval->relinearize_inplace(regs[24], rk);
    regs[25] = locs["a:0,1"];
    regs[26] = locs["b:1,2"];
    info.eval->multiply(regs[25], regs[26], regs[27]);
    info.eval->relinearize_inplace(regs[27], rk);
    info.eval->add(regs[24], regs[27], regs[28]);
    regs[29] = locs["a:0,2"];
    regs[30] = locs["b:2,2"];
    info.eval->multiply(regs[29], regs[30], regs[31]);
    info.eval->relinearize_inplace(regs[31], rk);
    info.eval->add(regs[28], regs[31], regs[32]);
    regs[33] = locs["a:1,0"];
    regs[34] = locs["b:0,0"];
    info.eval->multiply(regs[33], regs[34], regs[35]);
    info.eval->relinearize_inplace(regs[35], rk);
    regs[36] = locs["a:1,1"];
    regs[37] = locs["b:1,0"];
    info.eval->multiply(regs[36], regs[37], regs[38]);
    info.eval->relinearize_inplace(regs[38], rk);
    info.eval->add(regs[35], regs[38], regs[39]);
    regs[40] = locs["a:1,2"];
    regs[41] = locs["b:2,0"];
    info.eval->multiply(regs[40], regs[41], regs[42]);
    info.eval->relinearize_inplace(regs[42], rk);
    info.eval->add(regs[39], regs[42], regs[43]);
    regs[44] = locs["a:1,0"];
    regs[45] = locs["b:0,1"];
    info.eval->multiply(regs[44], regs[45], regs[46]);
    info.eval->relinearize_inplace(regs[46], rk);
    regs[47] = locs["a:1,1"];
    regs[48] = locs["b:1,1"];
    info.eval->multiply(regs[47], regs[48], regs[49]);
    info.eval->relinearize_inplace(regs[49], rk);
    info.eval->add(regs[46], regs[49], regs[50]);
    regs[51] = locs["a:1,2"];
    regs[52] = locs["b:2,1"];
    info.eval->multiply(regs[51], regs[52], regs[53]);
    info.eval->relinearize_inplace(regs[53], rk);
    info.eval->add(regs[50], regs[53], regs[54]);
    regs[55] = locs["a:1,0"];
    regs[56] = locs["b:0,2"];
    info.eval->multiply(regs[55], regs[56], regs[57]);
    info.eval->relinearize_inplace(regs[57], rk);
    regs[58] = locs["a:1,1"];
    regs[59] = locs["b:1,2"];
    info.eval->multiply(regs[58], regs[59], regs[60]);
    info.eval->relinearize_inplace(regs[60], rk);
    info.eval->add(regs[57], regs[60], regs[61]);
    regs[62] = locs["a:1,2"];
    regs[63] = locs["b:2,2"];
    info.eval->multiply(regs[62], regs[63], regs[64]);
    info.eval->relinearize_inplace(regs[64], rk);
    info.eval->add(regs[61], regs[64], regs[65]);
    regs[66] = locs["a:2,0"];
    regs[67] = locs["b:0,0"];
    info.eval->multiply(regs[66], regs[67], regs[68]);
    info.eval->relinearize_inplace(regs[68], rk);
    regs[69] = locs["a:2,1"];
    regs[70] = locs["b:1,0"];
    info.eval->multiply(regs[69], regs[70], regs[71]);
    info.eval->relinearize_inplace(regs[71], rk);
    info.eval->add(regs[68], regs[71], regs[72]);
    regs[73] = locs["a:2,2"];
    regs[74] = locs["b:2,0"];
    info.eval->multiply(regs[73], regs[74], regs[75]);
    info.eval->relinearize_inplace(regs[75], rk);
    info.eval->add(regs[72], regs[75], regs[76]);
    regs[77] = locs["a:2,0"];
    regs[78] = locs["b:0,1"];
    info.eval->multiply(regs[77], regs[78], regs[79]);
    info.eval->relinearize_inplace(regs[79], rk);
    regs[80] = locs["a:2,1"];
    regs[81] = locs["b:1,1"];
    info.eval->multiply(regs[80], regs[81], regs[82]);
    info.eval->relinearize_inplace(regs[82], rk);
    info.eval->add(regs[79], regs[82], regs[83]);
    regs[84] = locs["a:2,2"];
    regs[85] = locs["b:2,1"];
    info.eval->multiply(regs[84], regs[85], regs[86]);
    info.eval->relinearize_inplace(regs[86], rk);
    info.eval->add(regs[83], regs[86], regs[87]);
    regs[88] = locs["a:2,0"];
    regs[89] = locs["b:0,2"];
    info.eval->multiply(regs[88], regs[89], regs[90]);
    info.eval->relinearize_inplace(regs[90], rk);
    regs[91] = locs["a:2,1"];
    regs[92] = locs["b:1,2"];
    info.eval->multiply(regs[91], regs[92], regs[93]);
    info.eval->relinearize_inplace(regs[93], rk);
    info.eval->add(regs[90], regs[93], regs[94]);
    regs[95] = locs["a:2,2"];
    regs[96] = locs["b:2,2"];
    info.eval->multiply(regs[95], regs[96], regs[97]);
    info.eval->relinearize_inplace(regs[97], rk);
    info.eval->add(regs[94], regs[97], regs[98]);
    std::vector<ctxt> answer;
    answer.push_back(regs[10]);
    answer.push_back(regs[21]);
    answer.push_back(regs[32]);
    answer.push_back(regs[43]);
    answer.push_back(regs[54]);
    answer.push_back(regs[65]);
    answer.push_back(regs[76]);
    answer.push_back(regs[87]);
    answer.push_back(regs[98]);
    return answer;
}
    