
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "000000000000100000000000000000000100001000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000100000000000000010000000110000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000000000000000000000000000100000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000000000000000000000010000000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000010000000100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000100001100000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000100100100000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000100001100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000010000001000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000010000000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000100000000000000000001000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000100000000000000000000000100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000100000000000000000000001100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000000001001110000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000100000000000000010000001100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000000100000000000000000100101000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000000000000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000100000000000000010000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000100000000000000000000100000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000100001000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(36);
    ts[0] = encrypt_input("111100000000000111111101000011110011110000011011111100111101111101111100011110110101111111110111111111011010111111111011111111101111111011111111111101111111011111101111111110111110001101100011111011111000001111101111100000011111110110111110111111101111111111111111111111", info);
    ts[2] = encrypt_input("000000000000000000000000000000000000110101111100111110000001111011011000001111100000011111000000000000000000011011111100000000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[29];
    ctxt ss[50];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -79, gk, ss[0]); // __s0 = __v0 >> 79
    info.eval->rotate_rows(vs[0], -2, gk, ss[1]); // __s1 = __v0 >> 2
    info.eval->rotate_rows(vs[0], -81, gk, ss[2]); // __s2 = __v0 >> 81
    info.eval->rotate_rows(vs[0], -44, gk, ss[3]); // __s3 = __v0 >> 44
    info.eval->rotate_rows(vs[0], -46, gk, ss[4]); // __s4 = __v0 >> 46
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -88, gk, ss[5]); // __s5 = __v1 >> 88
    info.eval->rotate_rows(vs[1], -2, gk, ss[6]); // __s6 = __v1 >> 2
    info.eval->rotate_rows(vs[1], -80, gk, ss[7]); // __s7 = __v1 >> 80
    info.eval->rotate_rows(vs[1], -5, gk, ss[8]); // __s8 = __v1 >> 5
    info.eval->rotate_rows(vs[1], -6, gk, ss[9]); // __s9 = __v1 >> 6
    info.eval->rotate_rows(vs[1], -71, gk, ss[10]); // __s10 = __v1 >> 71
    info.eval->rotate_rows(vs[1], -53, gk, ss[11]); // __s11 = __v1 >> 53
    info.eval->rotate_rows(vs[1], -1, gk, ss[12]); // __s12 = __v1 >> 1
    info.eval->rotate_rows(vs[1], -68, gk, ss[13]); // __s13 = __v1 >> 68
    info.eval->rotate_rows(vs[1], -83, gk, ss[14]); // __s14 = __v1 >> 83
    info.eval->rotate_rows(vs[1], -62, gk, ss[15]); // __s15 = __v1 >> 62
    info.eval->rotate_rows(vs[1], -81, gk, ss[16]); // __s16 = __v1 >> 81
    info.eval->rotate_rows(vs[1], -69, gk, ss[17]); // __s17 = __v1 >> 69
    info.eval->rotate_rows(vs[1], -77, gk, ss[18]); // __s18 = __v1 >> 77
    info.eval->rotate_rows(vs[1], -79, gk, ss[19]); // __s19 = __v1 >> 79
    info.eval->rotate_rows(vs[1], -75, gk, ss[20]); // __s20 = __v1 >> 75
    info.eval->rotate_rows(vs[1], -84, gk, ss[21]); // __s21 = __v1 >> 84
    info.eval->rotate_rows(vs[1], -54, gk, ss[22]); // __s22 = __v1 >> 54
    info.eval->rotate_rows(vs[1], -60, gk, ss[23]); // __s23 = __v1 >> 60
    info.eval->rotate_rows(vs[1], -78, gk, ss[24]); // __s24 = __v1 >> 78
    info.eval->rotate_rows(vs[1], -48, gk, ss[25]); // __s25 = __v1 >> 48
    info.eval->rotate_rows(vs[1], -72, gk, ss[26]); // __s26 = __v1 >> 72
    info.eval->rotate_rows(vs[1], -47, gk, ss[27]); // __s27 = __v1 >> 47
    info.eval->rotate_rows(vs[1], -29, gk, ss[28]); // __s28 = __v1 >> 29
    info.eval->rotate_rows(vs[1], -9, gk, ss[29]); // __s29 = __v1 >> 9
    info.eval->rotate_rows(vs[1], -51, gk, ss[30]); // __s30 = __v1 >> 51
    info.eval->rotate_rows(vs[1], -52, gk, ss[31]); // __s31 = __v1 >> 52
    info.eval->rotate_rows(vs[1], -27, gk, ss[32]); // __s32 = __v1 >> 27
    info.eval->rotate_rows(vs[1], -42, gk, ss[33]); // __s33 = __v1 >> 42
    info.eval->rotate_rows(vs[1], -44, gk, ss[34]); // __s34 = __v1 >> 44
    info.eval->rotate_rows(vs[1], -34, gk, ss[35]); // __s35 = __v1 >> 34
    info.eval->rotate_rows(vs[1], -46, gk, ss[36]); // __s36 = __v1 >> 46
    
    // __t4 = blend(__s0@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s3@000000000000100000000000000000000100001100000000000000000000000000000000000000000000000000, __s4@000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000, __v0@000000000000000000000000000000000000100001100000000000000000000000000000000000000000000000)
    ctxt t4_1, t4_2, t4_3, t4_4;
    info.eval->multiply_plain(ss[0], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[3], bits["000000000000100000000000000000000100001100000000000000000000000000000000000000000000000000"], t4_2);
    info.eval->multiply_plain(ss[4], bits["000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000"], t4_3);
    info.eval->multiply_plain(vs[0], bits["000000000000000000000000000000000000100001100000000000000000000000000000000000000000000000"], t4_4);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4}, ts[4]);
    
    
    // __t5 = blend(__s28@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s25@000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000, __s22@000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000, __s17@000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000, __v1@000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000, __s36@000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000, __s6@000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000, __s14@000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000, __s8@000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9;
    info.eval->multiply_plain(ss[28], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[25], bits["000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[22], bits["000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000"], t5_3);
    info.eval->multiply_plain(ss[17], bits["000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"], t5_4);
    info.eval->multiply_plain(vs[1], bits["000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000"], t5_5);
    info.eval->multiply_plain(ss[36], bits["000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t5_6);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000"], t5_7);
    info.eval->multiply_plain(ss[14], bits["000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000"], t5_8);
    info.eval->multiply_plain(ss[8], bits["000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t5_9);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9}, ts[5]);
    
    info.eval->multiply(ts[4], ts[5], vs[2]); // __v2 = __t4 * __t5
    info.eval->relinearize_inplace(vs[2], rk);
    
    // __t6 = blend(__v0@000000000000100000000000000000000100001000010000000000000000000000000000000000000000000000, __s1@000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000, __s3@000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000, __s2@000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    ctxt t6_1, t6_2, t6_3, t6_4;
    info.eval->multiply_plain(vs[0], bits["000000000000100000000000000000000100001000010000000000000000000000000000000000000000000000"], t6_1);
    info.eval->multiply_plain(ss[1], bits["000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000"], t6_3);
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t6_4);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4}, ts[6]);
    
    
    // __t7 = blend(__s22@000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000, __s23@000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000, __s20@000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000, __s34@000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000, __s6@000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000, __s30@000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000, __s31@000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000)
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    info.eval->multiply_plain(ss[22], bits["000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[23], bits["000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[20], bits["000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[34], bits["000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000"], t7_4);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t7_5);
    info.eval->multiply_plain(ss[30], bits["000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t7_6);
    info.eval->multiply_plain(ss[31], bits["000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000"], t7_7);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7}, ts[7]);
    
    info.eval->multiply(ts[6], ts[7], vs[3]); // __v3 = __t6 * __t7
    info.eval->relinearize_inplace(vs[3], rk);
    info.eval->add(vs[3], vs[2], vs[4]); // __v4 = __v3 + __v2
    
    // __t8 = blend(__s3@100000000000000000000000000000000010000000010000000000000000000000000000000000000000000000, __s2@000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000, __s0@000000000000000000000000000000000100100100000000000000000000000000000000000000000000000000, __s1@000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    ctxt t8_1, t8_2, t8_3, t8_4;
    info.eval->multiply_plain(ss[3], bits["100000000000000000000000000000000010000000010000000000000000000000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[2], bits["000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000100100100000000000000000000000000000000000000000000000000"], t8_3);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t8_4);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4}, ts[8]);
    
    
    // __t9 = blend(__s11@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s13@000000000000000000100000000000000000000100000000000000000000000000000000000000000000000000, __s14@000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000, __s33@000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000, __s19@000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000, __s24@000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000, __s9@000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000)
    ctxt t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;
    info.eval->multiply_plain(ss[11], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[13], bits["000000000000000000100000000000000000000100000000000000000000000000000000000000000000000000"], t9_2);
    info.eval->multiply_plain(ss[14], bits["000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"], t9_3);
    info.eval->multiply_plain(ss[33], bits["000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000"], t9_4);
    info.eval->multiply_plain(ss[19], bits["000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000"], t9_5);
    info.eval->multiply_plain(ss[24], bits["000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t9_6);
    info.eval->multiply_plain(ss[9], bits["000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000"], t9_7);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7}, ts[9]);
    
    info.eval->multiply(ts[8], ts[9], vs[5]); // __v5 = __t8 * __t9
    info.eval->relinearize_inplace(vs[5], rk);
    
    // __t10 = blend(__s0@000000000000100000000000000000000000001001110000000000000000000000000000000000000000000000, __v0@000000000000000000100000000000000010000000000000000000000000000000000000000000000000000000)
    ctxt t10_1, t10_2;
    info.eval->multiply_plain(ss[0], bits["000000000000100000000000000000000000001001110000000000000000000000000000000000000000000000"], t10_1);
    info.eval->multiply_plain(vs[0], bits["000000000000000000100000000000000010000000000000000000000000000000000000000000000000000000"], t10_2);
    info.eval->add(t10_1, t10_2, ts[10]);
    
    
    // __t11 = blend(__s15@000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000, __s32@000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000, __s5@000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000, __s16@000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000, __s12@000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000, __s21@000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000, __s26@000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000)
    ctxt t11_1, t11_2, t11_3, t11_4, t11_5, t11_6, t11_7;
    info.eval->multiply_plain(ss[15], bits["000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000"], t11_1);
    info.eval->multiply_plain(ss[32], bits["000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000"], t11_2);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000"], t11_3);
    info.eval->multiply_plain(ss[16], bits["000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t11_4);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000"], t11_5);
    info.eval->multiply_plain(ss[21], bits["000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t11_6);
    info.eval->multiply_plain(ss[26], bits["000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000"], t11_7);
    info.eval->add_many({t11_1, t11_2, t11_3, t11_4, t11_5, t11_6, t11_7}, ts[11]);
    
    info.eval->multiply(ts[00], ts[01], vs[6]); // __v6 = __t00 * __t01
    info.eval->relinearize_inplace(vs[6], rk);
    
    // __t12 = blend(__v3@000000000000100000000000000000000000000000010000000000000000000000000000000000000000000000, __v4@000000000000000000100000000000000000001000000000000000000000000000000000000000000000000000, __v6@000000000000000000000000000000000010000000100000000000000000000000000000000000000000000000)
    ctxt t12_1, t12_2, t12_3;
    info.eval->multiply_plain(vs[3], bits["000000000000100000000000000000000000000000010000000000000000000000000000000000000000000000"], t12_1);
    info.eval->multiply_plain(vs[4], bits["000000000000000000100000000000000000001000000000000000000000000000000000000000000000000000"], t12_2);
    info.eval->multiply_plain(vs[6], bits["000000000000000000000000000000000010000000100000000000000000000000000000000000000000000000"], t12_3);
    info.eval->add_many({t12_1, t12_2, t12_3}, ts[12]);
    
    
    // __t13 = blend(__v2@000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000, __v5@000000000000000000100000000000000010000000110000000000000000000000000000000000000000000000, __v6@000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000)
    ctxt t13_1, t13_2, t13_3;
    info.eval->multiply_plain(vs[2], bits["000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000"], t13_1);
    info.eval->multiply_plain(vs[5], bits["000000000000000000100000000000000010000000110000000000000000000000000000000000000000000000"], t13_2);
    info.eval->multiply_plain(vs[6], bits["000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t13_3);
    info.eval->add_many({t13_1, t13_2, t13_3}, ts[13]);
    
    info.eval->add(ts[02], ts[03], vs[7]); // __v7 = __t02 + __t03
    info.eval->rotate_rows(vs[7], -53, gk, ss[37]); // __s37 = __v7 >> 53
    
    // __t14 = blend(__v0@100000000000000000000000000000000000000100000000000000000000000000000000000000000000000000, __s3@000000000000000000100000000000000000000001100000000000000000000000000000000000000000000000, __s0@000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000)
    ctxt t14_1, t14_2, t14_3;
    info.eval->multiply_plain(vs[0], bits["100000000000000000000000000000000000000100000000000000000000000000000000000000000000000000"], t14_1);
    info.eval->multiply_plain(ss[3], bits["000000000000000000100000000000000000000001100000000000000000000000000000000000000000000000"], t14_2);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000"], t14_3);
    info.eval->add_many({t14_1, t14_2, t14_3}, ts[14]);
    
    
    // __t15 = blend(__s29@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s10@000000000000000000100000000000000000000000100000000000000000000000000000000000000000000000, __s18@000000000000000000000000000000000010000001000000000000000000000000000000000000000000000000, __s25@000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000)
    ctxt t15_1, t15_2, t15_3, t15_4;
    info.eval->multiply_plain(ss[29], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t15_1);
    info.eval->multiply_plain(ss[10], bits["000000000000000000100000000000000000000000100000000000000000000000000000000000000000000000"], t15_2);
    info.eval->multiply_plain(ss[18], bits["000000000000000000000000000000000010000001000000000000000000000000000000000000000000000000"], t15_3);
    info.eval->multiply_plain(ss[25], bits["000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000"], t15_4);
    info.eval->add_many({t15_1, t15_2, t15_3, t15_4}, ts[15]);
    
    info.eval->multiply(ts[04], ts[05], vs[8]); // __v8 = __t04 * __t05
    info.eval->relinearize_inplace(vs[8], rk);
    
    // __t16 = blend(__v8@100000000000000000000000000000000000000100000000000000000000000000000000000000000000000000, __v7@000000000000100000000000000000000010000000010000000000000000000000000000000000000000000000, __v6@000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000, __v2@000000000000000000000000000000000000100001000000000000000000000000000000000000000000000000, __v4@000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    ctxt t16_1, t16_2, t16_3, t16_4, t16_5;
    info.eval->multiply_plain(vs[8], bits["100000000000000000000000000000000000000100000000000000000000000000000000000000000000000000"], t16_1);
    info.eval->multiply_plain(vs[7], bits["000000000000100000000000000000000010000000010000000000000000000000000000000000000000000000"], t16_2);
    info.eval->multiply_plain(vs[6], bits["000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000"], t16_3);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000000100001000000000000000000000000000000000000000000000000"], t16_4);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t16_5);
    info.eval->add_many({t16_1, t16_2, t16_3, t16_4, t16_5}, ts[16]);
    
    
    // __t17 = blend(__v5@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v6@000000000000100000000000000000000000000000010000000000000000000000000000000000000000000000, __v8@000000000000000000100000000000000010000001100000000000000000000000000000000000000000000000, __v3@000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000, __v2@000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000)
    ctxt t17_1, t17_2, t17_3, t17_4, t17_5;
    info.eval->multiply_plain(vs[5], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t17_1);
    info.eval->multiply_plain(vs[6], bits["000000000000100000000000000000000000000000010000000000000000000000000000000000000000000000"], t17_2);
    info.eval->multiply_plain(vs[8], bits["000000000000000000100000000000000010000001100000000000000000000000000000000000000000000000"], t17_3);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000"], t17_4);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000"], t17_5);
    info.eval->add_many({t17_1, t17_2, t17_3, t17_4, t17_5}, ts[17]);
    
    info.eval->add(ts[06], ts[07], vs[9]); // __v9 = __t06 + __t07
    info.eval->rotate_rows(vs[9], -79, gk, ss[38]); // __s38 = __v9 >> 79
    info.eval->rotate_rows(vs[9], -76, gk, ss[39]); // __s39 = __v9 >> 76
    info.eval->rotate_rows(vs[9], -48, gk, ss[40]); // __s40 = __v9 >> 48
    
    // __t18 = blend(__s0@000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000, __s4@000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    ctxt t18_1, t18_2;
    info.eval->multiply_plain(ss[0], bits["000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000"], t18_1);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t18_2);
    info.eval->add(t18_1, t18_2, ts[18]);
    
    
    // __t19 = blend(__s27@000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000, __s6@000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    ctxt t19_1, t19_2;
    info.eval->multiply_plain(ss[27], bits["000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000"], t19_1);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t19_2);
    info.eval->add(t19_1, t19_2, ts[19]);
    
    info.eval->multiply(ts[08], ts[09], vs[10]); // __v10 = __t08 * __t09
    info.eval->relinearize_inplace(vs[10], rk);
    
    // __t20 = blend(__v9@100000000000000000100000000000000000100101000000000000000000000000000000000000000000000000, __v4@000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000, __v7@000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    ctxt t20_1, t20_2, t20_3;
    info.eval->multiply_plain(vs[9], bits["100000000000000000100000000000000000100101000000000000000000000000000000000000000000000000"], t20_1);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"], t20_2);
    info.eval->multiply_plain(vs[7], bits["000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t20_3);
    info.eval->add_many({t20_1, t20_2, t20_3}, ts[20]);
    
    
    // __t21 = blend(__v2@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v10@000000000000000000100000000000000000000000100000000000000000000000000000000000000000000000, __v5@000000000000000000000000000000000100100100000000000000000000000000000000000000000000000000, __v6@000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000)
    ctxt t21_1, t21_2, t21_3, t21_4;
    info.eval->multiply_plain(vs[2], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t21_1);
    info.eval->multiply_plain(vs[10], bits["000000000000000000100000000000000000000000100000000000000000000000000000000000000000000000"], t21_2);
    info.eval->multiply_plain(vs[5], bits["000000000000000000000000000000000100100100000000000000000000000000000000000000000000000000"], t21_3);
    info.eval->multiply_plain(vs[6], bits["000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000"], t21_4);
    info.eval->add_many({t21_1, t21_2, t21_3, t21_4}, ts[21]);
    
    info.eval->add(ts[20], ts[21], vs[11]); // __v11 = __t20 + __t21
    info.eval->rotate_rows(vs[11], -1, gk, ss[41]); // __s41 = __v11 >> 1
    info.eval->rotate_rows(vs[11], -83, gk, ss[42]); // __s42 = __v11 >> 83
    info.eval->rotate_rows(vs[11], -55, gk, ss[43]); // __s43 = __v11 >> 55
    info.eval->rotate_rows(vs[11], -77, gk, ss[44]); // __s44 = __v11 >> 77
    info.eval->rotate_rows(vs[11], -75, gk, ss[45]); // __s45 = __v11 >> 75
    
    // __t22 = blend(__v11@000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000, __v9@000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    ctxt t22_1, t22_2;
    info.eval->multiply_plain(vs[11], bits["000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000"], t22_1);
    info.eval->multiply_plain(vs[9], bits["000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t22_2);
    info.eval->add(t22_1, t22_2, ts[22]);
    
    
    // __t23 = blend(__v7@000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000, __v11@000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    ctxt t23_1, t23_2;
    info.eval->multiply_plain(vs[7], bits["000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000"], t23_1);
    info.eval->multiply_plain(vs[11], bits["000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t23_2);
    info.eval->add(t23_1, t23_2, ts[23]);
    
    info.eval->multiply(ts[22], ts[23], vs[12]); // __v12 = __t22 * __t23
    info.eval->relinearize_inplace(vs[12], rk);
    info.eval->rotate_rows(vs[12], -2, gk, ss[46]); // __s46 = __v12 >> 2
    info.eval->rotate_rows(vs[12], -68, gk, ss[47]); // __s47 = __v12 >> 68
    info.eval->multiply(ss[3], ss[35], vs[13]); // __v13 = __s3 * __s35
    info.eval->relinearize_inplace(vs[13], rk);
    
    // __t24 = blend(__s37@010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s4@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t24_1, t24_2;
    info.eval->multiply_plain(ss[37], bits["010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t24_1);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t24_2);
    info.eval->add(t24_1, t24_2, ts[24]);
    
    
    // __t25 = blend(__s40@010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s35@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t25_1, t25_2;
    info.eval->multiply_plain(ss[40], bits["010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t25_1);
    info.eval->multiply_plain(ss[35], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t25_2);
    info.eval->add(t25_1, t25_2, ts[25]);
    
    info.eval->multiply(ts[24], ts[25], vs[14]); // __v14 = __t24 * __t25
    info.eval->relinearize_inplace(vs[14], rk);
    info.eval->multiply(ss[1], ss[7], vs[15]); // __v15 = __s1 * __s7
    info.eval->relinearize_inplace(vs[15], rk);
    info.eval->multiply(ss[2], ss[17], vs[16]); // __v16 = __s2 * __s17
    info.eval->relinearize_inplace(vs[16], rk);
    
    // __t26 = blend(__s46@000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000, __v15@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t26_1, t26_2;
    info.eval->multiply_plain(ss[46], bits["000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000"], t26_1);
    info.eval->multiply_plain(vs[15], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t26_2);
    info.eval->add(t26_1, t26_2, ts[26]);
    
    
    // __t27 = blend(__s47@000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000, __v14@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t27_1, t27_2;
    info.eval->multiply_plain(ss[47], bits["000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000"], t27_1);
    info.eval->multiply_plain(vs[14], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t27_2);
    info.eval->add(t27_1, t27_2, ts[27]);
    
    info.eval->add(ts[26], ts[27], vs[17]); // __v17 = __t26 + __t27
    
    // __t28 = blend(__s43@010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v0@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t28_1, t28_2;
    info.eval->multiply_plain(ss[43], bits["010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t28_1);
    info.eval->multiply_plain(vs[0], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t28_2);
    info.eval->add(t28_1, t28_2, ts[28]);
    
    
    // __t29 = blend(__s41@010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s7@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t29_1, t29_2;
    info.eval->multiply_plain(ss[41], bits["010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t29_1);
    info.eval->multiply_plain(ss[7], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t29_2);
    info.eval->add(t29_1, t29_2, ts[29]);
    
    info.eval->multiply(ts[28], ts[29], vs[18]); // __v18 = __t28 * __t29
    info.eval->relinearize_inplace(vs[18], rk);
    
    // __t30 = blend(__v14@010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v18@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t30_1, t30_2;
    info.eval->multiply_plain(vs[14], bits["010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t30_1);
    info.eval->multiply_plain(vs[18], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t30_2);
    info.eval->add(t30_1, t30_2, ts[30]);
    
    
    // __t31 = blend(__v18@010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v13@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t31_1, t31_2;
    info.eval->multiply_plain(vs[18], bits["010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t31_1);
    info.eval->multiply_plain(vs[13], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t31_2);
    info.eval->add(t31_1, t31_2, ts[31]);
    
    info.eval->multiply(ss[0], ss[17], vs[20]); // __v20 = __s0 * __s17
    info.eval->relinearize_inplace(vs[20], rk);
    info.eval->add(vs[11], vs[20], vs[21]); // __v21 = __v11 + __v20
    
    // __t32 = blend(__s38@010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v21@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t32_1, t32_2;
    info.eval->multiply_plain(ss[38], bits["010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t32_1);
    info.eval->multiply_plain(vs[21], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t32_2);
    info.eval->add(t32_1, t32_2, ts[32]);
    
    
    // __t33 = blend(__v11@010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s42@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t33_1, t33_2;
    info.eval->multiply_plain(vs[11], bits["010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t33_1);
    info.eval->multiply_plain(ss[42], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t33_2);
    info.eval->add(t33_1, t33_2, ts[33]);
    
    info.eval->rotate_rows(vs[12], -25, gk, ss[48]); // __s48 = __v12 >> 25
    info.eval->add(vs[17], vs[16], vs[23]); // __v23 = __v17 + __v16
    info.eval->multiply(vs[23], ss[45], vs[24]); // __v24 = __v23 * __s45
    info.eval->relinearize_inplace(vs[24], rk);
    info.eval->add(vs[12], vs[24], vs[25]); // __v25 = __v12 + __v24
    
    // __t34 = blend(__s39@000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000, __s44@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t34_1, t34_2;
    info.eval->multiply_plain(ss[39], bits["000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000"], t34_1);
    info.eval->multiply_plain(ss[44], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t34_2);
    info.eval->add(t34_1, t34_2, ts[34]);
    
    
    // __t35 = blend(__v17@000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000, __v25@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000)
    ctxt t35_1, t35_2;
    info.eval->multiply_plain(vs[17], bits["000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000"], t35_1);
    info.eval->multiply_plain(vs[25], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t35_2);
    info.eval->add(t35_1, t35_2, ts[35]);
    
    info.eval->rotate_rows(vs[14], -6, gk, ss[49]); // __s49 = __v14 >> 6
    info.eval->sub(ss[49], vs[14], vs[27]); // __v27 = __s49 - __v14
    info.eval->add(vs[27], ss[48], vs[28]); // __v28 = __v27 + __s48
    return vs[28];
}
    