
# include "../scalar.hpp"
int ScalarProgram::num_registers()
{
    return 143;
}

std::vector<std::string> ScalarProgram::vars_used()
{
    return {"b:1,1", "a:1,2", "b:0,0", "a:0,1", "a:0,0", "b:0,1", "a:2,1", "b:2,1", "a:2,0", "b:2,2", "a:2,2", "a:1,1", "b:1,0", "a:1,0", "b:0,2", "a:0,2", "b:2,0", "b:1,2"};
}

std::vector<ctxt> ScalarProgram::computation(std::map<std::string, ctxt> locs, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    ctxt regs[num_registers()];
    regs[0] = locs["a:0,0"];
    regs[1] = locs["b:0,0"];
    info.eval->multiply(regs[0], regs[1], regs[2]);
    info.eval->relinearize_inplace(regs[2], rk);
    regs[3] = locs["a:0,1"];
    regs[4] = locs["b:1,0"];
    info.eval->multiply(regs[3], regs[4], regs[5]);
    info.eval->relinearize_inplace(regs[5], rk);
    info.eval->add(regs[2], regs[5], regs[6]);
    regs[7] = locs["a:0,2"];
    regs[8] = locs["b:2,0"];
    info.eval->multiply(regs[7], regs[8], regs[9]);
    info.eval->relinearize_inplace(regs[9], rk);
    info.eval->add(regs[6], regs[9], regs[10]);
    regs[11] = locs["a:1,0"];
    regs[12] = locs["b:0,1"];
    info.eval->multiply(regs[11], regs[12], regs[13]);
    info.eval->relinearize_inplace(regs[13], rk);
    regs[14] = locs["a:1,1"];
    regs[15] = locs["b:1,1"];
    info.eval->multiply(regs[14], regs[15], regs[16]);
    info.eval->relinearize_inplace(regs[16], rk);
    info.eval->add(regs[13], regs[16], regs[17]);
    regs[18] = locs["a:1,2"];
    regs[19] = locs["b:2,1"];
    info.eval->multiply(regs[18], regs[19], regs[20]);
    info.eval->relinearize_inplace(regs[20], rk);
    info.eval->add(regs[17], regs[20], regs[21]);
    regs[22] = locs["a:2,0"];
    regs[23] = locs["b:0,2"];
    info.eval->multiply(regs[22], regs[23], regs[24]);
    info.eval->relinearize_inplace(regs[24], rk);
    regs[25] = locs["a:2,1"];
    regs[26] = locs["b:1,2"];
    info.eval->multiply(regs[25], regs[26], regs[27]);
    info.eval->relinearize_inplace(regs[27], rk);
    info.eval->add(regs[24], regs[27], regs[28]);
    regs[29] = locs["a:2,2"];
    regs[30] = locs["b:2,2"];
    info.eval->multiply(regs[29], regs[30], regs[31]);
    info.eval->relinearize_inplace(regs[31], rk);
    info.eval->add(regs[28], regs[31], regs[32]);
    info.eval->multiply(regs[21], regs[32], regs[33]);
    info.eval->relinearize_inplace(regs[33], rk);
    regs[34] = locs["a:2,0"];
    info.eval->multiply(regs[34], regs[12], regs[35]);
    info.eval->relinearize_inplace(regs[35], rk);
    regs[36] = locs["a:2,1"];
    info.eval->multiply(regs[36], regs[15], regs[37]);
    info.eval->relinearize_inplace(regs[37], rk);
    info.eval->add(regs[35], regs[37], regs[38]);
    regs[39] = locs["a:2,2"];
    info.eval->multiply(regs[39], regs[19], regs[40]);
    info.eval->relinearize_inplace(regs[40], rk);
    info.eval->add(regs[38], regs[40], regs[41]);
    regs[42] = locs["a:1,0"];
    info.eval->multiply(regs[42], regs[23], regs[43]);
    info.eval->relinearize_inplace(regs[43], rk);
    regs[44] = locs["a:1,1"];
    info.eval->multiply(regs[44], regs[26], regs[45]);
    info.eval->relinearize_inplace(regs[45], rk);
    info.eval->add(regs[43], regs[45], regs[46]);
    regs[47] = locs["a:1,2"];
    info.eval->multiply(regs[47], regs[30], regs[48]);
    info.eval->relinearize_inplace(regs[48], rk);
    info.eval->add(regs[46], regs[48], regs[49]);
    info.eval->multiply(regs[41], regs[49], regs[50]);
    info.eval->relinearize_inplace(regs[50], rk);
    info.eval->add(regs[33], regs[50], regs[51]);
    info.eval->multiply(regs[10], regs[51], regs[52]);
    info.eval->relinearize_inplace(regs[52], rk);
    regs[53] = locs["a:0,0"];
    info.eval->multiply(regs[53], regs[12], regs[54]);
    info.eval->relinearize_inplace(regs[54], rk);
    regs[55] = locs["a:0,1"];
    info.eval->multiply(regs[55], regs[15], regs[56]);
    info.eval->relinearize_inplace(regs[56], rk);
    info.eval->add(regs[54], regs[56], regs[57]);
    regs[58] = locs["a:0,2"];
    info.eval->multiply(regs[58], regs[19], regs[59]);
    info.eval->relinearize_inplace(regs[59], rk);
    info.eval->add(regs[57], regs[59], regs[60]);
    regs[61] = locs["a:1,0"];
    info.eval->multiply(regs[61], regs[1], regs[62]);
    info.eval->relinearize_inplace(regs[62], rk);
    regs[63] = locs["a:1,1"];
    info.eval->multiply(regs[63], regs[4], regs[64]);
    info.eval->relinearize_inplace(regs[64], rk);
    info.eval->add(regs[62], regs[64], regs[65]);
    regs[66] = locs["a:1,2"];
    info.eval->multiply(regs[66], regs[8], regs[67]);
    info.eval->relinearize_inplace(regs[67], rk);
    info.eval->add(regs[65], regs[67], regs[68]);
    regs[69] = locs["a:2,0"];
    info.eval->multiply(regs[69], regs[23], regs[70]);
    info.eval->relinearize_inplace(regs[70], rk);
    regs[71] = locs["a:2,1"];
    info.eval->multiply(regs[71], regs[26], regs[72]);
    info.eval->relinearize_inplace(regs[72], rk);
    info.eval->add(regs[70], regs[72], regs[73]);
    regs[74] = locs["a:2,2"];
    info.eval->multiply(regs[74], regs[30], regs[75]);
    info.eval->relinearize_inplace(regs[75], rk);
    info.eval->add(regs[73], regs[75], regs[76]);
    info.eval->multiply(regs[68], regs[76], regs[77]);
    info.eval->relinearize_inplace(regs[77], rk);
    regs[78] = locs["a:2,0"];
    info.eval->multiply(regs[78], regs[1], regs[79]);
    info.eval->relinearize_inplace(regs[79], rk);
    regs[80] = locs["a:2,1"];
    info.eval->multiply(regs[80], regs[4], regs[81]);
    info.eval->relinearize_inplace(regs[81], rk);
    info.eval->add(regs[79], regs[81], regs[82]);
    regs[83] = locs["a:2,2"];
    info.eval->multiply(regs[83], regs[8], regs[84]);
    info.eval->relinearize_inplace(regs[84], rk);
    info.eval->add(regs[82], regs[84], regs[85]);
    regs[86] = locs["a:1,0"];
    info.eval->multiply(regs[86], regs[23], regs[87]);
    info.eval->relinearize_inplace(regs[87], rk);
    regs[88] = locs["a:1,1"];
    info.eval->multiply(regs[88], regs[26], regs[89]);
    info.eval->relinearize_inplace(regs[89], rk);
    info.eval->add(regs[87], regs[89], regs[90]);
    regs[91] = locs["a:1,2"];
    info.eval->multiply(regs[91], regs[30], regs[92]);
    info.eval->relinearize_inplace(regs[92], rk);
    info.eval->add(regs[90], regs[92], regs[93]);
    info.eval->multiply(regs[85], regs[93], regs[94]);
    info.eval->relinearize_inplace(regs[94], rk);
    info.eval->add(regs[77], regs[94], regs[95]);
    info.eval->multiply(regs[60], regs[95], regs[96]);
    info.eval->relinearize_inplace(regs[96], rk);
    info.eval->sub(regs[52], regs[96], regs[97]);
    regs[98] = locs["a:0,0"];
    info.eval->multiply(regs[98], regs[23], regs[99]);
    info.eval->relinearize_inplace(regs[99], rk);
    regs[100] = locs["a:0,1"];
    info.eval->multiply(regs[100], regs[26], regs[101]);
    info.eval->relinearize_inplace(regs[101], rk);
    info.eval->add(regs[99], regs[101], regs[102]);
    regs[103] = locs["a:0,2"];
    info.eval->multiply(regs[103], regs[30], regs[104]);
    info.eval->relinearize_inplace(regs[104], rk);
    info.eval->add(regs[102], regs[104], regs[105]);
    regs[106] = locs["a:1,0"];
    info.eval->multiply(regs[106], regs[1], regs[107]);
    info.eval->relinearize_inplace(regs[107], rk);
    regs[108] = locs["a:1,1"];
    info.eval->multiply(regs[108], regs[4], regs[109]);
    info.eval->relinearize_inplace(regs[109], rk);
    info.eval->add(regs[107], regs[109], regs[110]);
    regs[111] = locs["a:1,2"];
    info.eval->multiply(regs[111], regs[8], regs[112]);
    info.eval->relinearize_inplace(regs[112], rk);
    info.eval->add(regs[110], regs[112], regs[113]);
    regs[114] = locs["a:2,0"];
    info.eval->multiply(regs[114], regs[12], regs[115]);
    info.eval->relinearize_inplace(regs[115], rk);
    regs[116] = locs["a:2,1"];
    info.eval->multiply(regs[116], regs[15], regs[117]);
    info.eval->relinearize_inplace(regs[117], rk);
    info.eval->add(regs[115], regs[117], regs[118]);
    regs[119] = locs["a:2,2"];
    info.eval->multiply(regs[119], regs[19], regs[120]);
    info.eval->relinearize_inplace(regs[120], rk);
    info.eval->add(regs[118], regs[120], regs[121]);
    info.eval->multiply(regs[113], regs[121], regs[122]);
    info.eval->relinearize_inplace(regs[122], rk);
    regs[123] = locs["a:2,0"];
    info.eval->multiply(regs[123], regs[1], regs[124]);
    info.eval->relinearize_inplace(regs[124], rk);
    regs[125] = locs["a:2,1"];
    info.eval->multiply(regs[125], regs[4], regs[126]);
    info.eval->relinearize_inplace(regs[126], rk);
    info.eval->add(regs[124], regs[126], regs[127]);
    regs[128] = locs["a:2,2"];
    info.eval->multiply(regs[128], regs[8], regs[129]);
    info.eval->relinearize_inplace(regs[129], rk);
    info.eval->add(regs[127], regs[129], regs[130]);
    regs[131] = locs["a:1,0"];
    info.eval->multiply(regs[131], regs[12], regs[132]);
    info.eval->relinearize_inplace(regs[132], rk);
    regs[133] = locs["a:1,1"];
    info.eval->multiply(regs[133], regs[15], regs[134]);
    info.eval->relinearize_inplace(regs[134], rk);
    info.eval->add(regs[132], regs[134], regs[135]);
    regs[136] = locs["a:1,2"];
    info.eval->multiply(regs[136], regs[19], regs[137]);
    info.eval->relinearize_inplace(regs[137], rk);
    info.eval->add(regs[135], regs[137], regs[138]);
    info.eval->multiply(regs[130], regs[138], regs[139]);
    info.eval->relinearize_inplace(regs[139], rk);
    info.eval->add(regs[122], regs[139], regs[140]);
    info.eval->multiply(regs[105], regs[140], regs[141]);
    info.eval->relinearize_inplace(regs[141], rk);
    info.eval->add(regs[97], regs[141], regs[142]);
    std::vector<ctxt> answer;
    answer.push_back(regs[142]);
    return answer;
}
    