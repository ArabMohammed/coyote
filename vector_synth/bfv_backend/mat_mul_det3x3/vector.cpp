
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "00000000000000010100000000000000000000000100000000000", info);
    add_bitstring(bits, "00000100000000000000000000000000001000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000010000000000000000", info);
    add_bitstring(bits, "00000110000000010000000000000000000000000100000000000", info);
    add_bitstring(bits, "00000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000100010000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000010000000000000", info);
    add_bitstring(bits, "00000010000000000100000000000000000100000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000100000000000", info);
    add_bitstring(bits, "00000000000100000100000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000001000000000000000", info);
    add_bitstring(bits, "00000000000010000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000100010000000000000", info);
    add_bitstring(bits, "00000010000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000100000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000100000000000000000000000", info);
    add_bitstring(bits, "00000000000000010000000000000000000000000100000000000", info);
    add_bitstring(bits, "00000000000010010000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000010000000000000000000010000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000010000100000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000001010000000000000000", info);
    add_bitstring(bits, "00000010000100000000000000000000000000010000000000000", info);
    add_bitstring(bits, "00000000000000000100000000000000001110000000000000000", info);
    add_bitstring(bits, "00000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000001000000000000000000", info);
    add_bitstring(bits, "00000100000100000000000000000000000000000100000000000", info);
    add_bitstring(bits, "00000000000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000100000000000000000000000000000000000", info);
    add_bitstring(bits, "00000100000000000000000000000000000000000100000000000", info);
    add_bitstring(bits, "00000000000100000000000000000000000100000000000000000", info);
    add_bitstring(bits, "00000100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000010000000000000000000001110000000000000000", info);
    add_bitstring(bits, "00000010000000000000000000000000001100000000000000000", info);
    add_bitstring(bits, "00000010000000000000000000000000000110000000000000000", info);
    add_bitstring(bits, "00000100000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000100000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(36);
    ts[0] = encrypt_input("11011111110001111111111111111101011110111110110111111011110111101101111111111101111111010111111111111111111111111011111111101101111111111101111111110111111101111111111111111011111111101111111111110100111101111111111111110011011011111", info);
    ts[2] = encrypt_input("11111111101101100000011010011111111110000111100011111000000000000000000000000000110110000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[29];
    ctxt ss[52];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -5, gk, ss[0]); // __s0 = __v0 >> 5
    info.eval->rotate_rows(vs[0], -10, gk, ss[1]); // __s1 = __v0 >> 10
    info.eval->rotate_rows(vs[0], -50, gk, ss[2]); // __s2 = __v0 >> 50
    info.eval->rotate_rows(vs[0], -2, gk, ss[3]); // __s3 = __v0 >> 2
    info.eval->rotate_rows(vs[0], -42, gk, ss[4]); // __s4 = __v0 >> 42
    info.eval->rotate_rows(vs[0], -47, gk, ss[5]); // __s5 = __v0 >> 47
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -34, gk, ss[6]); // __s6 = __v1 >> 34
    info.eval->rotate_rows(vs[1], -35, gk, ss[7]); // __s7 = __v1 >> 35
    info.eval->rotate_rows(vs[1], -5, gk, ss[8]); // __s8 = __v1 >> 5
    info.eval->rotate_rows(vs[1], -12, gk, ss[9]); // __s9 = __v1 >> 12
    info.eval->rotate_rows(vs[1], -15, gk, ss[10]); // __s10 = __v1 >> 15
    info.eval->rotate_rows(vs[1], -16, gk, ss[11]); // __s11 = __v1 >> 16
    info.eval->rotate_rows(vs[1], -10, gk, ss[12]); // __s12 = __v1 >> 10
    info.eval->rotate_rows(vs[1], -28, gk, ss[13]); // __s13 = __v1 >> 28
    info.eval->rotate_rows(vs[1], -32, gk, ss[14]); // __s14 = __v1 >> 32
    info.eval->rotate_rows(vs[1], -33, gk, ss[15]); // __s15 = __v1 >> 33
    info.eval->rotate_rows(vs[1], -3, gk, ss[16]); // __s16 = __v1 >> 3
    info.eval->rotate_rows(vs[1], -13, gk, ss[17]); // __s17 = __v1 >> 13
    info.eval->rotate_rows(vs[1], -8, gk, ss[18]); // __s18 = __v1 >> 8
    info.eval->rotate_rows(vs[1], -2, gk, ss[19]); // __s19 = __v1 >> 2
    info.eval->rotate_rows(vs[1], -50, gk, ss[20]); // __s20 = __v1 >> 50
    info.eval->rotate_rows(vs[1], -20, gk, ss[21]); // __s21 = __v1 >> 20
    info.eval->rotate_rows(vs[1], -4, gk, ss[22]); // __s22 = __v1 >> 4
    info.eval->rotate_rows(vs[1], -24, gk, ss[23]); // __s23 = __v1 >> 24
    info.eval->rotate_rows(vs[1], -25, gk, ss[24]); // __s24 = __v1 >> 25
    info.eval->rotate_rows(vs[1], -30, gk, ss[25]); // __s25 = __v1 >> 30
    info.eval->rotate_rows(vs[1], -23, gk, ss[26]); // __s26 = __v1 >> 23
    info.eval->rotate_rows(vs[1], -27, gk, ss[27]); // __s27 = __v1 >> 27
    info.eval->rotate_rows(vs[1], -29, gk, ss[28]); // __s28 = __v1 >> 29
    info.eval->rotate_rows(vs[1], -42, gk, ss[29]); // __s29 = __v1 >> 42
    info.eval->rotate_rows(vs[1], -47, gk, ss[30]); // __s30 = __v1 >> 47
    info.eval->rotate_rows(vs[1], -38, gk, ss[31]); // __s31 = __v1 >> 38
    info.eval->rotate_rows(vs[1], -45, gk, ss[32]); // __s32 = __v1 >> 45
    info.eval->rotate_rows(vs[1], -14, gk, ss[33]); // __s33 = __v1 >> 14
    info.eval->rotate_rows(vs[1], -48, gk, ss[34]); // __s34 = __v1 >> 48
    info.eval->rotate_rows(vs[1], -40, gk, ss[35]); // __s35 = __v1 >> 40
    info.eval->rotate_rows(vs[1], -41, gk, ss[36]); // __s36 = __v1 >> 41
    info.eval->rotate_rows(vs[1], -44, gk, ss[37]); // __s37 = __v1 >> 44
    info.eval->rotate_rows(vs[1], -46, gk, ss[38]); // __s38 = __v1 >> 46
    
    // __t4 = blend(__s0@00000010000000000000000000000000000110000000000000000, __s2@00000000000010000000000000000000000000000000000000000, __s4@00000000000000010100000000000000000000000100000000000)
    ctxt t4_1, t4_2, t4_3;
    info.eval->multiply_plain(ss[0], bits["00000010000000000000000000000000000110000000000000000"], t4_1);
    info.eval->multiply_plain(ss[2], bits["00000000000010000000000000000000000000000000000000000"], t4_2);
    info.eval->multiply_plain(ss[4], bits["00000000000000010100000000000000000000000100000000000"], t4_3);
    info.eval->add_many({t4_1, t4_2, t4_3}, ts[4]);
    
    
    // __t5 = blend(__s8@00000010000000000000000000000000000000000000000000000, __s12@00000000000010000000000000000000000000000000000000000, __s10@00000000000000010000000000000000000000000000000000000, __v1@00000000000000000100000000000000000000000000000000000, __s35@00000000000000000000000000000000000100000000000000000, __s24@00000000000000000000000000000000000010000000000000000, __s28@00000000000000000000000000000000000000000100000000000)
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    info.eval->multiply_plain(ss[8], bits["00000010000000000000000000000000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[12], bits["00000000000010000000000000000000000000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[10], bits["00000000000000010000000000000000000000000000000000000"], t5_3);
    info.eval->multiply_plain(vs[1], bits["00000000000000000100000000000000000000000000000000000"], t5_4);
    info.eval->multiply_plain(ss[35], bits["00000000000000000000000000000000000100000000000000000"], t5_5);
    info.eval->multiply_plain(ss[24], bits["00000000000000000000000000000000000010000000000000000"], t5_6);
    info.eval->multiply_plain(ss[28], bits["00000000000000000000000000000000000000000100000000000"], t5_7);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7}, ts[5]);
    
    info.eval->multiply(ts[4], ts[5], vs[2]); // __v2 = __t4 * __t5
    info.eval->relinearize_inplace(vs[2], rk);
    
    // __t6 = blend(__s2@00000100000100000000000000000000000000000100000000000, __s4@00000000000010000000000000000000001110000000000000000, __s5@00000000000000010000000000000000000000000000000000000, __s0@00000000000000000000000000000000000000010000000000000)
    ctxt t6_1, t6_2, t6_3, t6_4;
    info.eval->multiply_plain(ss[2], bits["00000100000100000000000000000000000000000100000000000"], t6_1);
    info.eval->multiply_plain(ss[4], bits["00000000000010000000000000000000001110000000000000000"], t6_2);
    info.eval->multiply_plain(ss[5], bits["00000000000000010000000000000000000000000000000000000"], t6_3);
    info.eval->multiply_plain(ss[0], bits["00000000000000000000000000000000000000010000000000000"], t6_4);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4}, ts[6]);
    
    
    // __t7 = blend(__s16@00000100000000010000000000000000000000000000000000000, __s19@00000000000100000000000000000000000000000000000000000, __s9@00000000000010000000000000000000000000000000000000000, __s6@00000000000000000000000000000000001000000000000000000, __s10@00000000000000000000000000000000000100000000000000000, __s23@00000000000000000000000000000000000010000000000000000, __s13@00000000000000000000000000000000000000010000000000000, __s38@00000000000000000000000000000000000000000100000000000)
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8;
    info.eval->multiply_plain(ss[16], bits["00000100000000010000000000000000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[19], bits["00000000000100000000000000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[9], bits["00000000000010000000000000000000000000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[6], bits["00000000000000000000000000000000001000000000000000000"], t7_4);
    info.eval->multiply_plain(ss[10], bits["00000000000000000000000000000000000100000000000000000"], t7_5);
    info.eval->multiply_plain(ss[23], bits["00000000000000000000000000000000000010000000000000000"], t7_6);
    info.eval->multiply_plain(ss[13], bits["00000000000000000000000000000000000000010000000000000"], t7_7);
    info.eval->multiply_plain(ss[38], bits["00000000000000000000000000000000000000000100000000000"], t7_8);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8}, ts[7]);
    
    info.eval->multiply(ts[6], ts[7], vs[3]); // __v3 = __t6 * __t7
    info.eval->relinearize_inplace(vs[3], rk);
    
    // __t8 = blend(__s0@00000000000100000100000000000000000000000000000000000, __s1@00000000000000010000000000000000000000000000000000000, __s2@00000000000000000000000000000000001000000000000000000, __s3@00000000000000000000000000000000000100000000000000000)
    ctxt t8_1, t8_2, t8_3, t8_4;
    info.eval->multiply_plain(ss[0], bits["00000000000100000100000000000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[1], bits["00000000000000010000000000000000000000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[2], bits["00000000000000000000000000000000001000000000000000000"], t8_3);
    info.eval->multiply_plain(ss[3], bits["00000000000000000000000000000000000100000000000000000"], t8_4);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4}, ts[8]);
    
    
    // __t9 = blend(__s12@00000000000100000000000000000000000000000000000000000, __s22@00000000000000010000000000000000000000000000000000000, __s11@00000000000000000100000000000000000000000000000000000, __s14@00000000000000000000000000000000001000000000000000000, __s26@00000000000000000000000000000000000100000000000000000)
    ctxt t9_1, t9_2, t9_3, t9_4, t9_5;
    info.eval->multiply_plain(ss[12], bits["00000000000100000000000000000000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[22], bits["00000000000000010000000000000000000000000000000000000"], t9_2);
    info.eval->multiply_plain(ss[11], bits["00000000000000000100000000000000000000000000000000000"], t9_3);
    info.eval->multiply_plain(ss[14], bits["00000000000000000000000000000000001000000000000000000"], t9_4);
    info.eval->multiply_plain(ss[26], bits["00000000000000000000000000000000000100000000000000000"], t9_5);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4, t9_5}, ts[9]);
    
    info.eval->multiply(ts[8], ts[9], vs[4]); // __v4 = __t8 * __t9
    info.eval->relinearize_inplace(vs[4], rk);
    
    // __t10 = blend(__s0@00000000000000010000000000000000000000000100000000000, __s1@00000000000000000000000000000000000100000000000000000, __s2@00000000000000000000000000000000000000010000000000000)
    ctxt t10_1, t10_2, t10_3;
    info.eval->multiply_plain(ss[0], bits["00000000000000010000000000000000000000000100000000000"], t10_1);
    info.eval->multiply_plain(ss[1], bits["00000000000000000000000000000000000100000000000000000"], t10_2);
    info.eval->multiply_plain(ss[2], bits["00000000000000000000000000000000000000010000000000000"], t10_3);
    info.eval->add_many({t10_1, t10_2, t10_3}, ts[10]);
    
    
    // __t11 = blend(__s34@00000000000000010000000000000000000000000000000000000, __s15@00000000000000000000000000000000000100000000000000000, __s37@00000000000000000000000000000000000000010000000000000, __s25@00000000000000000000000000000000000000000100000000000)
    ctxt t11_1, t11_2, t11_3, t11_4;
    info.eval->multiply_plain(ss[34], bits["00000000000000010000000000000000000000000000000000000"], t11_1);
    info.eval->multiply_plain(ss[15], bits["00000000000000000000000000000000000100000000000000000"], t11_2);
    info.eval->multiply_plain(ss[37], bits["00000000000000000000000000000000000000010000000000000"], t11_3);
    info.eval->multiply_plain(ss[25], bits["00000000000000000000000000000000000000000100000000000"], t11_4);
    info.eval->add_many({t11_1, t11_2, t11_3, t11_4}, ts[11]);
    
    info.eval->multiply(ts[10], ts[11], vs[5]); // __v5 = __t10 * __t11
    info.eval->relinearize_inplace(vs[5], rk);
    
    // __t12 = blend(__s0@00000100000000000000000000000000001000000000000000000, __s4@00000010000100000000000000000000000000010000000000000, __s2@00000000000000010000000000000000000010000000000000000, __s5@00000000000000000000000000000000000100000000000000000)
    ctxt t12_1, t12_2, t12_3, t12_4;
    info.eval->multiply_plain(ss[0], bits["00000100000000000000000000000000001000000000000000000"], t12_1);
    info.eval->multiply_plain(ss[4], bits["00000010000100000000000000000000000000010000000000000"], t12_2);
    info.eval->multiply_plain(ss[2], bits["00000000000000010000000000000000000010000000000000000"], t12_3);
    info.eval->multiply_plain(ss[5], bits["00000000000000000000000000000000000100000000000000000"], t12_4);
    info.eval->add_many({t12_1, t12_2, t12_3, t12_4}, ts[12]);
    
    
    // __t13 = blend(__s31@00000100000000000000000000000000000000000000000000000, __s29@00000010000000000000000000000000000000000000000000000, __s30@00000000000100000000000000000000000000000000000000000, __s17@00000000000000010000000000000000000000000000000000000, __s33@00000000000000000000000000000000001000000000000000000, __s23@00000000000000000000000000000000000100000000000000000, __s36@00000000000000000000000000000000000010000000000000000, __s27@00000000000000000000000000000000000000010000000000000)
    ctxt t13_1, t13_2, t13_3, t13_4, t13_5, t13_6, t13_7, t13_8;
    info.eval->multiply_plain(ss[31], bits["00000100000000000000000000000000000000000000000000000"], t13_1);
    info.eval->multiply_plain(ss[29], bits["00000010000000000000000000000000000000000000000000000"], t13_2);
    info.eval->multiply_plain(ss[30], bits["00000000000100000000000000000000000000000000000000000"], t13_3);
    info.eval->multiply_plain(ss[17], bits["00000000000000010000000000000000000000000000000000000"], t13_4);
    info.eval->multiply_plain(ss[33], bits["00000000000000000000000000000000001000000000000000000"], t13_5);
    info.eval->multiply_plain(ss[23], bits["00000000000000000000000000000000000100000000000000000"], t13_6);
    info.eval->multiply_plain(ss[36], bits["00000000000000000000000000000000000010000000000000000"], t13_7);
    info.eval->multiply_plain(ss[27], bits["00000000000000000000000000000000000000010000000000000"], t13_8);
    info.eval->add_many({t13_1, t13_2, t13_3, t13_4, t13_5, t13_6, t13_7, t13_8}, ts[13]);
    
    info.eval->multiply(ts[12], ts[13], vs[6]); // __v6 = __t12 * __t13
    info.eval->relinearize_inplace(vs[6], rk);
    
    // __t14 = blend(__s4@00000100000000000000000000000000000000000000000000000, __s2@00000010000000000100000000000000000100000000000000000, __s0@00000000000010000000000000000000000000000000000000000, __s3@00000000000000010000000000000000000000000000000000000)
    ctxt t14_1, t14_2, t14_3, t14_4;
    info.eval->multiply_plain(ss[4], bits["00000100000000000000000000000000000000000000000000000"], t14_1);
    info.eval->multiply_plain(ss[2], bits["00000010000000000100000000000000000100000000000000000"], t14_2);
    info.eval->multiply_plain(ss[0], bits["00000000000010000000000000000000000000000000000000000"], t14_3);
    info.eval->multiply_plain(ss[3], bits["00000000000000010000000000000000000000000000000000000"], t14_4);
    info.eval->add_many({t14_1, t14_2, t14_3, t14_4}, ts[14]);
    
    
    // __t15 = blend(__s8@00000100000000000000000000000000000000000000000000000, __s20@00000010000000000000000000000000000000000000000000000, __s32@00000000000010000000000000000000000000000000000000000, __s21@00000000000000010000000000000000000000000000000000000, __s18@00000000000000000100000000000000000000000000000000000, __s7@00000000000000000000000000000000000100000000000000000)
    ctxt t15_1, t15_2, t15_3, t15_4, t15_5, t15_6;
    info.eval->multiply_plain(ss[8], bits["00000100000000000000000000000000000000000000000000000"], t15_1);
    info.eval->multiply_plain(ss[20], bits["00000010000000000000000000000000000000000000000000000"], t15_2);
    info.eval->multiply_plain(ss[32], bits["00000000000010000000000000000000000000000000000000000"], t15_3);
    info.eval->multiply_plain(ss[21], bits["00000000000000010000000000000000000000000000000000000"], t15_4);
    info.eval->multiply_plain(ss[18], bits["00000000000000000100000000000000000000000000000000000"], t15_5);
    info.eval->multiply_plain(ss[7], bits["00000000000000000000000000000000000100000000000000000"], t15_6);
    info.eval->add_many({t15_1, t15_2, t15_3, t15_4, t15_5, t15_6}, ts[15]);
    
    info.eval->multiply(ts[14], ts[15], vs[7]); // __v7 = __t14 * __t15
    info.eval->relinearize_inplace(vs[7], rk);
    
    // __t16 = blend(__v3@00000000000100000000000000000000000000000000000000000, __v2@00000000000010000000000000000000000000000000000000000, __v6@00000000000000010000000000000000000000000000000000000, __v5@00000000000000000000000000000000000100000000000000000)
    ctxt t16_1, t16_2, t16_3, t16_4;
    info.eval->multiply_plain(vs[3], bits["00000000000100000000000000000000000000000000000000000"], t16_1);
    info.eval->multiply_plain(vs[2], bits["00000000000010000000000000000000000000000000000000000"], t16_2);
    info.eval->multiply_plain(vs[6], bits["00000000000000010000000000000000000000000000000000000"], t16_3);
    info.eval->multiply_plain(vs[5], bits["00000000000000000000000000000000000100000000000000000"], t16_4);
    info.eval->add_many({t16_1, t16_2, t16_3, t16_4}, ts[16]);
    
    
    // __t17 = blend(__v6@00000000000100000000000000000000000000000000000000000, __v3@00000000000010000000000000000000000000000000000000000, __v2@00000000000000010000000000000000000000000000000000000, __v7@00000000000000000000000000000000000100000000000000000)
    ctxt t17_1, t17_2, t17_3, t17_4;
    info.eval->multiply_plain(vs[6], bits["00000000000100000000000000000000000000000000000000000"], t17_1);
    info.eval->multiply_plain(vs[3], bits["00000000000010000000000000000000000000000000000000000"], t17_2);
    info.eval->multiply_plain(vs[2], bits["00000000000000010000000000000000000000000000000000000"], t17_3);
    info.eval->multiply_plain(vs[7], bits["00000000000000000000000000000000000100000000000000000"], t17_4);
    info.eval->add_many({t17_1, t17_2, t17_3, t17_4}, ts[17]);
    
    info.eval->add(ts[16], ts[17], vs[8]); // __v8 = __t16 + __t17
    
    // __t18 = blend(__v8@00000000000010010000000000000000000000000000000000000, __v7@00000000000000000100000000000000000000000000000000000, __v4@00000000000000000000000000000000001000000000000000000, __v2@00000000000000000000000000000000000100000000000000000, __v6@00000000000000000000000000000000000010000000000000000, __v5@00000000000000000000000000000000000000010000000000000)
    ctxt t18_1, t18_2, t18_3, t18_4, t18_5, t18_6;
    info.eval->multiply_plain(vs[8], bits["00000000000010010000000000000000000000000000000000000"], t18_1);
    info.eval->multiply_plain(vs[7], bits["00000000000000000100000000000000000000000000000000000"], t18_2);
    info.eval->multiply_plain(vs[4], bits["00000000000000000000000000000000001000000000000000000"], t18_3);
    info.eval->multiply_plain(vs[2], bits["00000000000000000000000000000000000100000000000000000"], t18_4);
    info.eval->multiply_plain(vs[6], bits["00000000000000000000000000000000000010000000000000000"], t18_5);
    info.eval->multiply_plain(vs[5], bits["00000000000000000000000000000000000000010000000000000"], t18_6);
    info.eval->add_many({t18_1, t18_2, t18_3, t18_4, t18_5, t18_6}, ts[18]);
    
    
    // __t19 = blend(__v7@00000000000010000000000000000000000000000000000000000, __v5@00000000000000010000000000000000000000000000000000000, __v2@00000000000000000100000000000000000000000000000000000, __v3@00000000000000000000000000000000001010000000000000000, __v4@00000000000000000000000000000000000100000000000000000, __v6@00000000000000000000000000000000000000010000000000000)
    ctxt t19_1, t19_2, t19_3, t19_4, t19_5, t19_6;
    info.eval->multiply_plain(vs[7], bits["00000000000010000000000000000000000000000000000000000"], t19_1);
    info.eval->multiply_plain(vs[5], bits["00000000000000010000000000000000000000000000000000000"], t19_2);
    info.eval->multiply_plain(vs[2], bits["00000000000000000100000000000000000000000000000000000"], t19_3);
    info.eval->multiply_plain(vs[3], bits["00000000000000000000000000000000001010000000000000000"], t19_4);
    info.eval->multiply_plain(vs[4], bits["00000000000000000000000000000000000100000000000000000"], t19_5);
    info.eval->multiply_plain(vs[6], bits["00000000000000000000000000000000000000010000000000000"], t19_6);
    info.eval->add_many({t19_1, t19_2, t19_3, t19_4, t19_5, t19_6}, ts[19]);
    
    info.eval->add(ts[18], ts[19], vs[9]); // __v9 = __t18 + __t19
    info.eval->rotate_rows(vs[9], -25, gk, ss[39]); // __s39 = __v9 >> 25
    
    // __t20 = blend(__v3@00000100000000000000000000000000000000000100000000000, __v7@00000010000000010000000000000000000000000000000000000, __v9@00000000000000000100000000000000001110000000000000000)
    ctxt t20_1, t20_2, t20_3;
    info.eval->multiply_plain(vs[3], bits["00000100000000000000000000000000000000000100000000000"], t20_1);
    info.eval->multiply_plain(vs[7], bits["00000010000000010000000000000000000000000000000000000"], t20_2);
    info.eval->multiply_plain(vs[9], bits["00000000000000000100000000000000001110000000000000000"], t20_3);
    info.eval->add_many({t20_1, t20_2, t20_3}, ts[20]);
    
    
    // __t21 = blend(__v7@00000100000000000000000000000000000000000000000000000, __v6@00000010000000000000000000000000001100000000000000000, __v3@00000000000000010000000000000000000000000000000000000, __v4@00000000000000000100000000000000000000000000000000000, __v2@00000000000000000000000000000000000010000100000000000)
    ctxt t21_1, t21_2, t21_3, t21_4, t21_5;
    info.eval->multiply_plain(vs[7], bits["00000100000000000000000000000000000000000000000000000"], t21_1);
    info.eval->multiply_plain(vs[6], bits["00000010000000000000000000000000001100000000000000000"], t21_2);
    info.eval->multiply_plain(vs[3], bits["00000000000000010000000000000000000000000000000000000"], t21_3);
    info.eval->multiply_plain(vs[4], bits["00000000000000000100000000000000000000000000000000000"], t21_4);
    info.eval->multiply_plain(vs[2], bits["00000000000000000000000000000000000010000100000000000"], t21_5);
    info.eval->add_many({t21_1, t21_2, t21_3, t21_4, t21_5}, ts[21]);
    
    info.eval->add(ts[20], ts[21], vs[10]); // __v10 = __t20 + __t21
    info.eval->rotate_rows(vs[10], -3, gk, ss[40]); // __s40 = __v10 >> 3
    info.eval->rotate_rows(vs[10], -46, gk, ss[41]); // __s41 = __v10 >> 46
    
    // __t22 = blend(__v10@00000110000000010000000000000000000000000100000000000, __v8@00000000000100000000000000000000000100000000000000000, __v9@00000000000000000000000000000000000000010000000000000)
    ctxt t22_1, t22_2, t22_3;
    info.eval->multiply_plain(vs[10], bits["00000110000000010000000000000000000000000100000000000"], t22_1);
    info.eval->multiply_plain(vs[8], bits["00000000000100000000000000000000000100000000000000000"], t22_2);
    info.eval->multiply_plain(vs[9], bits["00000000000000000000000000000000000000010000000000000"], t22_3);
    info.eval->add_many({t22_1, t22_2, t22_3}, ts[22]);
    
    
    // __t23 = blend(__v6@00000100000000000000000000000000000000000000000000000, __v2@00000010000000000000000000000000000000000000000000000, __v4@00000000000100010000000000000000000000000000000000000, __v3@00000000000000000000000000000000000100010000000000000, __v5@00000000000000000000000000000000000000000100000000000)
    ctxt t23_1, t23_2, t23_3, t23_4, t23_5;
    info.eval->multiply_plain(vs[6], bits["00000100000000000000000000000000000000000000000000000"], t23_1);
    info.eval->multiply_plain(vs[2], bits["00000010000000000000000000000000000000000000000000000"], t23_2);
    info.eval->multiply_plain(vs[4], bits["00000000000100010000000000000000000000000000000000000"], t23_3);
    info.eval->multiply_plain(vs[3], bits["00000000000000000000000000000000000100010000000000000"], t23_4);
    info.eval->multiply_plain(vs[5], bits["00000000000000000000000000000000000000000100000000000"], t23_5);
    info.eval->add_many({t23_1, t23_2, t23_3, t23_4, t23_5}, ts[23]);
    
    info.eval->add(ts[22], ts[23], vs[11]); // __v11 = __t22 + __t23
    info.eval->rotate_rows(vs[11], -24, gk, ss[42]); // __s42 = __v11 >> 24
    info.eval->rotate_rows(vs[11], -31, gk, ss[43]); // __s43 = __v11 >> 31
    info.eval->rotate_rows(vs[11], -26, gk, ss[44]); // __s44 = __v11 >> 26
    info.eval->rotate_rows(vs[11], -51, gk, ss[45]); // __s45 = __v11 >> 51
    info.eval->rotate_rows(vs[11], -41, gk, ss[46]); // __s46 = __v11 >> 41
    
    // __t24 = blend(__v9@00000000000000010000000000000000000000000000000000000, __v11@00000000000000000000000000000000000100000000000000000)
    ctxt t24_1, t24_2;
    info.eval->multiply_plain(vs[9], bits["00000000000000010000000000000000000000000000000000000"], t24_1);
    info.eval->multiply_plain(vs[11], bits["00000000000000000000000000000000000100000000000000000"], t24_2);
    info.eval->add(t24_1, t24_2, ts[24]);
    
    
    // __t25 = blend(__v11@00000000000000010000000000000000000000000000000000000, __v10@00000000000000000000000000000000000100000000000000000)
    ctxt t25_1, t25_2;
    info.eval->multiply_plain(vs[11], bits["00000000000000010000000000000000000000000000000000000"], t25_1);
    info.eval->multiply_plain(vs[10], bits["00000000000000000000000000000000000100000000000000000"], t25_2);
    info.eval->add(t25_1, t25_2, ts[25]);
    
    info.eval->multiply(ts[24], ts[25], vs[12]); // __v12 = __t24 * __t25
    info.eval->relinearize_inplace(vs[12], rk);
    info.eval->rotate_rows(vs[12], -5, gk, ss[47]); // __s47 = __v12 >> 5
    info.eval->rotate_rows(vs[12], -38, gk, ss[48]); // __s48 = __v12 >> 38
    
    // __t26 = blend(__s3@00000000000000000000000000000100000000000000000000000, __s43@00000000000000000000000000000000000001000000000000000)
    ctxt t26_1, t26_2;
    info.eval->multiply_plain(ss[3], bits["00000000000000000000000000000100000000000000000000000"], t26_1);
    info.eval->multiply_plain(ss[43], bits["00000000000000000000000000000000000001000000000000000"], t26_2);
    info.eval->add(t26_1, t26_2, ts[26]);
    
    
    // __t27 = blend(__s21@00000000000000000000000000000100000000000000000000000, __s39@00000000000000000000000000000000000001000000000000000)
    ctxt t27_1, t27_2;
    info.eval->multiply_plain(ss[21], bits["00000000000000000000000000000100000000000000000000000"], t27_1);
    info.eval->multiply_plain(ss[39], bits["00000000000000000000000000000000000001000000000000000"], t27_2);
    info.eval->add(t27_1, t27_2, ts[27]);
    
    info.eval->multiply(ts[26], ts[27], vs[13]); // __v13 = __t26 * __t27
    info.eval->relinearize_inplace(vs[13], rk);
    info.eval->multiply(ss[2], ss[21], vs[14]); // __v14 = __s2 * __s21
    info.eval->relinearize_inplace(vs[14], rk);
    info.eval->multiply(ss[0], ss[13], vs[15]); // __v15 = __s0 * __s13
    info.eval->relinearize_inplace(vs[15], rk);
    info.eval->multiply(ss[5], ss[9], vs[16]); // __v16 = __s5 * __s9
    info.eval->relinearize_inplace(vs[16], rk);
    info.eval->add(vs[13], vs[16], vs[17]); // __v17 = __v13 + __v16
    
    // __t28 = blend(__s1@00000000000000000000000000000100000000000000000000000, __s44@00000000000000000000000000000000000001000000000000000)
    ctxt t28_1, t28_2;
    info.eval->multiply_plain(ss[1], bits["00000000000000000000000000000100000000000000000000000"], t28_1);
    info.eval->multiply_plain(ss[44], bits["00000000000000000000000000000000000001000000000000000"], t28_2);
    info.eval->add(t28_1, t28_2, ts[28]);
    
    
    // __t29 = blend(__s13@00000000000000000000000000000100000000000000000000000, __s40@00000000000000000000000000000000000001000000000000000)
    ctxt t29_1, t29_2;
    info.eval->multiply_plain(ss[13], bits["00000000000000000000000000000100000000000000000000000"], t29_1);
    info.eval->multiply_plain(ss[40], bits["00000000000000000000000000000000000001000000000000000"], t29_2);
    info.eval->add(t29_1, t29_2, ts[29]);
    
    info.eval->multiply(ts[28], ts[29], vs[18]); // __v18 = __t28 * __t29
    info.eval->relinearize_inplace(vs[18], rk);
    info.eval->add(vs[17], vs[18], vs[19]); // __v19 = __v17 + __v18
    info.eval->multiply(ss[4], ss[9], vs[20]); // __v20 = __s4 * __s9
    info.eval->relinearize_inplace(vs[20], rk);
    info.eval->add(vs[14], vs[20], vs[21]); // __v21 = __v14 + __v20
    
    // __t30 = blend(__s47@00000000000000000000100000000000000000000000000000000, __v21@00000000000000000000000000000100000000000000000000000, __v18@00000000000000000000000000000000000001000000000000000)
    ctxt t30_1, t30_2, t30_3;
    info.eval->multiply_plain(ss[47], bits["00000000000000000000100000000000000000000000000000000"], t30_1);
    info.eval->multiply_plain(vs[21], bits["00000000000000000000000000000100000000000000000000000"], t30_2);
    info.eval->multiply_plain(vs[18], bits["00000000000000000000000000000000000001000000000000000"], t30_3);
    info.eval->add_many({t30_1, t30_2, t30_3}, ts[30]);
    
    
    // __t31 = blend(__s48@00000000000000000000100000000000000000000000000000000, __v15@00000000000000000000000000000100000000000000000000000, __v13@00000000000000000000000000000000000001000000000000000)
    ctxt t31_1, t31_2, t31_3;
    info.eval->multiply_plain(ss[48], bits["00000000000000000000100000000000000000000000000000000"], t31_1);
    info.eval->multiply_plain(vs[15], bits["00000000000000000000000000000100000000000000000000000"], t31_2);
    info.eval->multiply_plain(vs[13], bits["00000000000000000000000000000000000001000000000000000"], t31_3);
    info.eval->add_many({t31_1, t31_2, t31_3}, ts[31]);
    
    info.eval->add(ts[30], ts[31], vs[22]); // __v22 = __t30 + __t31
    info.eval->multiply(vs[19], ss[41], vs[23]); // __v23 = __v19 * __s41
    info.eval->relinearize_inplace(vs[23], rk);
    
    // __t32 = blend(__v22@00000000000000000000000000000100000000000000000000000, __s45@00000000000000000000000000000000000001000000000000000)
    ctxt t32_1, t32_2;
    info.eval->multiply_plain(vs[22], bits["00000000000000000000000000000100000000000000000000000"], t32_1);
    info.eval->multiply_plain(ss[45], bits["00000000000000000000000000000000000001000000000000000"], t32_2);
    info.eval->add(t32_1, t32_2, ts[32]);
    
    
    // __t33 = blend(__s46@00000000000000000000000000000100000000000000000000000, __v22@00000000000000000000000000000000000001000000000000000)
    ctxt t33_1, t33_2;
    info.eval->multiply_plain(ss[46], bits["00000000000000000000000000000100000000000000000000000"], t33_1);
    info.eval->multiply_plain(vs[22], bits["00000000000000000000000000000000000001000000000000000"], t33_2);
    info.eval->add(t33_1, t33_2, ts[33]);
    
    info.eval->multiply(ts[32], ts[33], vs[24]); // __v24 = __t32 * __t33
    info.eval->relinearize_inplace(vs[24], rk);
    info.eval->rotate_rows(vs[24], -42, gk, ss[49]); // __s49 = __v24 >> 42
    info.eval->add(vs[24], vs[23], vs[25]); // __v25 = __v24 + __v23
    
    // __t34 = blend(__s40@00000000000000000000100000000000000000000000000000000, __s42@00000000000000000000000000000100000000000000000000000)
    ctxt t34_1, t34_2;
    info.eval->multiply_plain(ss[40], bits["00000000000000000000100000000000000000000000000000000"], t34_1);
    info.eval->multiply_plain(ss[42], bits["00000000000000000000000000000100000000000000000000000"], t34_2);
    info.eval->add(t34_1, t34_2, ts[34]);
    
    
    // __t35 = blend(__v22@00000000000000000000100000000000000000000000000000000, __v25@00000000000000000000000000000100000000000000000000000)
    ctxt t35_1, t35_2;
    info.eval->multiply_plain(vs[22], bits["00000000000000000000100000000000000000000000000000000"], t35_1);
    info.eval->multiply_plain(vs[25], bits["00000000000000000000000000000100000000000000000000000"], t35_2);
    info.eval->add(t35_1, t35_2, ts[35]);
    
    info.eval->multiply(ts[34], ts[35], vs[26]); // __v26 = __t34 * __t35
    info.eval->relinearize_inplace(vs[26], rk);
    info.eval->rotate_rows(vs[26], -6, gk, ss[50]); // __s50 = __v26 >> 6
    info.eval->rotate_rows(vs[26], -50, gk, ss[51]); // __s51 = __v26 >> 50
    info.eval->sub(ss[50], ss[51], vs[27]); // __v27 = __s50 - __s51
    info.eval->add(vs[27], ss[49], vs[28]); // __v28 = __v27 + __s49
    return vs[28];
}
    