
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010", info);
    add_bitstring(bits, "000000000000000000000000000010000000000000000000000000000000000000000000000100000000000000000000000000000000000000100000000", info);
    add_bitstring(bits, "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000010000000000000000000010000000000010000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000010000000000000000000000000100000000000000000000000000000000000000000000000000000000000100000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000100000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000100000001", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000101000010000000000000000000000000000000000000000000000000000000000000000001000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "100000010000000000000001000000000000000000000000000000000000000010000000000100000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000100000000000000000000100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000100000010000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000100000000001000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000100000000001001100000000000010000000000000100010000001000000000000000000000000000000000000000000000010000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000100000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000100000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(42);
    ts[0] = encrypt_input("111101111000111110000001101111111111111101011011000111100001111101111111110011111011111000001111101111101111111111111101111101111011110011111111111111111111111101111100111100011110000111110111111101000011011011011000000000000001111100111110000000011110110100000111110001111111011111101101111111000000000", info);
    ts[2] = encrypt_input("000000000000111111101111110000111110000001111000000110100000000000111110001101100000000001111100000000000000000000000000000000000000000000000000000000000000000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[25];
    ctxt ss[83];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -9, gk, ss[0]); // __s0 = __v0 >> 9
    info.eval->rotate_rows(vs[0], -27, gk, ss[1]); // __s1 = __v0 >> 27
    info.eval->rotate_rows(vs[0], -24, gk, ss[2]); // __s2 = __v0 >> 24
    info.eval->rotate_rows(vs[0], -15, gk, ss[3]); // __s3 = __v0 >> 15
    info.eval->rotate_rows(vs[0], -5, gk, ss[4]); // __s4 = __v0 >> 5
    info.eval->rotate_rows(vs[0], -3, gk, ss[5]); // __s5 = __v0 >> 3
    info.eval->rotate_rows(vs[0], -30, gk, ss[6]); // __s6 = __v0 >> 30
    info.eval->rotate_rows(vs[0], -23, gk, ss[7]); // __s7 = __v0 >> 23
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -102, gk, ss[8]); // __s8 = __v1 >> 102
    info.eval->rotate_rows(vs[1], -110, gk, ss[9]); // __s9 = __v1 >> 110
    info.eval->rotate_rows(vs[1], -16, gk, ss[10]); // __s10 = __v1 >> 16
    info.eval->rotate_rows(vs[1], -23, gk, ss[11]); // __s11 = __v1 >> 23
    info.eval->rotate_rows(vs[1], -63, gk, ss[12]); // __s12 = __v1 >> 63
    info.eval->rotate_rows(vs[1], -101, gk, ss[13]); // __s13 = __v1 >> 101
    info.eval->rotate_rows(vs[1], -15, gk, ss[14]); // __s14 = __v1 >> 15
    info.eval->rotate_rows(vs[1], -22, gk, ss[15]); // __s15 = __v1 >> 22
    info.eval->rotate_rows(vs[1], -119, gk, ss[16]); // __s16 = __v1 >> 119
    info.eval->rotate_rows(vs[1], -62, gk, ss[17]); // __s17 = __v1 >> 62
    info.eval->rotate_rows(vs[1], -40, gk, ss[18]); // __s18 = __v1 >> 40
    info.eval->rotate_rows(vs[1], -107, gk, ss[19]); // __s19 = __v1 >> 107
    info.eval->rotate_rows(vs[1], -54, gk, ss[20]); // __s20 = __v1 >> 54
    info.eval->rotate_rows(vs[1], -57, gk, ss[21]); // __s21 = __v1 >> 57
    info.eval->rotate_rows(vs[1], -96, gk, ss[22]); // __s22 = __v1 >> 96
    info.eval->rotate_rows(vs[1], -2, gk, ss[23]); // __s23 = __v1 >> 2
    info.eval->rotate_rows(vs[1], -3, gk, ss[24]); // __s24 = __v1 >> 3
    info.eval->rotate_rows(vs[1], -10, gk, ss[25]); // __s25 = __v1 >> 10
    info.eval->rotate_rows(vs[1], -27, gk, ss[26]); // __s26 = __v1 >> 27
    info.eval->rotate_rows(vs[1], -43, gk, ss[27]); // __s27 = __v1 >> 43
    info.eval->rotate_rows(vs[1], -46, gk, ss[28]); // __s28 = __v1 >> 46
    info.eval->rotate_rows(vs[1], -24, gk, ss[29]); // __s29 = __v1 >> 24
    info.eval->rotate_rows(vs[1], -94, gk, ss[30]); // __s30 = __v1 >> 94
    info.eval->rotate_rows(vs[1], -37, gk, ss[31]); // __s31 = __v1 >> 37
    info.eval->rotate_rows(vs[1], -115, gk, ss[32]); // __s32 = __v1 >> 115
    info.eval->rotate_rows(vs[1], -30, gk, ss[33]); // __s33 = __v1 >> 30
    info.eval->rotate_rows(vs[1], -33, gk, ss[34]); // __s34 = __v1 >> 33
    info.eval->rotate_rows(vs[1], -5, gk, ss[35]); // __s35 = __v1 >> 5
    info.eval->rotate_rows(vs[1], -72, gk, ss[36]); // __s36 = __v1 >> 72
    info.eval->rotate_rows(vs[1], -109, gk, ss[37]); // __s37 = __v1 >> 109
    info.eval->rotate_rows(vs[1], -17, gk, ss[38]); // __s38 = __v1 >> 17
    info.eval->rotate_rows(vs[1], -68, gk, ss[39]); // __s39 = __v1 >> 68
    info.eval->rotate_rows(vs[1], -105, gk, ss[40]); // __s40 = __v1 >> 105
    info.eval->rotate_rows(vs[1], -9, gk, ss[41]); // __s41 = __v1 >> 9
    info.eval->rotate_rows(vs[1], -90, gk, ss[42]); // __s42 = __v1 >> 90
    
    // __t4 = blend(__s2@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s0@000000000000000000000000000000000001000000000101000010000000000000000000000000000000000000000000000000000000000000000001000, __s5@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000)
    ctxt t4_1, t4_2, t4_3;
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000001000000000101000010000000000000000000000000000000000000000000000000000000000000000001000"], t4_2);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t4_3);
    info.eval->add_many({t4_1, t4_2, t4_3}, ts[4]);
    
    
    // __t5 = blend(__s10@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s15@000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s26@000000000000000000000000000000000000000000000100000010000000000000000000000000000000000000000000000000000000000000000000000, __s35@000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000, __s13@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000, __s30@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000)
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5, t5_6;
    info.eval->multiply_plain(ss[10], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[15], bits["000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[26], bits["000000000000000000000000000000000000000000000100000010000000000000000000000000000000000000000000000000000000000000000000000"], t5_3);
    info.eval->multiply_plain(ss[35], bits["000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000"], t5_4);
    info.eval->multiply_plain(ss[13], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t5_5);
    info.eval->multiply_plain(ss[30], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000"], t5_6);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5, t5_6}, ts[5]);
    
    info.eval->multiply(ts[4], ts[5], vs[2]); // __v2 = __t4 * __t5
    info.eval->relinearize_inplace(vs[2], rk);
    info.eval->rotate_rows(vs[2], -30, gk, ss[43]); // __s43 = __v2 >> 30
    info.eval->rotate_rows(vs[2], -9, gk, ss[44]); // __s44 = __v2 >> 9
    info.eval->rotate_rows(vs[2], -5, gk, ss[45]); // __s45 = __v2 >> 5
    info.eval->rotate_rows(vs[2], -4, gk, ss[46]); // __s46 = __v2 >> 4
    
    // __t6 = blend(__s0@000000000000000000000000000010000000000000000000010000000000010000000000000000000000000000000000000000000000000000000000000, __s4@000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s5@000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000, __s3@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000)
    ctxt t6_1, t6_2, t6_3, t6_4;
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000010000000000000000000010000000000010000000000000000000000000000000000000000000000000000000000000"], t6_1);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t6_3);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t6_4);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4}, ts[6]);
    
    
    // __t7 = blend(__s40@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s11@000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s29@000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000, __s33@000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000, __s34@000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000, __s39@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000)
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6;
    info.eval->multiply_plain(ss[40], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[29], bits["000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[33], bits["000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000"], t7_4);
    info.eval->multiply_plain(ss[34], bits["000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t7_5);
    info.eval->multiply_plain(ss[39], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t7_6);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6}, ts[7]);
    
    info.eval->multiply(ts[6], ts[7], vs[3]); // __v3 = __t6 * __t7
    info.eval->relinearize_inplace(vs[3], rk);
    info.eval->rotate_rows(vs[3], -15, gk, ss[47]); // __s47 = __v3 >> 15
    info.eval->rotate_rows(vs[3], -3, gk, ss[48]); // __s48 = __v3 >> 3
    
    // __t8 = blend(__s0@000000000000000000000100000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000100000001, __s1@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    ctxt t8_1, t8_2;
    info.eval->multiply_plain(ss[0], bits["000000000000000000000100000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000100000001"], t8_1);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t8_2);
    info.eval->add(t8_1, t8_2, ts[8]);
    
    
    // __t9 = blend(__s24@000000000000000000000100000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000, __s14@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s21@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000, __s9@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
    ctxt t9_1, t9_2, t9_3, t9_4;
    info.eval->multiply_plain(ss[24], bits["000000000000000000000100000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[14], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t9_2);
    info.eval->multiply_plain(ss[21], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t9_3);
    info.eval->multiply_plain(ss[9], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"], t9_4);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4}, ts[9]);
    
    info.eval->multiply(ts[8], ts[9], vs[4]); // __v4 = __t8 * __t9
    info.eval->relinearize_inplace(vs[4], rk);
    info.eval->rotate_rows(vs[4], -64, gk, ss[49]); // __s49 = __v4 >> 64
    info.eval->rotate_rows(vs[4], -15, gk, ss[50]); // __s50 = __v4 >> 15
    info.eval->rotate_rows(vs[4], -8, gk, ss[51]); // __s51 = __v4 >> 8
    
    // __t10 = blend(__s3@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s4@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000, __s0@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010)
    ctxt t10_1, t10_2, t10_3;
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t10_1);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t10_2);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010"], t10_3);
    info.eval->add_many({t10_1, t10_2, t10_3}, ts[10]);
    
    
    // __t11 = blend(__s37@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s22@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000, __s19@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010)
    ctxt t11_1, t11_2, t11_3;
    info.eval->multiply_plain(ss[37], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t11_1);
    info.eval->multiply_plain(ss[22], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t11_2);
    info.eval->multiply_plain(ss[19], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010"], t11_3);
    info.eval->add_many({t11_1, t11_2, t11_3}, ts[11]);
    
    info.eval->multiply(ts[10], ts[11], vs[5]); // __v5 = __t10 * __t11
    info.eval->relinearize_inplace(vs[5], rk);
    info.eval->rotate_rows(vs[5], -2, gk, ss[52]); // __s52 = __v5 >> 2
    
    // __t12 = blend(__v4@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v3@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000)
    ctxt t12_1, t12_2;
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t12_1);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t12_2);
    info.eval->add(t12_1, t12_2, ts[12]);
    
    
    // __t13 = blend(__v2@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v4@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000)
    ctxt t13_1, t13_2;
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t13_1);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t13_2);
    info.eval->add(t13_1, t13_2, ts[13]);
    
    info.eval->add(ts[12], ts[13], vs[6]); // __v6 = __t12 + __t13
    info.eval->add(vs[6], vs[5], vs[7]); // __v7 = __v6 + __v5
    
    // __t14 = blend(__s4@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s0@000000000000000000000000000000000000000000000000000000100000000000000000000100000000000000000000000000000000000000000000000, __s1@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000)
    ctxt t14_1, t14_2, t14_3;
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t14_1);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000000000000000100000000000000000000100000000000000000000000000000000000000000000000"], t14_2);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t14_3);
    info.eval->add_many({t14_1, t14_2, t14_3}, ts[14]);
    
    
    // __t15 = blend(__s30@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s11@000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000, __s17@000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000, __s8@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000)
    ctxt t15_1, t15_2, t15_3, t15_4;
    info.eval->multiply_plain(ss[30], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t15_1);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000"], t15_2);
    info.eval->multiply_plain(ss[17], bits["000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t15_3);
    info.eval->multiply_plain(ss[8], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t15_4);
    info.eval->add_many({t15_1, t15_2, t15_3, t15_4}, ts[15]);
    
    info.eval->multiply(ts[14], ts[15], vs[8]); // __v8 = __t14 * __t15
    info.eval->relinearize_inplace(vs[8], rk);
    
    // __t16 = blend(__s5@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s4@000000000000000000000000000000000000000000000000000000100000000000000000000100000000000000000000000000000000000000000000000, __s0@000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000, __s2@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000)
    ctxt t16_1, t16_2, t16_3, t16_4;
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t16_1);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000000000000000000000000100000000000000000000100000000000000000000000000000000000000000000000"], t16_2);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t16_3);
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t16_4);
    info.eval->add_many({t16_1, t16_2, t16_3, t16_4}, ts[16]);
    
    
    // __t17 = blend(__s25@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s18@000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000, __s38@000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000, __s12@000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000, __s36@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000)
    ctxt t17_1, t17_2, t17_3, t17_4, t17_5;
    info.eval->multiply_plain(ss[25], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t17_1);
    info.eval->multiply_plain(ss[18], bits["000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000"], t17_2);
    info.eval->multiply_plain(ss[38], bits["000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t17_3);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t17_4);
    info.eval->multiply_plain(ss[36], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t17_5);
    info.eval->add_many({t17_1, t17_2, t17_3, t17_4, t17_5}, ts[17]);
    
    info.eval->multiply(ts[16], ts[17], vs[9]); // __v9 = __t16 * __t17
    info.eval->relinearize_inplace(vs[9], rk);
    info.eval->rotate_rows(vs[9], -71, gk, ss[53]); // __s53 = __v9 >> 71
    
    // __t18 = blend(__v3@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v2@000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000100000000, __v8@000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    ctxt t18_1, t18_2, t18_3;
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t18_1);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t18_2);
    info.eval->multiply_plain(vs[8], bits["000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t18_3);
    info.eval->add_many({t18_1, t18_2, t18_3}, ts[18]);
    
    
    // __t19 = blend(__v8@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000, __v3@000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v9@000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    ctxt t19_1, t19_2, t19_3;
    info.eval->multiply_plain(vs[8], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t19_1);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t19_2);
    info.eval->multiply_plain(vs[9], bits["000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t19_3);
    info.eval->add_many({t19_1, t19_2, t19_3}, ts[19]);
    
    info.eval->add(ts[18], ts[19], vs[10]); // __v10 = __t18 + __t19
    info.eval->rotate_rows(vs[10], -21, gk, ss[54]); // __s54 = __v10 >> 21
    
    // __t20 = blend(__v10@000000000000000000000000000010000000000000000000000000000000000000000000000100000000000000000000000000000000000000100000000, __v8@000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000)
    ctxt t20_1, t20_2;
    info.eval->multiply_plain(vs[10], bits["000000000000000000000000000010000000000000000000000000000000000000000000000100000000000000000000000000000000000000100000000"], t20_1);
    info.eval->multiply_plain(vs[8], bits["000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000"], t20_2);
    info.eval->add(t20_1, t20_2, ts[20]);
    
    
    // __t21 = blend(__v9@000000000000000000000000000010000000000000000000000000100000000000000000000000000000000000000000000000000000000000100000000, __v3@000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    ctxt t21_1, t21_2;
    info.eval->multiply_plain(vs[9], bits["000000000000000000000000000010000000000000000000000000100000000000000000000000000000000000000000000000000000000000100000000"], t21_1);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t21_2);
    info.eval->add(t21_1, t21_2, ts[21]);
    
    info.eval->add(ts[20], ts[21], vs[11]); // __v11 = __t20 + __t21
    info.eval->rotate_rows(vs[11], -3, gk, ss[55]); // __s55 = __v11 >> 3
    info.eval->rotate_rows(vs[11], -18, gk, ss[56]); // __s56 = __v11 >> 18
    
    // __t22 = blend(__s0@000000000100000000001001100000000000010000000000000100010000001000000000000000000000000000000000000000000000010000000000000, __v11@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v7@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000)
    ctxt t22_1, t22_2, t22_3;
    info.eval->multiply_plain(ss[0], bits["000000000100000000001001100000000000010000000000000100010000001000000000000000000000000000000000000000000000010000000000000"], t22_1);
    info.eval->multiply_plain(vs[11], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t22_2);
    info.eval->multiply_plain(vs[7], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t22_3);
    info.eval->add_many({t22_1, t22_2, t22_3}, ts[22]);
    
    
    // __t23 = blend(__s16@000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s23@000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s32@000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s42@000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v7@000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s11@000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s35@000000000000000000000000000000000000000000000000000100000000001000000000000000000000000000000000000000000000000000000000000, __s41@000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000, __s12@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000, __v11@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000)
    ctxt t23_1, t23_2, t23_3, t23_4, t23_5, t23_6, t23_7, t23_8, t23_9, t23_10;
    info.eval->multiply_plain(ss[16], bits["000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t23_1);
    info.eval->multiply_plain(ss[23], bits["000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t23_2);
    info.eval->multiply_plain(ss[32], bits["000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t23_3);
    info.eval->multiply_plain(ss[42], bits["000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t23_4);
    info.eval->multiply_plain(vs[7], bits["000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t23_5);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t23_6);
    info.eval->multiply_plain(ss[35], bits["000000000000000000000000000000000000000000000000000100000000001000000000000000000000000000000000000000000000000000000000000"], t23_7);
    info.eval->multiply_plain(ss[41], bits["000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000"], t23_8);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000"], t23_9);
    info.eval->multiply_plain(vs[11], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000"], t23_10);
    info.eval->add_many({t23_1, t23_2, t23_3, t23_4, t23_5, t23_6, t23_7, t23_8, t23_9, t23_10}, ts[23]);
    
    info.eval->multiply(ts[22], ts[23], vs[12]); // __v12 = __t22 * __t23
    info.eval->relinearize_inplace(vs[12], rk);
    info.eval->rotate_rows(vs[12], -121, gk, ss[57]); // __s57 = __v12 >> 121
    info.eval->rotate_rows(vs[12], -3, gk, ss[58]); // __s58 = __v12 >> 3
    info.eval->rotate_rows(vs[12], -100, gk, ss[59]); // __s59 = __v12 >> 100
    info.eval->rotate_rows(vs[12], -122, gk, ss[60]); // __s60 = __v12 >> 122
    info.eval->rotate_rows(vs[12], -27, gk, ss[61]); // __s61 = __v12 >> 27
    info.eval->rotate_rows(vs[12], -24, gk, ss[62]); // __s62 = __v12 >> 24
    info.eval->rotate_rows(vs[12], -30, gk, ss[63]); // __s63 = __v12 >> 30
    info.eval->rotate_rows(vs[12], -23, gk, ss[64]); // __s64 = __v12 >> 23
    info.eval->rotate_rows(vs[12], -37, gk, ss[65]); // __s65 = __v12 >> 37
    info.eval->rotate_rows(vs[12], -64, gk, ss[66]); // __s66 = __v12 >> 64
    
    // __t24 = blend(__s59@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s57@000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s65@000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s54@000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000, __s48@000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000, __s62@000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000, __s63@000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000)
    ctxt t24_1, t24_2, t24_3, t24_4, t24_5, t24_6, t24_7;
    info.eval->multiply_plain(ss[59], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t24_1);
    info.eval->multiply_plain(ss[57], bits["000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t24_2);
    info.eval->multiply_plain(ss[65], bits["000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t24_3);
    info.eval->multiply_plain(ss[54], bits["000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000"], t24_4);
    info.eval->multiply_plain(ss[48], bits["000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000"], t24_5);
    info.eval->multiply_plain(ss[62], bits["000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t24_6);
    info.eval->multiply_plain(ss[63], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000"], t24_7);
    info.eval->add_many({t24_1, t24_2, t24_3, t24_4, t24_5, t24_6, t24_7}, ts[24]);
    
    
    // __t25 = blend(__s52@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s51@000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s60@000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s44@000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000, __s61@000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000, __s50@000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000, __s64@000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000)
    ctxt t25_1, t25_2, t25_3, t25_4, t25_5, t25_6, t25_7;
    info.eval->multiply_plain(ss[52], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t25_1);
    info.eval->multiply_plain(ss[51], bits["000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t25_2);
    info.eval->multiply_plain(ss[60], bits["000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t25_3);
    info.eval->multiply_plain(ss[44], bits["000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000"], t25_4);
    info.eval->multiply_plain(ss[61], bits["000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000"], t25_5);
    info.eval->multiply_plain(ss[50], bits["000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t25_6);
    info.eval->multiply_plain(ss[64], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000"], t25_7);
    info.eval->add_many({t25_1, t25_2, t25_3, t25_4, t25_5, t25_6, t25_7}, ts[25]);
    
    info.eval->add(ts[24], ts[25], vs[13]); // __v13 = __t24 + __t25
    info.eval->rotate_rows(vs[13], -12, gk, ss[67]); // __s67 = __v13 >> 12
    
    // __t26 = blend(__v13@100000010000000000000001000000000000000000000000000000000000000010000000000100000000010000000000000000000000000000000000000, __s61@000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000, __s55@000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000)
    ctxt t26_1, t26_2, t26_3;
    info.eval->multiply_plain(vs[13], bits["100000010000000000000001000000000000000000000000000000000000000010000000000100000000010000000000000000000000000000000000000"], t26_1);
    info.eval->multiply_plain(ss[61], bits["000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000"], t26_2);
    info.eval->multiply_plain(ss[55], bits["000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000"], t26_3);
    info.eval->add_many({t26_1, t26_2, t26_3}, ts[26]);
    
    
    // __t27 = blend(__s46@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s53@000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s58@000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s66@000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000, __s45@000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000, __s47@000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000, __s43@000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000, __s49@000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000)
    ctxt t27_1, t27_2, t27_3, t27_4, t27_5, t27_6, t27_7, t27_8;
    info.eval->multiply_plain(ss[46], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t27_1);
    info.eval->multiply_plain(ss[53], bits["000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t27_2);
    info.eval->multiply_plain(ss[58], bits["000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t27_3);
    info.eval->multiply_plain(ss[66], bits["000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000"], t27_4);
    info.eval->multiply_plain(ss[45], bits["000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000"], t27_5);
    info.eval->multiply_plain(ss[47], bits["000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000"], t27_6);
    info.eval->multiply_plain(ss[43], bits["000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t27_7);
    info.eval->multiply_plain(ss[49], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000"], t27_8);
    info.eval->add_many({t27_1, t27_2, t27_3, t27_4, t27_5, t27_6, t27_7, t27_8}, ts[27]);
    
    info.eval->add(ts[26], ts[27], vs[14]); // __v14 = __t26 + __t27
    info.eval->rotate_rows(vs[14], -89, gk, ss[68]); // __s68 = __v14 >> 89
    info.eval->rotate_rows(vs[14], -64, gk, ss[69]); // __s69 = __v14 >> 64
    info.eval->rotate_rows(vs[14], -72, gk, ss[70]); // __s70 = __v14 >> 72
    info.eval->rotate_rows(vs[14], -34, gk, ss[71]); // __s71 = __v14 >> 34
    info.eval->rotate_rows(vs[14], -27, gk, ss[72]); // __s72 = __v14 >> 27
    info.eval->rotate_rows(vs[14], -24, gk, ss[73]); // __s73 = __v14 >> 24
    info.eval->rotate_rows(vs[14], -9, gk, ss[74]); // __s74 = __v14 >> 9
    info.eval->rotate_rows(vs[14], -3, gk, ss[75]); // __s75 = __v14 >> 3
    
    // __t28 = blend(__s4@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000, __s3@000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000)
    ctxt t28_1, t28_2;
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000"], t28_1);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t28_2);
    info.eval->add(t28_1, t28_2, ts[28]);
    
    
    // __t29 = blend(__s20@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000, __s18@000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000)
    ctxt t29_1, t29_2;
    info.eval->multiply_plain(ss[20], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000"], t29_1);
    info.eval->multiply_plain(ss[18], bits["000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t29_2);
    info.eval->add(t29_1, t29_2, ts[29]);
    
    info.eval->multiply(ts[28], ts[29], vs[15]); // __v15 = __t28 * __t29
    info.eval->relinearize_inplace(vs[15], rk);
    
    // __t30 = blend(__s0@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000, __s6@000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000)
    ctxt t30_1, t30_2;
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000"], t30_1);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t30_2);
    info.eval->add(t30_1, t30_2, ts[30]);
    
    
    // __t31 = blend(__s31@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000, __s21@000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000)
    ctxt t31_1, t31_2;
    info.eval->multiply_plain(ss[31], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000"], t31_1);
    info.eval->multiply_plain(ss[21], bits["000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t31_2);
    info.eval->add(t31_1, t31_2, ts[31]);
    
    info.eval->multiply(ts[30], ts[31], vs[16]); // __v16 = __t30 * __t31
    info.eval->relinearize_inplace(vs[16], rk);
    
    // __t32 = blend(__v16@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000, __v15@000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000)
    ctxt t32_1, t32_2;
    info.eval->multiply_plain(vs[16], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000"], t32_1);
    info.eval->multiply_plain(vs[15], bits["000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t32_2);
    info.eval->add(t32_1, t32_2, ts[32]);
    
    
    // __t33 = blend(__v15@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000, __v16@000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000)
    ctxt t33_1, t33_2;
    info.eval->multiply_plain(vs[15], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000"], t33_1);
    info.eval->multiply_plain(vs[16], bits["000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t33_2);
    info.eval->add(t33_1, t33_2, ts[33]);
    
    info.eval->add(ts[32], ts[33], vs[17]); // __v17 = __t32 + __t33
    
    // __t34 = blend(__s5@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000, __s7@000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000)
    ctxt t34_1, t34_2;
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000"], t34_1);
    info.eval->multiply_plain(ss[7], bits["000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t34_2);
    info.eval->add(t34_1, t34_2, ts[34]);
    
    
    // __t35 = blend(__s27@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000, __s28@000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000)
    ctxt t35_1, t35_2;
    info.eval->multiply_plain(ss[27], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000"], t35_1);
    info.eval->multiply_plain(ss[28], bits["000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t35_2);
    info.eval->add(t35_1, t35_2, ts[35]);
    
    info.eval->multiply(ts[34], ts[35], vs[18]); // __v18 = __t34 * __t35
    info.eval->relinearize_inplace(vs[18], rk);
    info.eval->add(vs[17], vs[18], vs[19]); // __v19 = __v17 + __v18
    
    // __t36 = blend(__v19@000000000000000000000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000000, __s72@000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000, __s73@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000)
    ctxt t36_1, t36_2, t36_3;
    info.eval->multiply_plain(vs[19], bits["000000000000000000000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000000"], t36_1);
    info.eval->multiply_plain(ss[72], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000"], t36_2);
    info.eval->multiply_plain(ss[73], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000"], t36_3);
    info.eval->add_many({t36_1, t36_2, t36_3}, ts[36]);
    
    
    // __t37 = blend(__s67@000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000, __s69@000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000, __s74@000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000, __s75@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000)
    ctxt t37_1, t37_2, t37_3, t37_4;
    info.eval->multiply_plain(ss[67], bits["000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000"], t37_1);
    info.eval->multiply_plain(ss[69], bits["000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t37_2);
    info.eval->multiply_plain(ss[74], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000"], t37_3);
    info.eval->multiply_plain(ss[75], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000"], t37_4);
    info.eval->add_many({t37_1, t37_2, t37_3, t37_4}, ts[37]);
    
    info.eval->multiply(ts[36], ts[37], vs[20]); // __v20 = __t36 * __t37
    info.eval->relinearize_inplace(vs[20], rk);
    info.eval->rotate_rows(vs[20], -27, gk, ss[76]); // __s76 = __v20 >> 27
    info.eval->rotate_rows(vs[20], -24, gk, ss[77]); // __s77 = __v20 >> 24
    info.eval->rotate_rows(vs[20], -9, gk, ss[78]); // __s78 = __v20 >> 9
    info.eval->rotate_rows(vs[20], -5, gk, ss[79]); // __s79 = __v20 >> 5
    
    // __t38 = blend(__s79@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000, __s76@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000)
    ctxt t38_1, t38_2;
    info.eval->multiply_plain(ss[79], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000"], t38_1);
    info.eval->multiply_plain(ss[76], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000"], t38_2);
    info.eval->add(t38_1, t38_2, ts[38]);
    
    
    // __t39 = blend(__s78@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000, __s77@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000)
    ctxt t39_1, t39_2;
    info.eval->multiply_plain(ss[78], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000"], t39_1);
    info.eval->multiply_plain(ss[77], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000"], t39_2);
    info.eval->add(t39_1, t39_2, ts[39]);
    
    info.eval->add(ts[38], ts[39], vs[21]); // __v21 = __t38 + __t39
    
    // __t40 = blend(__s68@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000, __s56@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000, __s70@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000)
    ctxt t40_1, t40_2, t40_3;
    info.eval->multiply_plain(ss[68], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000"], t40_1);
    info.eval->multiply_plain(ss[56], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000"], t40_2);
    info.eval->multiply_plain(ss[70], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000"], t40_3);
    info.eval->add_many({t40_1, t40_2, t40_3}, ts[40]);
    
    
    // __t41 = blend(__s71@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000, __v21@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000)
    ctxt t41_1, t41_2;
    info.eval->multiply_plain(ss[71], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000"], t41_1);
    info.eval->multiply_plain(vs[21], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000"], t41_2);
    info.eval->add(t41_1, t41_2, ts[41]);
    
    info.eval->multiply(ts[40], ts[41], vs[22]); // __v22 = __t40 * __t41
    info.eval->relinearize_inplace(vs[22], rk);
    info.eval->rotate_rows(vs[22], -9, gk, ss[80]); // __s80 = __v22 >> 9
    info.eval->rotate_rows(vs[22], -5, gk, ss[81]); // __s81 = __v22 >> 5
    info.eval->rotate_rows(vs[22], -3, gk, ss[82]); // __s82 = __v22 >> 3
    info.eval->sub(ss[80], ss[82], vs[23]); // __v23 = __s80 - __s82
    info.eval->add(vs[23], ss[81], vs[24]); // __v24 = __v23 + __s81
    return vs[24];
}
    