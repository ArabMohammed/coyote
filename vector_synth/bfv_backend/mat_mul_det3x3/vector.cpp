
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "000000000000000000000000000000000000010000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000001000100000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000100000000100000000000", info);
    add_bitstring(bits, "000000000000000000000000000000001000010000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000100000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000100000000010000000000", info);
    add_bitstring(bits, "000000000000000000001000000000000000000000100000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000011100000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000001000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000010000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000100000000000", info);
    add_bitstring(bits, "000000000010000000001000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000010100000001000000000001000010000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000011000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000011000000000000000000", info);
    add_bitstring(bits, "000000000000000000001000000000000011010000000000000000", info);
    add_bitstring(bits, "000000000010000000000000000000001000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000101100000100000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000100100000000000000000", info);
    add_bitstring(bits, "000000000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000010000000000000000000000000000000010000000000", info);
    add_bitstring(bits, "000000000010000000000000000000000001000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001100000000000000000", info);
    add_bitstring(bits, "000000000000000000001000000000000000010000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000001000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000010000000010000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000010000000", info);
    add_bitstring(bits, "000000000000000000000000000000000100000000000000000000", info);
    add_bitstring(bits, "000000000000000000001000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000010000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(54);
    ts[0] = encrypt_input("111110110110001111001101001111100000111100011111011011111110111111101111010111111111011111111101101011011111101111100000111101111101111111011110111111100000011111", info);
    ts[2] = encrypt_input("000000000000000000000000000001101011011000000001101100111100000000001111111111", info);
    ts[4] = encrypt_input("00000000000000000000000000000000011110000000001111000000000000", info);
    ts[5] = encrypt_input("0000000000111110000000000000000000000000000000000000000000", info);
    ts[8] = encrypt_input("00000000000000000000000000000000000000000011111111100000000000", info);
    ts[9] = encrypt_input("00000000000000000000111100000000000000000000001111100000000000", info);
    ts[12] = encrypt_input("000000000011111000000000000000000000001111100000001111100000000000", info);
    ts[13] = encrypt_input("000000000011111000000000000000000000111110111110000000000000000000", info);
    ts[16] = encrypt_input("0000000000111100000000000000000000000111111111000000000111110000000000", info);
    ts[17] = encrypt_input("0000000000000000000000000000000000000111110000000000000000", info);
    ts[20] = encrypt_input("000000000000000000000000000000000111111111100000000111110000000000", info);
    ts[21] = encrypt_input("00000000000000000000000000000000011110000000000111110000000000", info);
    ts[28] = encrypt_input("0000000000111110000000000000000000000000000000000000000000", info);
    ts[29] = encrypt_input("0000000000001111000000000000000000000011111111111111100000000000000000", info);
    ts[37] = encrypt_input("0000000000000000000000000000000000000000000011111000000000", info);
    ts[38] = encrypt_input("0000000000000000000000000000000000000000000011110000000000", info);
    ts[41] = encrypt_input("0000000000000000000000000000000000000000000011111000000000", info);
    ts[42] = encrypt_input("0000000000000000000000000000000000000000000011110000000000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[29];
    ctxt ss[36];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -10, gk, ss[0]); // __s0 = __v0 >> 10
    info.eval->rotate_rows(vs[0], -4, gk, ss[1]); // __s1 = __v0 >> 4
    info.eval->rotate_rows(vs[0], -45, gk, ss[2]); // __s2 = __v0 >> 45
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -45, gk, ss[3]); // __s3 = __v1 >> 45
    info.eval->rotate_rows(vs[1], -4, gk, ss[4]); // __s4 = __v1 >> 4
    info.eval->rotate_rows(vs[1], -37, gk, ss[5]); // __s5 = __v1 >> 37
    info.eval->rotate_rows(vs[1], -15, gk, ss[6]); // __s6 = __v1 >> 15
    info.eval->rotate_rows(vs[1], -34, gk, ss[7]); // __s7 = __v1 >> 34
    info.eval->rotate_rows(vs[1], -2, gk, ss[8]); // __s8 = __v1 >> 2
    info.eval->rotate_rows(vs[1], -5, gk, ss[9]); // __s9 = __v1 >> 5
    info.eval->rotate_rows(vs[1], -12, gk, ss[10]); // __s10 = __v1 >> 12
    info.eval->rotate_rows(vs[1], -49, gk, ss[11]); // __s11 = __v1 >> 49
    info.eval->rotate_rows(vs[1], -51, gk, ss[12]); // __s12 = __v1 >> 51
    info.eval->rotate_rows(vs[1], -52, gk, ss[13]); // __s13 = __v1 >> 52
    info.eval->rotate_rows(vs[1], -25, gk, ss[14]); // __s14 = __v1 >> 25
    info.eval->rotate_rows(vs[1], -24, gk, ss[15]); // __s15 = __v1 >> 24
    info.eval->rotate_rows(vs[1], -32, gk, ss[16]); // __s16 = __v1 >> 32
    info.eval->rotate_rows(vs[1], -36, gk, ss[17]); // __s17 = __v1 >> 36
    info.eval->rotate_rows(vs[1], -38, gk, ss[18]); // __s18 = __v1 >> 38
    info.eval->rotate_rows(vs[1], -39, gk, ss[19]); // __s19 = __v1 >> 39
    info.eval->rotate_rows(vs[1], -33, gk, ss[20]); // __s20 = __v1 >> 33
    info.eval->rotate_rows(vs[1], -35, gk, ss[21]); // __s21 = __v1 >> 35
    info.eval->rotate_rows(vs[1], -11, gk, ss[22]); // __s22 = __v1 >> 11
    info.eval->rotate_rows(vs[1], -43, gk, ss[23]); // __s23 = __v1 >> 43
    
    // __t6 = blend(__s0@000000000010000000000000000000000000000000000000000000, __s1@000000000000100000000000000000000000000000000000000000, __s2@000000000000000000001000000000000011010000000000000000, __t4@000000000000000000000000000000000100000000100000000000)
    ctxt t6_1, t6_2, t6_3;
    info.eval->multiply_plain(ss[0], bits["000000000010000000000000000000000000000000000000000000"], t6_1);
    info.eval->multiply_plain(ss[1], bits["000000000000100000000000000000000000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[2], bits["000000000000000000001000000000000011010000000000000000"], t6_3);
    info.eval->add_many({t6_1, t6_2, t6_3, ts[4]}, ts[6]);
    
    
    // __t7 = blend(__s5@000000000000100000000000000000000000000000000000000000, __s16@000000000000000000001000000000000000000000000000000000, __s4@000000000000000000000000000000000100000000000000000000, __s21@000000000000000000000000000000000010000000000000000000, __s17@000000000000000000000000000000000001000000000000000000, __s19@000000000000000000000000000000000000010000000000000000, __s10@000000000000000000000000000000000000000000100000000000, __t5@000000000010000000000000000000000000000000000000000000)
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    info.eval->multiply_plain(ss[5], bits["000000000000100000000000000000000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[16], bits["000000000000000000001000000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000100000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[21], bits["000000000000000000000000000000000010000000000000000000"], t7_4);
    info.eval->multiply_plain(ss[17], bits["000000000000000000000000000000000001000000000000000000"], t7_5);
    info.eval->multiply_plain(ss[19], bits["000000000000000000000000000000000000010000000000000000"], t7_6);
    info.eval->multiply_plain(ss[10], bits["000000000000000000000000000000000000000000100000000000"], t7_7);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, ts[5]}, ts[7]);
    
    info.eval->multiply(ts[6], ts[7], vs[2]); // __v2 = __t6 * __t7
    info.eval->relinearize_inplace(vs[2], rk);
    
    // __t10 = blend(__s2@000000000010000000000000000000001000000000000000000000, __s0@000000000000000000001000000000000000000000000000000000, __s1@000000000000000000000000000000000010000000000000000000, __t8@000000000000000000000000000000000000000000110000000000)
    ctxt t10_1, t10_2, t10_3;
    info.eval->multiply_plain(ss[2], bits["000000000010000000000000000000001000000000000000000000"], t10_1);
    info.eval->multiply_plain(ss[0], bits["000000000000000000001000000000000000000000000000000000"], t10_2);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000010000000000000000000"], t10_3);
    info.eval->add_many({t10_1, t10_2, t10_3, ts[8]}, ts[10]);
    
    
    // __t11 = blend(__s10@000000000010000000000000000000000000000000000000000000, __s20@000000000000000000000000000000001000000000000000000000, __s4@000000000000000000000000000000000010000000010000000000, __t9@000000000000000000001000000000000000000000100000000000)
    ctxt t11_1, t11_2, t11_3;
    info.eval->multiply_plain(ss[10], bits["000000000010000000000000000000000000000000000000000000"], t11_1);
    info.eval->multiply_plain(ss[20], bits["000000000000000000000000000000001000000000000000000000"], t11_2);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000010000000010000000000"], t11_3);
    info.eval->add_many({t11_1, t11_2, t11_3, ts[9]}, ts[11]);
    
    info.eval->multiply(ts[00], ts[01], vs[3]); // __v3 = __t00 * __t01
    info.eval->relinearize_inplace(vs[3], rk);
    
    // __t14 = blend(__s0@000000000000000000000000000000001000100000000000000000, __t02@000000000010000000000000000000000010000000100000000000)
    ctxt t14_1;
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000001000100000000000000000"], t14_1);
    info.eval->add(t14_1, ts[02], ts[14]);
    
    
    // __t15 = blend(__s12@000000000000000000000000000000000000100000000000000000, __s23@000000000000000000000000000000000000000000100000000000, __t03@000000000010000000000000000000001010000000000000000000)
    ctxt t15_1, t15_2;
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000000000000100000000000000000"], t15_1);
    info.eval->multiply_plain(ss[23], bits["000000000000000000000000000000000000000000100000000000"], t15_2);
    info.eval->add_many({t15_1, t15_2, ts[03]}, ts[15]);
    
    info.eval->multiply(ts[04], ts[05], vs[4]); // __v4 = __t04 * __t05
    info.eval->relinearize_inplace(vs[4], rk);
    
    // __t18 = blend(__s1@000000000000000000000000000000000001100000000000000000, __s0@000000000000000000000000000000000000010000000000000000, __t06@000000000010000000000000000000000110000000010000000000)
    ctxt t18_1, t18_2;
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000001100000000000000000"], t18_1);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000010000000000000000"], t18_2);
    info.eval->add_many({t18_1, t18_2, ts[06]}, ts[18]);
    
    
    // __t19 = blend(__s7@000000000010000000000000000000000000000000000000000000, __s3@000000000000000000000000000000000100000000010000000000, __s11@000000000000000000000000000000000010000000000000000000, __s9@000000000000000000000000000000000001000000000000000000, __s18@000000000000000000000000000000000000100000000000000000, __t07@000000000000000000000000000000000000010000000000000000)
    ctxt t19_1, t19_2, t19_3, t19_4, t19_5;
    info.eval->multiply_plain(ss[7], bits["000000000010000000000000000000000000000000000000000000"], t19_1);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000000000100000000010000000000"], t19_2);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000010000000000000000000"], t19_3);
    info.eval->multiply_plain(ss[9], bits["000000000000000000000000000000000001000000000000000000"], t19_4);
    info.eval->multiply_plain(ss[18], bits["000000000000000000000000000000000000100000000000000000"], t19_5);
    info.eval->add_many({t19_1, t19_2, t19_3, t19_4, t19_5, ts[07]}, ts[19]);
    
    info.eval->multiply(ts[08], ts[09], vs[5]); // __v5 = __t08 * __t09
    info.eval->relinearize_inplace(vs[5], rk);
    
    // __t22 = blend(__s1@000000000010000000001000000000000000000000000000000000, __s2@000000000000100000000000000000000000000000000000000000, __t20@000000000000000000000000000000000110000000010000000000)
    ctxt t22_1, t22_2;
    info.eval->multiply_plain(ss[1], bits["000000000010000000001000000000000000000000000000000000"], t22_1);
    info.eval->multiply_plain(ss[2], bits["000000000000100000000000000000000000000000000000000000"], t22_2);
    info.eval->add_many({t22_1, t22_2, ts[20]}, ts[22]);
    
    
    // __t23 = blend(__s14@000000000010000000000000000000000000000000000000000000, __s15@000000000000100000000000000000000000000000000000000000, __s3@000000000000000000001000000000000000000000000000000000, __s17@000000000000000000000000000000000010000000000000000000, __t21@000000000000000000000000000000000100000000010000000000)
    ctxt t23_1, t23_2, t23_3, t23_4;
    info.eval->multiply_plain(ss[14], bits["000000000010000000000000000000000000000000000000000000"], t23_1);
    info.eval->multiply_plain(ss[15], bits["000000000000100000000000000000000000000000000000000000"], t23_2);
    info.eval->multiply_plain(ss[3], bits["000000000000000000001000000000000000000000000000000000"], t23_3);
    info.eval->multiply_plain(ss[17], bits["000000000000000000000000000000000010000000000000000000"], t23_4);
    info.eval->add_many({t23_1, t23_2, t23_3, t23_4, ts[21]}, ts[23]);
    
    info.eval->multiply(ts[22], ts[23], vs[6]); // __v6 = __t22 * __t23
    info.eval->relinearize_inplace(vs[6], rk);
    
    // __t24 = blend(__v6@000000000010000000000000000000000000000000000000000000, __v3@000000000000000000000000000000000010000000010000000000)
    ctxt t24_1, t24_2;
    info.eval->multiply_plain(vs[6], bits["000000000010000000000000000000000000000000000000000000"], t24_1);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000010000000010000000000"], t24_2);
    info.eval->add(t24_1, t24_2, ts[24]);
    
    
    // __t25 = blend(__v3@000000000010000000000000000000000000000000000000000000, __v2@000000000000000000000000000000000010000000000000000000, __v5@000000000000000000000000000000000000000000010000000000)
    ctxt t25_1, t25_2, t25_3;
    info.eval->multiply_plain(vs[3], bits["000000000010000000000000000000000000000000000000000000"], t25_1);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000010000000000000000000"], t25_2);
    info.eval->multiply_plain(vs[5], bits["000000000000000000000000000000000000000000010000000000"], t25_3);
    info.eval->add_many({t25_1, t25_2, t25_3}, ts[25]);
    
    info.eval->add(ts[24], ts[25], vs[7]); // __v7 = __t24 + __t25
    
    // __t26 = blend(__v7@000000000010000000000000000000000000000000010000000000, __v2@000000000000000000000000000000000100000000100000000000, __v5@000000000000000000000000000000000011000000000000000000, __v4@000000000000000000000000000000000000100000000000000000)
    ctxt t26_1, t26_2, t26_3, t26_4;
    info.eval->multiply_plain(vs[7], bits["000000000010000000000000000000000000000000010000000000"], t26_1);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000100000000100000000000"], t26_2);
    info.eval->multiply_plain(vs[5], bits["000000000000000000000000000000000011000000000000000000"], t26_3);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000000100000000000000000"], t26_4);
    info.eval->add_many({t26_1, t26_2, t26_3, t26_4}, ts[26]);
    
    
    // __t27 = blend(__v2@000000000010000000000000000000000001000000000000000000, __v5@000000000000000000000000000000000100100000000000000000, __v6@000000000000000000000000000000000010000000010000000000, __v4@000000000000000000000000000000000000000000100000000000)
    ctxt t27_1, t27_2, t27_3, t27_4;
    info.eval->multiply_plain(vs[2], bits["000000000010000000000000000000000001000000000000000000"], t27_1);
    info.eval->multiply_plain(vs[5], bits["000000000000000000000000000000000100100000000000000000"], t27_2);
    info.eval->multiply_plain(vs[6], bits["000000000000000000000000000000000010000000010000000000"], t27_3);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000000000000100000000000"], t27_4);
    info.eval->add_many({t27_1, t27_2, t27_3, t27_4}, ts[27]);
    
    info.eval->add(ts[26], ts[27], vs[8]); // __v8 = __t26 + __t27
    
    // __t30 = blend(__s0@000000000000100000000000000000000011000000000000000000, __s1@000000000000000000000000000000001000010000000000000000, __s2@000000000000000000000000000000000000100000000000000000, __t28@000000000010000000000000000000000000000000000000000000)
    ctxt t30_1, t30_2, t30_3;
    info.eval->multiply_plain(ss[0], bits["000000000000100000000000000000000011000000000000000000"], t30_1);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000001000010000000000000000"], t30_2);
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000000100000000000000000"], t30_3);
    info.eval->add_many({t30_1, t30_2, t30_3, ts[28]}, ts[30]);
    
    
    // __t31 = blend(__s22@000000000010000000000000000000000000000000000000000000, __s8@000000000000000000000000000000001000000000000000000000, __s13@000000000000000000000000000000000000010000000000000000, __t29@000000000000100000000000000000000011100000000000000000)
    ctxt t31_1, t31_2, t31_3;
    info.eval->multiply_plain(ss[22], bits["000000000010000000000000000000000000000000000000000000"], t31_1);
    info.eval->multiply_plain(ss[8], bits["000000000000000000000000000000001000000000000000000000"], t31_2);
    info.eval->multiply_plain(ss[13], bits["000000000000000000000000000000000000010000000000000000"], t31_3);
    info.eval->add_many({t31_1, t31_2, t31_3, ts[29]}, ts[31]);
    
    info.eval->multiply(ts[20], ts[21], vs[9]); // __v9 = __t20 * __t21
    info.eval->relinearize_inplace(vs[9], rk);
    
    // __t32 = blend(__v5@000000000010000000000000000000000000000000000000000000, __v2@000000000000100000000000000000000000000000000000000000, __v6@000000000000000000001000000000000000000000000000000000, __v9@000000000000000000000000000000001000010000000000000000, __v8@000000000000000000000000000000000010000000000000000000)
    ctxt t32_1, t32_2, t32_3, t32_4, t32_5;
    info.eval->multiply_plain(vs[5], bits["000000000010000000000000000000000000000000000000000000"], t32_1);
    info.eval->multiply_plain(vs[2], bits["000000000000100000000000000000000000000000000000000000"], t32_2);
    info.eval->multiply_plain(vs[6], bits["000000000000000000001000000000000000000000000000000000"], t32_3);
    info.eval->multiply_plain(vs[9], bits["000000000000000000000000000000001000010000000000000000"], t32_4);
    info.eval->multiply_plain(vs[8], bits["000000000000000000000000000000000010000000000000000000"], t32_5);
    info.eval->add_many({t32_1, t32_2, t32_3, t32_4, t32_5}, ts[32]);
    
    
    // __t33 = blend(__v9@000000000010000000000000000000000000000000000000000000, __v6@000000000000100000000000000000000000000000000000000000, __v2@000000000000000000001000000000000000010000000000000000, __v3@000000000000000000000000000000001000000000000000000000, __v4@000000000000000000000000000000000010000000000000000000)
    ctxt t33_1, t33_2, t33_3, t33_4, t33_5;
    info.eval->multiply_plain(vs[9], bits["000000000010000000000000000000000000000000000000000000"], t33_1);
    info.eval->multiply_plain(vs[6], bits["000000000000100000000000000000000000000000000000000000"], t33_2);
    info.eval->multiply_plain(vs[2], bits["000000000000000000001000000000000000010000000000000000"], t33_3);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000001000000000000000000000"], t33_4);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000010000000000000000000"], t33_5);
    info.eval->add_many({t33_1, t33_2, t33_3, t33_4, t33_5}, ts[33]);
    
    info.eval->add(ts[22], ts[23], vs[10]); // __v10 = __t22 + __t23
    
    // __t34 = blend(__v10@000000000010100000001000000000001000010000000000000000, __v8@000000000000000000000000000000000101100000100000000000, __v7@000000000000000000000000000000000010000000000000000000)
    ctxt t34_1, t34_2, t34_3;
    info.eval->multiply_plain(vs[10], bits["000000000010100000001000000000001000010000000000000000"], t34_1);
    info.eval->multiply_plain(vs[8], bits["000000000000000000000000000000000101100000100000000000"], t34_2);
    info.eval->multiply_plain(vs[7], bits["000000000000000000000000000000000010000000000000000000"], t34_3);
    info.eval->add_many({t34_1, t34_2, t34_3}, ts[34]);
    
    
    // __t35 = blend(__v4@000000000010000000000000000000001000000000000000000000, __v9@000000000000100000000000000000000011100000000000000000, __v3@000000000000000000001000000000000000000000100000000000, __v6@000000000000000000000000000000000100000000000000000000, __v5@000000000000000000000000000000000000010000000000000000)
    ctxt t35_1, t35_2, t35_3, t35_4, t35_5;
    info.eval->multiply_plain(vs[4], bits["000000000010000000000000000000001000000000000000000000"], t35_1);
    info.eval->multiply_plain(vs[9], bits["000000000000100000000000000000000011100000000000000000"], t35_2);
    info.eval->multiply_plain(vs[3], bits["000000000000000000001000000000000000000000100000000000"], t35_3);
    info.eval->multiply_plain(vs[6], bits["000000000000000000000000000000000100000000000000000000"], t35_4);
    info.eval->multiply_plain(vs[5], bits["000000000000000000000000000000000000010000000000000000"], t35_5);
    info.eval->add_many({t35_1, t35_2, t35_3, t35_4, t35_5}, ts[35]);
    
    info.eval->rotate_rows(vs[7], -34, gk, ss[24]); // __s24 = __v7 >> 34
    info.eval->rotate_rows(vs[7], -23, gk, ss[25]); // __s25 = __v7 >> 23
    info.eval->rotate_rows(vs[7], -12, gk, ss[26]); // __s26 = __v7 >> 12
    info.eval->rotate_rows(vs[7], -10, gk, ss[27]); // __s27 = __v7 >> 10
    info.eval->rotate_rows(vs[7], -8, gk, ss[28]); // __s28 = __v7 >> 8
    info.eval->rotate_rows(vs[7], -6, gk, ss[29]); // __s29 = __v7 >> 6
    info.eval->rotate_rows(vs[7], -2, gk, ss[30]); // __s30 = __v7 >> 2
    
    // __t36 = blend(__v8@000000000010000000000000000000000000000000000000000000, __v10@000000000000000000000000000000000010000000000000000000)
    ctxt t36_1, t36_2;
    info.eval->multiply_plain(vs[8], bits["000000000010000000000000000000000000000000000000000000"], t36_1);
    info.eval->multiply_plain(vs[10], bits["000000000000000000000000000000000010000000000000000000"], t36_2);
    info.eval->add(t36_1, t36_2, ts[36]);
    
    info.eval->multiply(ts[26], vs[7], vs[12]); // __v12 = __t26 * __v7
    info.eval->relinearize_inplace(vs[12], rk);
    info.eval->rotate_rows(vs[12], -36, gk, ss[31]); // __s31 = __v12 >> 36
    info.eval->rotate_rows(vs[12], -12, gk, ss[32]); // __s32 = __v12 >> 12
    
    // __t39 = blend(__s25@000000000000000000000000000000000000000000010000000000, __t27@000000000000000000000000000000000000000000001000000000)
    ctxt t39_1;
    info.eval->multiply_plain(ss[25], bits["000000000000000000000000000000000000000000010000000000"], t39_1);
    info.eval->add(t39_1, ts[27], ts[39]);
    
    
    // __t40 = blend(__v8@000000000000000000000000000000000000000000010000000000, __t28@000000000000000000000000000000000000000000001000000000)
    ctxt t40_1;
    info.eval->multiply_plain(vs[8], bits["000000000000000000000000000000000000000000010000000000"], t40_1);
    info.eval->add(t40_1, ts[28], ts[40]);
    
    info.eval->multiply(ts[29], ts[40], vs[13]); // __v13 = __t29 * __t40
    info.eval->relinearize_inplace(vs[13], rk);
    info.eval->multiply(ts[41], ss[8], vs[14]); // __v14 = __t41 * __s8
    info.eval->relinearize_inplace(vs[14], rk);
    info.eval->multiply(ts[42], ss[6], vs[15]); // __v15 = __t42 * __s6
    info.eval->relinearize_inplace(vs[15], rk);
    info.eval->multiply(ss[2], ss[8], vs[16]); // __v16 = __s2 * __s8
    info.eval->relinearize_inplace(vs[16], rk);
    
    // __t44 = blend(__s27@000000000000000000000000000000000000000000010000000000, __s0@000000000000000000000000000000000000000000001000000000)
    ctxt t44_1, t44_2;
    info.eval->multiply_plain(ss[27], bits["000000000000000000000000000000000000000000010000000000"], t44_1);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000001000000000"], t44_2);
    info.eval->add(t44_1, t44_2, ts[44]);
    
    
    // __t45 = blend(__s29@000000000000000000000000000000000000000000010000000000, __t38@000000000000000000000000000000000000000000001000000000)
    ctxt t45_1;
    info.eval->multiply_plain(ss[29], bits["000000000000000000000000000000000000000000010000000000"], t45_1);
    info.eval->add(t45_1, ts[38], ts[45]);
    
    info.eval->multiply(ts[44], ts[45], vs[17]); // __v17 = __t44 * __t45
    info.eval->relinearize_inplace(vs[17], rk);
    
    // __t46 = blend(__v13@000000000000000000000000000000000000000000010000000000, __v15@000000000000000000000000000000000000000000001000000000)
    ctxt t46_1, t46_2;
    info.eval->multiply_plain(vs[13], bits["000000000000000000000000000000000000000000010000000000"], t46_1);
    info.eval->multiply_plain(vs[15], bits["000000000000000000000000000000000000000000001000000000"], t46_2);
    info.eval->add(t46_1, t46_2, ts[46]);
    
    
    // __t47 = blend(__v17@000000000000000000000000000000000000000000010000000000, __v14@000000000000000000000000000000000000000000001000000000)
    ctxt t47_1, t47_2;
    info.eval->multiply_plain(vs[17], bits["000000000000000000000000000000000000000000010000000000"], t47_1);
    info.eval->multiply_plain(vs[14], bits["000000000000000000000000000000000000000000001000000000"], t47_2);
    info.eval->add(t47_1, t47_2, ts[47]);
    
    info.eval->add(ts[46], ts[47], vs[18]); // __v18 = __t46 + __t47
    info.eval->multiply(ss[1], ss[6], vs[19]); // __v19 = __s1 * __s6
    info.eval->relinearize_inplace(vs[19], rk);
    info.eval->add(vs[19], vs[16], vs[20]); // __v20 = __v19 + __v16
    
    // __t48 = blend(__v18@000000000000000000000000000000000000000000001000000000, __s31@000000000000000000000000000000000000000000000010000000)
    ctxt t48_1, t48_2;
    info.eval->multiply_plain(vs[18], bits["000000000000000000000000000000000000000000001000000000"], t48_1);
    info.eval->multiply_plain(ss[31], bits["000000000000000000000000000000000000000000000010000000"], t48_2);
    info.eval->add(t48_1, t48_2, ts[48]);
    
    
    // __t49 = blend(__v13@000000000000000000000000000000000000000000001000000000, __s32@000000000000000000000000000000000000000000000010000000)
    ctxt t49_1, t49_2;
    info.eval->multiply_plain(vs[13], bits["000000000000000000000000000000000000000000001000000000"], t49_1);
    info.eval->multiply_plain(ss[32], bits["000000000000000000000000000000000000000000000010000000"], t49_2);
    info.eval->add(t49_1, t49_2, ts[49]);
    
    info.eval->add(ts[48], ts[49], vs[21]); // __v21 = __t48 + __t49
    info.eval->add(vs[20], vs[17], vs[22]); // __v22 = __v20 + __v17
    
    // __t50 = blend(__v21@000000000000000000000000000000000000000000001000000000, __s24@000000000000000000000000000000000000000000000010000000)
    ctxt t50_1, t50_2;
    info.eval->multiply_plain(vs[21], bits["000000000000000000000000000000000000000000001000000000"], t50_1);
    info.eval->multiply_plain(ss[24], bits["000000000000000000000000000000000000000000000010000000"], t50_2);
    info.eval->add(t50_1, t50_2, ts[50]);
    
    
    // __t51 = blend(__s26@000000000000000000000000000000000000000000001000000000, __v21@000000000000000000000000000000000000000000000010000000)
    ctxt t51_1, t51_2;
    info.eval->multiply_plain(ss[26], bits["000000000000000000000000000000000000000000001000000000"], t51_1);
    info.eval->multiply_plain(vs[21], bits["000000000000000000000000000000000000000000000010000000"], t51_2);
    info.eval->add(t51_1, t51_2, ts[51]);
    
    info.eval->multiply(ts[50], ts[51], vs[23]); // __v23 = __t50 * __t51
    info.eval->relinearize_inplace(vs[23], rk);
    info.eval->rotate_rows(vs[23], -2, gk, ss[33]); // __s33 = __v23 >> 2
    
    // __t52 = blend(__s28@000000000000000000000000000000000000000000010000000000, __v22@000000000000000000000000000000000000000000001000000000)
    ctxt t52_1, t52_2;
    info.eval->multiply_plain(ss[28], bits["000000000000000000000000000000000000000000010000000000"], t52_1);
    info.eval->multiply_plain(vs[22], bits["000000000000000000000000000000000000000000001000000000"], t52_2);
    info.eval->add(t52_1, t52_2, ts[52]);
    
    
    // __t53 = blend(__v18@000000000000000000000000000000000000000000010000000000, __s30@000000000000000000000000000000000000000000001000000000)
    ctxt t53_1, t53_2;
    info.eval->multiply_plain(vs[18], bits["000000000000000000000000000000000000000000010000000000"], t53_1);
    info.eval->multiply_plain(ss[30], bits["000000000000000000000000000000000000000000001000000000"], t53_2);
    info.eval->add(t53_1, t53_2, ts[53]);
    
    info.eval->multiply(ts[52], ts[53], vs[24]); // __v24 = __t52 * __t53
    info.eval->relinearize_inplace(vs[24], rk);
    info.eval->rotate_rows(vs[24], -5, gk, ss[34]); // __s34 = __v24 >> 5
    info.eval->add(vs[24], vs[23], vs[25]); // __v25 = __v24 + __v23
    info.eval->multiply(ss[28], vs[25], vs[26]); // __v26 = __s28 * __v25
    info.eval->relinearize_inplace(vs[26], rk);
    info.eval->rotate_rows(vs[26], -4, gk, ss[35]); // __s35 = __v26 >> 4
    info.eval->sub(ss[33], ss[35], vs[27]); // __v27 = __s33 - __s35
    info.eval->add(vs[27], ss[34], vs[28]); // __v28 = __v27 + __s34
    return vs[28];
}
    