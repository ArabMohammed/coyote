
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "000000000000000000000000000000000001000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000001000001000000000000000000000000000", info);
    add_bitstring(bits, "000000000000001000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000100000010010000000000100000000", info);
    add_bitstring(bits, "000000000001000000000000100000000001000000000001010000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000010001000000101010000001000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000001000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000000000000010010000", info);
    add_bitstring(bits, "000000000000000000000000000001000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000001000000", info);
    add_bitstring(bits, "000000000000000000000001000000000000000000000000000000000010000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000100000000", info);
    add_bitstring(bits, "000000000000000100000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000100000000001000000", info);
    add_bitstring(bits, "000000000000000000000001000000000000000000000100000000010000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000100000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000001000000000000", info);
    add_bitstring(bits, "000000000000000000000001000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000001100000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000010000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000001000000000000000001000000", info);
    add_bitstring(bits, "000000000000000000000000000000000010000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000010000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000010000", info);
    add_bitstring(bits, "000000000000000000000000000000000000001000000000100000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000100000", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000000000000000010000", info);
    add_bitstring(bits, "000000000000000000000001000000000000000000000100000000010010000", info);
    add_bitstring(bits, "000000000000000000000001000000000000000000000000000000010000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000100000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000001000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000000000000010000000", info);
    add_bitstring(bits, "000000000000000000000010000101011000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000001000000000000000100000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000010000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000010010000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(37);
    ts[0] = encrypt_input("000000110110011110011111111101111100000011111110101111111011110111111111110110101111111111111111111111111111101111111111111111111111111111111101111110011110011010111101111111111111111111111110111101111001111011011111111101111111111111111111110", info);
    ts[2] = encrypt_input("111101101000000001101100111111111000000011110110101111111111111111111111011110111111111110111111111111110110111111011111111101111111111111111111111010011011011011110111111111110111111111011011110111101011110110101111111111011111111111111111011", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[25];
    ctxt ss[50];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -23, gk, ss[0]); // __s0 = __v0 >> 23
    info.eval->rotate_rows(vs[0], -2, gk, ss[1]); // __s1 = __v0 >> 2
    info.eval->rotate_rows(vs[0], -24, gk, ss[2]); // __s2 = __v0 >> 24
    info.eval->rotate_rows(vs[0], -9, gk, ss[3]); // __s3 = __v0 >> 9
    info.eval->rotate_rows(vs[0], -7, gk, ss[4]); // __s4 = __v0 >> 7
    info.eval->rotate_rows(vs[0], -61, gk, ss[5]); // __s5 = __v0 >> 61
    info.eval->rotate_rows(vs[0], -59, gk, ss[6]); // __s6 = __v0 >> 59
    info.eval->rotate_rows(vs[0], -30, gk, ss[7]); // __s7 = __v0 >> 30
    info.eval->rotate_rows(vs[0], -60, gk, ss[8]); // __s8 = __v0 >> 60
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -23, gk, ss[9]); // __s9 = __v1 >> 23
    info.eval->rotate_rows(vs[1], -13, gk, ss[10]); // __s10 = __v1 >> 13
    info.eval->rotate_rows(vs[1], -2, gk, ss[11]); // __s11 = __v1 >> 2
    info.eval->rotate_rows(vs[1], -9, gk, ss[12]); // __s12 = __v1 >> 9
    info.eval->rotate_rows(vs[1], -7, gk, ss[13]); // __s13 = __v1 >> 7
    info.eval->rotate_rows(vs[1], -61, gk, ss[14]); // __s14 = __v1 >> 61
    info.eval->rotate_rows(vs[1], -59, gk, ss[15]); // __s15 = __v1 >> 59
    info.eval->rotate_rows(vs[1], -31, gk, ss[16]); // __s16 = __v1 >> 31
    
    // __t4 = blend(__s1@000000000000000000000010000101011000000000000000000000000000000, __s4@000000000000000000000000000000000001000000000000000000000010000, __s6@000000000000000000000000000000000000000000000000000000010000000)
    ctxt t4_1, t4_2, t4_3;
    info.eval->multiply_plain(ss[1], bits["000000000000000000000010000101011000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000001000000000000000000000010000"], t4_2);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000000000000000000000000000000000000010000000"], t4_3);
    info.eval->add_many({t4_1, t4_2, t4_3}, ts[4]);
    
    
    // __t5 = blend(__s11@000000000000000000000010000101011000000000000000000000000000000, __s13@000000000000000000000000000000000001000000000000000000000010000, __s15@000000000000000000000000000000000000000000000000000000010000000)
    ctxt t5_1, t5_2, t5_3;
    info.eval->multiply_plain(ss[11], bits["000000000000000000000010000101011000000000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[13], bits["000000000000000000000000000000000001000000000000000000000010000"], t5_2);
    info.eval->multiply_plain(ss[15], bits["000000000000000000000000000000000000000000000000000000010000000"], t5_3);
    info.eval->add_many({t5_1, t5_2, t5_3}, ts[5]);
    
    info.eval->multiply(ts[4], ts[5], vs[2]); // __v2 = __t4 * __t5
    info.eval->relinearize_inplace(vs[2], rk);
    info.eval->rotate_rows(vs[2], -23, gk, ss[17]); // __s17 = __v2 >> 23
    info.eval->rotate_rows(vs[2], -7, gk, ss[18]); // __s18 = __v2 >> 7
    info.eval->rotate_rows(vs[2], -2, gk, ss[19]); // __s19 = __v2 >> 2
    
    // __t6 = blend(__s1@000000000000000000000001000000000000000000000100000000010000000, __s0@000000000000000000000000000001000000000000000000000000000000000, __s6@000000000000000000000000000000000001000000000000000000000000000, __s8@000000000000000000000000000000000000000000000000000000000010000)
    ctxt t6_1, t6_2, t6_3, t6_4;
    info.eval->multiply_plain(ss[1], bits["000000000000000000000001000000000000000000000100000000010000000"], t6_1);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000001000000000000000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000000000000000001000000000000000000000000000"], t6_3);
    info.eval->multiply_plain(ss[8], bits["000000000000000000000000000000000000000000000000000000000010000"], t6_4);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4}, ts[6]);
    
    
    // __t7 = blend(__s11@000000000000000000000001000000000000000000000100000000010010000, __s16@000000000000000000000000000001000000000000000000000000000000000, __s15@000000000000000000000000000000000001000000000000000000000000000)
    ctxt t7_1, t7_2, t7_3;
    info.eval->multiply_plain(ss[11], bits["000000000000000000000001000000000000000000000100000000010010000"], t7_1);
    info.eval->multiply_plain(ss[16], bits["000000000000000000000000000001000000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[15], bits["000000000000000000000000000000000001000000000000000000000000000"], t7_3);
    info.eval->add_many({t7_1, t7_2, t7_3}, ts[7]);
    
    info.eval->multiply(ts[6], ts[7], vs[3]); // __v3 = __t6 * __t7
    info.eval->relinearize_inplace(vs[3], rk);
    info.eval->rotate_rows(vs[3], -2, gk, ss[20]); // __s20 = __v3 >> 2
    
    // __t8 = blend(__s2@000000000000000000000000000000000001000000000000000000000000000, __s1@000000000000000000000000000000000000001000000000000000000000000, __s4@000000000000000000000000000000000000000000000000000000010000000, __s5@000000000000000000000000000000000000000000000000000000001000000, __s6@000000000000000000000000000000000000000000000000000000000010000)
    ctxt t8_1, t8_2, t8_3, t8_4, t8_5;
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000001000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000000001000000000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000000000000000000000000010000000"], t8_3);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000000000000000000000000001000000"], t8_4);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000000000000000000000000000000000000000010000"], t8_5);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4, t8_5}, ts[8]);
    
    
    // __t9 = blend(__s9@000000000000000000000000000000000001000000000000000000000000000, __s11@000000000000000000000000000000000000001000000000000000001000000, __s13@000000000000000000000000000000000000000000000000000000010000000, __s15@000000000000000000000000000000000000000000000000000000000010000)
    ctxt t9_1, t9_2, t9_3, t9_4;
    info.eval->multiply_plain(ss[9], bits["000000000000000000000000000000000001000000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000000001000000000000000001000000"], t9_2);
    info.eval->multiply_plain(ss[13], bits["000000000000000000000000000000000000000000000000000000010000000"], t9_3);
    info.eval->multiply_plain(ss[15], bits["000000000000000000000000000000000000000000000000000000000010000"], t9_4);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4}, ts[9]);
    
    info.eval->multiply(ts[8], ts[9], vs[4]); // __v4 = __t8 * __t9
    info.eval->relinearize_inplace(vs[4], rk);
    info.eval->rotate_rows(vs[4], -7, gk, ss[21]); // __s21 = __v4 >> 7
    info.eval->rotate_rows(vs[4], -42, gk, ss[22]); // __s22 = __v4 >> 42
    
    // __t10 = blend(__s1@000000000001000000000000100000000001000000000001010000000000000, __s0@000000000000000000000000000000000000000000000000000000010000000, __s3@000000000000000000000000000000000000000000000000000000000010000)
    ctxt t10_1, t10_2, t10_3;
    info.eval->multiply_plain(ss[1], bits["000000000001000000000000100000000001000000000001010000000000000"], t10_1);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000000000000000010000000"], t10_2);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000000000000000000000000000000000010000"], t10_3);
    info.eval->add_many({t10_1, t10_2, t10_3}, ts[10]);
    
    
    // __t11 = blend(__s11@000000000001000000000000100000000001000000000001010000000000000, __s9@000000000000000000000000000000000000000000000000000000010000000, __s12@000000000000000000000000000000000000000000000000000000000010000)
    ctxt t11_1, t11_2, t11_3;
    info.eval->multiply_plain(ss[11], bits["000000000001000000000000100000000001000000000001010000000000000"], t11_1);
    info.eval->multiply_plain(ss[9], bits["000000000000000000000000000000000000000000000000000000010000000"], t11_2);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000000000000000000000000000000000010000"], t11_3);
    info.eval->add_many({t11_1, t11_2, t11_3}, ts[11]);
    
    info.eval->multiply(ts[10], ts[11], vs[5]); // __v5 = __t10 * __t11
    info.eval->relinearize_inplace(vs[5], rk);
    info.eval->rotate_rows(vs[5], -23, gk, ss[23]); // __s23 = __v5 >> 23
    info.eval->rotate_rows(vs[5], -2, gk, ss[24]); // __s24 = __v5 >> 2
    info.eval->rotate_rows(vs[5], -7, gk, ss[25]); // __s25 = __v5 >> 7
    
    // __t12 = blend(__v5@000000000000000000000000000000000001000000000000000000000000000, __v3@000000000000000000000000000000000000000000000000000000010000000, __v2@000000000000000000000000000000000000000000000000000000000010000)
    ctxt t12_1, t12_2, t12_3;
    info.eval->multiply_plain(vs[5], bits["000000000000000000000000000000000001000000000000000000000000000"], t12_1);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000000000000000000000000010000000"], t12_2);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000000000000000000000000000010000"], t12_3);
    info.eval->add_many({t12_1, t12_2, t12_3}, ts[12]);
    
    
    // __t13 = blend(__v4@000000000000000000000000000000000001000000000000000000000000000, __v5@000000000000000000000000000000000000000000000000000000010010000)
    ctxt t13_1, t13_2;
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000001000000000000000000000000000"], t13_1);
    info.eval->multiply_plain(vs[5], bits["000000000000000000000000000000000000000000000000000000010010000"], t13_2);
    info.eval->add(t13_1, t13_2, ts[13]);
    
    info.eval->add(ts[12], ts[13], vs[6]); // __v6 = __t12 + __t13
    
    // __t14 = blend(__s1@000000000000000000000000001000000000000000100000000000000000000, __s5@000000000000000000000000000000000001000000000000000000000010000, __s3@000000000000000000000000000000000000000000000000000000010000000)
    ctxt t14_1, t14_2, t14_3;
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000001000000000000000100000000000000000000"], t14_1);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000001000000000000000000000010000"], t14_2);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000000000000000000000000000000010000000"], t14_3);
    info.eval->add_many({t14_1, t14_2, t14_3}, ts[14]);
    
    
    // __t15 = blend(__s11@000000000000000000000000001000000000000000100000000000000000000, __s14@000000000000000000000000000000000001000000000000000000000010000, __s12@000000000000000000000000000000000000000000000000000000010000000)
    ctxt t15_1, t15_2, t15_3;
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000001000000000000000100000000000000000000"], t15_1);
    info.eval->multiply_plain(ss[14], bits["000000000000000000000000000000000001000000000000000000000010000"], t15_2);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000000000000000000000000000000010000000"], t15_3);
    info.eval->add_many({t15_1, t15_2, t15_3}, ts[15]);
    
    info.eval->multiply(ts[14], ts[15], vs[7]); // __v7 = __t14 * __t15
    info.eval->relinearize_inplace(vs[7], rk);
    info.eval->rotate_rows(vs[7], -23, gk, ss[26]); // __s26 = __v7 >> 23
    info.eval->rotate_rows(vs[7], -7, gk, ss[27]); // __s27 = __v7 >> 7
    
    // __t16 = blend(__v2@000000000000000000000000000000000001000000000000000000000000000, __v4@000000000000000000000000000000000000000000000000000000010000000, __v7@000000000000000000000000000000000000000000000000000000000010000)
    ctxt t16_1, t16_2, t16_3;
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000001000000000000000000000000000"], t16_1);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000000000000000000000000010000000"], t16_2);
    info.eval->multiply_plain(vs[7], bits["000000000000000000000000000000000000000000000000000000000010000"], t16_3);
    info.eval->add_many({t16_1, t16_2, t16_3}, ts[16]);
    
    info.eval->add(vs[6], ts[16], vs[8]); // __v8 = __v6 + __t16
    
    // __t17 = blend(__s7@000000000000000000000001000000000000000000000000000000000000000, __s1@000000000000000000000000000000000100000010010000000000100000000, __s3@000000000000000000000000000000000001000000000000000000000000000, __s5@000000000000000000000000000000000000000000000000000000010000000, __s0@000000000000000000000000000000000000000000000000000000000010000)
    ctxt t17_1, t17_2, t17_3, t17_4, t17_5;
    info.eval->multiply_plain(ss[7], bits["000000000000000000000001000000000000000000000000000000000000000"], t17_1);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000100000010010000000000100000000"], t17_2);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000000000001000000000000000000000000000"], t17_3);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000000000000000000000000010000000"], t17_4);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000000000000000000010000"], t17_5);
    info.eval->add_many({t17_1, t17_2, t17_3, t17_4, t17_5}, ts[17]);
    
    
    // __t18 = blend(__s9@000000000000000000000001000000000000000000000000000000000010000, __s11@000000000000000000000000000000000100000010010000000000100000000, __s12@000000000000000000000000000000000001000000000000000000000000000, __s14@000000000000000000000000000000000000000000000000000000010000000)
    ctxt t18_1, t18_2, t18_3, t18_4;
    info.eval->multiply_plain(ss[9], bits["000000000000000000000001000000000000000000000000000000000010000"], t18_1);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000100000010010000000000100000000"], t18_2);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000000000001000000000000000000000000000"], t18_3);
    info.eval->multiply_plain(ss[14], bits["000000000000000000000000000000000000000000000000000000010000000"], t18_4);
    info.eval->add_many({t18_1, t18_2, t18_3, t18_4}, ts[18]);
    
    info.eval->multiply(ts[17], ts[18], vs[9]); // __v9 = __t17 * __t18
    info.eval->relinearize_inplace(vs[9], rk);
    info.eval->rotate_rows(vs[9], -23, gk, ss[28]); // __s28 = __v9 >> 23
    info.eval->rotate_rows(vs[9], -7, gk, ss[29]); // __s29 = __v9 >> 7
    info.eval->rotate_rows(vs[9], -2, gk, ss[30]); // __s30 = __v9 >> 2
    
    // __t19 = blend(__v3@000000000000000000000001000000000000000000000000000000000000000, __v9@000000000000000000000000000000000001000000000000000000000000000, __v7@000000000000000000000000000000000000000000000000000000010000000, __v4@000000000000000000000000000000000000000000000000000000000010000)
    ctxt t19_1, t19_2, t19_3, t19_4;
    info.eval->multiply_plain(vs[3], bits["000000000000000000000001000000000000000000000000000000000000000"], t19_1);
    info.eval->multiply_plain(vs[9], bits["000000000000000000000000000000000001000000000000000000000000000"], t19_2);
    info.eval->multiply_plain(vs[7], bits["000000000000000000000000000000000000000000000000000000010000000"], t19_3);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000000000000000000000000000010000"], t19_4);
    info.eval->add_many({t19_1, t19_2, t19_3, t19_4}, ts[19]);
    
    
    // __t20 = blend(__v9@000000000000000000000001000000000000000000000000000000010000000, __v7@000000000000000000000000000000000001000000000000000000000000000, __v3@000000000000000000000000000000000000000000000000000000000010000)
    ctxt t20_1, t20_2, t20_3;
    info.eval->multiply_plain(vs[9], bits["000000000000000000000001000000000000000000000000000000010000000"], t20_1);
    info.eval->multiply_plain(vs[7], bits["000000000000000000000000000000000001000000000000000000000000000"], t20_2);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000000000000000000000000000010000"], t20_3);
    info.eval->add_many({t20_1, t20_2, t20_3}, ts[20]);
    
    info.eval->add(ts[19], ts[20], vs[10]); // __v10 = __t19 + __t20
    info.eval->rotate_rows(vs[10], -12, gk, ss[31]); // __s31 = __v10 >> 12
    
    // __t21 = blend(__v2@000000000000000000000000000001000000000000000000000000000000000, __v10@000000000000000000000000000000000001000000000000000000010010000)
    ctxt t21_1, t21_2;
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000001000000000000000000000000000000000"], t21_1);
    info.eval->multiply_plain(vs[10], bits["000000000000000000000000000000000001000000000000000000010010000"], t21_2);
    info.eval->add(t21_1, t21_2, ts[21]);
    
    
    // __t22 = blend(__v3@000000000000000000000000000001000001000000000000000000000000000, __v2@000000000000000000000000000000000000000000000000000000010000000, __v9@000000000000000000000000000000000000000000000000000000000010000)
    ctxt t22_1, t22_2, t22_3;
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000001000001000000000000000000000000000"], t22_1);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000000000000000000000000010000000"], t22_2);
    info.eval->multiply_plain(vs[9], bits["000000000000000000000000000000000000000000000000000000000010000"], t22_3);
    info.eval->add_many({t22_1, t22_2, t22_3}, ts[22]);
    
    info.eval->add(ts[21], ts[22], vs[11]); // __v11 = __t21 + __t22
    info.eval->rotate_rows(vs[11], -19, gk, ss[32]); // __s32 = __v11 >> 19
    
    // __t23 = blend(__s1@000000000000001100000000010000000000000000000000000000000000000, __v8@000000000000000000000000000000000001000000000000000000010000000, __v11@000000000000000000000000000000000000000000000000000000000010000)
    ctxt t23_1, t23_2, t23_3;
    info.eval->multiply_plain(ss[1], bits["000000000000001100000000010000000000000000000000000000000000000"], t23_1);
    info.eval->multiply_plain(vs[8], bits["000000000000000000000000000000000001000000000000000000010000000"], t23_2);
    info.eval->multiply_plain(vs[11], bits["000000000000000000000000000000000000000000000000000000000010000"], t23_3);
    info.eval->add_many({t23_1, t23_2, t23_3}, ts[23]);
    
    
    // __t24 = blend(__s10@000000000000001000000000000000000000000000000000000000000000000, __s11@000000000000000100000000010000000000000000000000000000000000000, __v11@000000000000000000000000000000000001000000000000000000010000000, __v8@000000000000000000000000000000000000000000000000000000000010000)
    ctxt t24_1, t24_2, t24_3, t24_4;
    info.eval->multiply_plain(ss[10], bits["000000000000001000000000000000000000000000000000000000000000000"], t24_1);
    info.eval->multiply_plain(ss[11], bits["000000000000000100000000010000000000000000000000000000000000000"], t24_2);
    info.eval->multiply_plain(vs[11], bits["000000000000000000000000000000000001000000000000000000010000000"], t24_3);
    info.eval->multiply_plain(vs[8], bits["000000000000000000000000000000000000000000000000000000000010000"], t24_4);
    info.eval->add_many({t24_1, t24_2, t24_3, t24_4}, ts[24]);
    
    info.eval->multiply(ts[23], ts[24], vs[12]); // __v12 = __t23 * __t24
    info.eval->relinearize_inplace(vs[12], rk);
    info.eval->rotate_rows(vs[12], -24, gk, ss[33]); // __s33 = __v12 >> 24
    info.eval->rotate_rows(vs[12], -23, gk, ss[34]); // __s34 = __v12 >> 23
    info.eval->rotate_rows(vs[12], -15, gk, ss[35]); // __s35 = __v12 >> 15
    info.eval->rotate_rows(vs[12], -2, gk, ss[36]); // __s36 = __v12 >> 2
    info.eval->rotate_rows(vs[12], -55, gk, ss[37]); // __s37 = __v12 >> 55
    
    // __t25 = blend(__s23@000000000000000000000000000000000010000000000000000000000000000, __s33@000000000000000000000000000000000000001000000000000000000000000, __s30@000000000000000000000000000000000000000000000100000000001000000, __s20@000000000000000000000000000000000000000000000001000000000000000, __s32@000000000000000000000000000000000000000000000000100000000000000, __s24@000000000000000000000000000000000000000000000000010000000000000, __s35@000000000000000000000000000000000000000000000000001000000000000)
    ctxt t25_1, t25_2, t25_3, t25_4, t25_5, t25_6, t25_7;
    info.eval->multiply_plain(ss[23], bits["000000000000000000000000000000000010000000000000000000000000000"], t25_1);
    info.eval->multiply_plain(ss[33], bits["000000000000000000000000000000000000001000000000000000000000000"], t25_2);
    info.eval->multiply_plain(ss[30], bits["000000000000000000000000000000000000000000000100000000001000000"], t25_3);
    info.eval->multiply_plain(ss[20], bits["000000000000000000000000000000000000000000000001000000000000000"], t25_4);
    info.eval->multiply_plain(ss[32], bits["000000000000000000000000000000000000000000000000100000000000000"], t25_5);
    info.eval->multiply_plain(ss[24], bits["000000000000000000000000000000000000000000000000010000000000000"], t25_6);
    info.eval->multiply_plain(ss[35], bits["000000000000000000000000000000000000000000000000001000000000000"], t25_7);
    info.eval->add_many({t25_1, t25_2, t25_3, t25_4, t25_5, t25_6, t25_7}, ts[25]);
    
    
    // __t26 = blend(__s18@000000000000000000000000000000000010000000000000000000000000000, __s34@000000000000000000000000000000000000001000000000100000000000000, __s17@000000000000000000000000000000000000000000000100000000000000000, __s23@000000000000000000000000000000000000000000000001000000000000000, __s26@000000000000000000000000000000000000000000000000010000000000000, __s37@000000000000000000000000000000000000000000000000001000000000000, __s28@000000000000000000000000000000000000000000000000000000001000000)
    ctxt t26_1, t26_2, t26_3, t26_4, t26_5, t26_6, t26_7;
    info.eval->multiply_plain(ss[18], bits["000000000000000000000000000000000010000000000000000000000000000"], t26_1);
    info.eval->multiply_plain(ss[34], bits["000000000000000000000000000000000000001000000000100000000000000"], t26_2);
    info.eval->multiply_plain(ss[17], bits["000000000000000000000000000000000000000000000100000000000000000"], t26_3);
    info.eval->multiply_plain(ss[23], bits["000000000000000000000000000000000000000000000001000000000000000"], t26_4);
    info.eval->multiply_plain(ss[26], bits["000000000000000000000000000000000000000000000000010000000000000"], t26_5);
    info.eval->multiply_plain(ss[37], bits["000000000000000000000000000000000000000000000000001000000000000"], t26_6);
    info.eval->multiply_plain(ss[28], bits["000000000000000000000000000000000000000000000000000000001000000"], t26_7);
    info.eval->add_many({t26_1, t26_2, t26_3, t26_4, t26_5, t26_6, t26_7}, ts[26]);
    
    info.eval->add(ts[25], ts[26], vs[13]); // __v13 = __t25 + __t26
    info.eval->rotate_rows(vs[13], -6, gk, ss[38]); // __s38 = __v13 >> 6
    info.eval->rotate_rows(vs[13], -50, gk, ss[39]); // __s39 = __v13 >> 50
    
    // __t27 = blend(__v13@000000000000000000000000000000000010001000000101010000001000000, __s31@000000000000000000000000000000000001000000000000000000000000000)
    ctxt t27_1, t27_2;
    info.eval->multiply_plain(vs[13], bits["000000000000000000000000000000000010001000000101010000001000000"], t27_1);
    info.eval->multiply_plain(ss[31], bits["000000000000000000000000000000000001000000000000000000000000000"], t27_2);
    info.eval->add(t27_1, t27_2, ts[27]);
    
    
    // __t28 = blend(__s19@000000000000000000000000000000000010000000000000000000000000000, __s22@000000000000000000000000000000000001000000000000000000000000000, __s18@000000000000000000000000000000000000001000000000000000000000000, __s21@000000000000000000000000000000000000000000000100000000000000000, __s29@000000000000000000000000000000000000000000000001000000000000000, __s27@000000000000000000000000000000000000000000000000010000000000000, __s25@000000000000000000000000000000000000000000000000000000001000000)
    ctxt t28_1, t28_2, t28_3, t28_4, t28_5, t28_6, t28_7;
    info.eval->multiply_plain(ss[19], bits["000000000000000000000000000000000010000000000000000000000000000"], t28_1);
    info.eval->multiply_plain(ss[22], bits["000000000000000000000000000000000001000000000000000000000000000"], t28_2);
    info.eval->multiply_plain(ss[18], bits["000000000000000000000000000000000000001000000000000000000000000"], t28_3);
    info.eval->multiply_plain(ss[21], bits["000000000000000000000000000000000000000000000100000000000000000"], t28_4);
    info.eval->multiply_plain(ss[29], bits["000000000000000000000000000000000000000000000001000000000000000"], t28_5);
    info.eval->multiply_plain(ss[27], bits["000000000000000000000000000000000000000000000000010000000000000"], t28_6);
    info.eval->multiply_plain(ss[25], bits["000000000000000000000000000000000000000000000000000000001000000"], t28_7);
    info.eval->add_many({t28_1, t28_2, t28_3, t28_4, t28_5, t28_6, t28_7}, ts[28]);
    
    info.eval->add(ts[27], ts[28], vs[14]); // __v14 = __t27 + __t28
    info.eval->rotate_rows(vs[14], -23, gk, ss[40]); // __s40 = __v14 >> 23
    info.eval->rotate_rows(vs[14], -2, gk, ss[41]); // __s41 = __v14 >> 2
    info.eval->rotate_rows(vs[14], -16, gk, ss[42]); // __s42 = __v14 >> 16
    info.eval->rotate_rows(vs[14], -9, gk, ss[43]); // __s43 = __v14 >> 9
    info.eval->rotate_rows(vs[14], -7, gk, ss[44]); // __s44 = __v14 >> 7
    info.eval->rotate_rows(vs[14], -8, gk, ss[45]); // __s45 = __v14 >> 8
    info.eval->rotate_rows(vs[14], -61, gk, ss[46]); // __s46 = __v14 >> 61
    info.eval->multiply(ss[4], ss[13], vs[15]); // __v15 = __s4 * __s13
    info.eval->relinearize_inplace(vs[15], rk);
    
    // __t29 = blend(__s43@000000000000000000000000000000000000000000000000000000100000000, __s1@000000000000000000000000000000000000000000000000000000000100000)
    ctxt t29_1, t29_2;
    info.eval->multiply_plain(ss[43], bits["000000000000000000000000000000000000000000000000000000100000000"], t29_1);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000000000000000000000000000100000"], t29_2);
    info.eval->add(t29_1, t29_2, ts[29]);
    
    
    // __t30 = blend(__s46@000000000000000000000000000000000000000000000000000000100000000, __s11@000000000000000000000000000000000000000000000000000000000100000)
    ctxt t30_1, t30_2;
    info.eval->multiply_plain(ss[46], bits["000000000000000000000000000000000000000000000000000000100000000"], t30_1);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000000000000000000000000000100000"], t30_2);
    info.eval->add(t30_1, t30_2, ts[30]);
    
    info.eval->multiply(ts[29], ts[30], vs[16]); // __v16 = __t29 * __t30
    info.eval->relinearize_inplace(vs[16], rk);
    
    // __t31 = blend(__s42@000000000000000000000000000000000000000000000000000000100000000, __s0@000000000000000000000000000000000000000000000000000000000100000)
    ctxt t31_1, t31_2;
    info.eval->multiply_plain(ss[42], bits["000000000000000000000000000000000000000000000000000000100000000"], t31_1);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000000000000000000100000"], t31_2);
    info.eval->add(t31_1, t31_2, ts[31]);
    
    
    // __t32 = blend(__s44@000000000000000000000000000000000000000000000000000000100000000, __s9@000000000000000000000000000000000000000000000000000000000100000)
    ctxt t32_1, t32_2;
    info.eval->multiply_plain(ss[44], bits["000000000000000000000000000000000000000000000000000000100000000"], t32_1);
    info.eval->multiply_plain(ss[9], bits["000000000000000000000000000000000000000000000000000000000100000"], t32_2);
    info.eval->add(t32_1, t32_2, ts[32]);
    
    info.eval->multiply(ts[31], ts[32], vs[17]); // __v17 = __t31 * __t32
    info.eval->relinearize_inplace(vs[17], rk);
    
    // __t33 = blend(__v17@000000000000000000000000000000000000000000000000000000100000000, __v16@000000000000000000000000000000000000000000000000000000000100000)
    ctxt t33_1, t33_2;
    info.eval->multiply_plain(vs[17], bits["000000000000000000000000000000000000000000000000000000100000000"], t33_1);
    info.eval->multiply_plain(vs[16], bits["000000000000000000000000000000000000000000000000000000000100000"], t33_2);
    info.eval->add(t33_1, t33_2, ts[33]);
    
    
    // __t34 = blend(__v16@000000000000000000000000000000000000000000000000000000100000000, __v17@000000000000000000000000000000000000000000000000000000000100000)
    ctxt t34_1, t34_2;
    info.eval->multiply_plain(vs[16], bits["000000000000000000000000000000000000000000000000000000100000000"], t34_1);
    info.eval->multiply_plain(vs[17], bits["000000000000000000000000000000000000000000000000000000000100000"], t34_2);
    info.eval->add(t34_1, t34_2, ts[34]);
    
    info.eval->add(ts[33], ts[34], vs[18]); // __v18 = __t33 + __t34
    info.eval->add(vs[18], vs[15], vs[19]); // __v19 = __v18 + __v15
    
    // __t35 = blend(__s41@000000000000000000000000000000000000010000000000000000000000000, __s38@000000000000000000000000000000000000000000000000000000100000000, __v19@000000000000000000000000000000000000000000000000000000000100000)
    ctxt t35_1, t35_2, t35_3;
    info.eval->multiply_plain(ss[41], bits["000000000000000000000000000000000000010000000000000000000000000"], t35_1);
    info.eval->multiply_plain(ss[38], bits["000000000000000000000000000000000000000000000000000000100000000"], t35_2);
    info.eval->multiply_plain(vs[19], bits["000000000000000000000000000000000000000000000000000000000100000"], t35_3);
    info.eval->add_many({t35_1, t35_2, t35_3}, ts[35]);
    
    
    // __t36 = blend(__s39@000000000000000000000000000000000000010000000000000000000000000, __v18@000000000000000000000000000000000000000000000000000000100000000, __s40@000000000000000000000000000000000000000000000000000000000100000)
    ctxt t36_1, t36_2, t36_3;
    info.eval->multiply_plain(ss[39], bits["000000000000000000000000000000000000010000000000000000000000000"], t36_1);
    info.eval->multiply_plain(vs[18], bits["000000000000000000000000000000000000000000000000000000100000000"], t36_2);
    info.eval->multiply_plain(ss[40], bits["000000000000000000000000000000000000000000000000000000000100000"], t36_3);
    info.eval->add_many({t36_1, t36_2, t36_3}, ts[36]);
    
    info.eval->multiply(ts[35], ts[36], vs[20]); // __v20 = __t35 * __t36
    info.eval->relinearize_inplace(vs[20], rk);
    info.eval->rotate_rows(vs[20], -24, gk, ss[47]); // __s47 = __v20 >> 24
    info.eval->rotate_rows(vs[20], -7, gk, ss[48]); // __s48 = __v20 >> 7
    info.eval->add(ss[36], vs[20], vs[21]); // __v21 = __s36 + __v20
    info.eval->multiply(ss[45], vs[21], vs[22]); // __v22 = __s45 * __v21
    info.eval->relinearize_inplace(vs[22], rk);
    info.eval->rotate_rows(vs[22], -4, gk, ss[49]); // __s49 = __v22 >> 4
    info.eval->sub(ss[47], ss[49], vs[23]); // __v23 = __s47 - __s49
    info.eval->add(vs[23], ss[48], vs[24]); // __v24 = __v23 + __s48
    return vs[24];
}
    