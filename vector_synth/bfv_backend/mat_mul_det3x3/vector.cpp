
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "000000000000000000000000000000000010000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000100000000000000000100000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000001000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000010000000000000000000000", info);
    add_bitstring(bits, "000000000000000000110000000000000000010000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000100000000000000100000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000100000000000000000000", info);
    add_bitstring(bits, "000000000000000000100000000000000000000000000000001000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000100000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001001000000000101100000000", info);
    add_bitstring(bits, "000000000000000000010000000000000000100000000000101100000000", info);
    add_bitstring(bits, "000000000000000000000000000000000011010000000000000000000000", info);
    add_bitstring(bits, "000000000000000000010000000000000000000000000000001000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000001000000000010000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000000010000000000", info);
    add_bitstring(bits, "000000000000000000100000000000000010100000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000100000000000000010110000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000111000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000001100000000", info);
    add_bitstring(bits, "000000000000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000001000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000110000000000000001010000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000010000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000001000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000100000000", info);
    add_bitstring(bits, "000000000000000000000000000000000010000000000000010000000000", info);
    add_bitstring(bits, "000000000000000000100000000000000011010000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000100000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000000100000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000000001000000000", info);
    add_bitstring(bits, "000000000000000000010000000000000000100000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001010000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000100100000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000010000000000", info);
    add_bitstring(bits, "000000000000000000010000000000000000000000000000010000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(53);
    ts[0] = encrypt_input("000000000000000011110000011110111110001111111111000111111101111110110101101000110111111111011110111101011111110111101101111011110111100001111111111111110111111111111111", info);
    ts[1] = encrypt_input("000000000000000011110000011110111110001111111111000111111101111110110101101000110111111111011110111101011111110111101101111011110111100001111111111111110111111111111111", info);
    ts[2] = encrypt_input("011110000000000001111100110111101100011010111111111100011110111110011010110111101111011110101101101111111111111111111011111110110011010110111101111010001111011111111111111000110110", info);
    ts[3] = encrypt_input("011110000000000001111100110111101100011010111111111100011110111110011010110111101111011110101101101111111111111111111011111110110011010110111101111010001111011111111111111000110110", info);
    ts[4] = encrypt_input("00000000000000000001111100000000000000011111001111000000000011111011111000000000", info);
    ts[5] = encrypt_input("0000000000000000000000000000000000000111100000000000000000000000", info);
    ts[8] = encrypt_input("000000000000000000011111000000000000000111100011111000000000000000000000", info);
    ts[9] = encrypt_input("00000000000000000001111100000000000000000011111000000000000000000000", info);
    ts[12] = encrypt_input("00000000000000000000000000000000000000000000000011110011110000000000", info);
    ts[13] = encrypt_input("0000000000000000000000000000000000111110000000000000000000000000", info);
    ts[17] = encrypt_input("0000000000000000000111100000000000000000000000000000000000000000", info);
    ts[18] = encrypt_input("00000000000000000000000000000000000000000000000000111111111000000000", info);
    ts[21] = encrypt_input("00000000000000000000000000000000000111110000000000000011111000000000", info);
    ts[22] = encrypt_input("0000000000000000001111100000000000000001111111111000000000000011111000000000", info);
    ts[27] = encrypt_input("00000000000000000000000000000000000000111110000000001111100000000000", info);
    ts[28] = encrypt_input("000000000000000000000000000000000001111100000000000011110111110000000000", info);
    ts[39] = encrypt_input("0000000000000000000000011111000000000000000000000000000000000000", info);
    ts[40] = encrypt_input("0000000000000000000000011110000000000000000000000000000000000000", info);
    ts[41] = encrypt_input("0000000000000000000000011110000000000000000000000000000000000000", info);
    ts[42] = encrypt_input("0000000000000000000000011111000000000000000000000000000000000000", info);
    ts[45] = encrypt_input("0000000000000000000000011110000000000000000000000000000000000000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[29];
    ctxt ss[19];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -2, gk, ss[0]); // __s0 = __v0 >> 2
    info.eval->rotate_rows(vs[0], -56, gk, ss[1]); // __s1 = __v0 >> 56
    info.eval->rotate_rows(vs[0], -52, gk, ss[2]); // __s2 = __v0 >> 52
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -22, gk, ss[3]); // __s3 = __v1 >> 22
    info.eval->rotate_rows(vs[1], -2, gk, ss[4]); // __s4 = __v1 >> 2
    info.eval->rotate_rows(vs[1], -56, gk, ss[5]); // __s5 = __v1 >> 56
    info.eval->rotate_rows(vs[1], -52, gk, ss[6]); // __s6 = __v1 >> 52
    
    // __t6 = blend(__s1@000000000000000000000000000000000000100000000000000100000000, __s2@000000000000000000000000000000000000010000000000000000000000, __t4@000000000000000000010000000000000001001000000000101000000000)
    ctxt t6_1, t6_2;
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000000100000000000000100000000"], t6_1);
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000000010000000000000000000000"], t6_2);
    info.eval->add_many({t6_1, t6_2, ts[4]}, ts[6]);
    
    
    // __t7 = blend(__s5@000000000000000000010000000000000000100000000000101100000000, __s3@000000000000000000000000000000000001000000000000000000000000, __s4@000000000000000000000000000000000000001000000000000000000000, __t5@000000000000000000000000000000000000010000000000000000000000)
    ctxt t7_1, t7_2, t7_3;
    info.eval->multiply_plain(ss[5], bits["000000000000000000010000000000000000100000000000101100000000"], t7_1);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000000000001000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000000001000000000000000000000"], t7_3);
    info.eval->add_many({t7_1, t7_2, t7_3, ts[5]}, ts[7]);
    
    info.eval->multiply(ts[6], ts[7], vs[2]); // __v2 = __t6 * __t7
    info.eval->relinearize_inplace(vs[2], rk);
    
    // __t10 = blend(__s1@000000000000000000100000000000000000000000000000001000000000, __s0@000000000000000000000000000000000000100000000000000100000000, __t8@000000000000000000010000000000000001001000000000000000000000)
    ctxt t10_1, t10_2;
    info.eval->multiply_plain(ss[1], bits["000000000000000000100000000000000000000000000000001000000000"], t10_1);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000100000000000000100000000"], t10_2);
    info.eval->add_many({t10_1, t10_2, ts[8]}, ts[10]);
    
    
    // __t11 = blend(__s5@000000000000000000100000000000000000000000000000000000000000, __s6@000000000000000000000000000000000001000000000000000000000000, __s4@000000000000000000000000000000000000100000000000000100000000, __s3@000000000000000000000000000000000000000000000000001000000000, __t9@000000000000000000010000000000000000001000000000000000000000)
    ctxt t11_1, t11_2, t11_3, t11_4;
    info.eval->multiply_plain(ss[5], bits["000000000000000000100000000000000000000000000000000000000000"], t11_1);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000000000000000001000000000000000000000000"], t11_2);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000000100000000000000100000000"], t11_3);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000000000000000000000000001000000000"], t11_4);
    info.eval->add_many({t11_1, t11_2, t11_3, t11_4, ts[9]}, ts[11]);
    
    info.eval->multiply(ts[10], ts[11], vs[3]); // __v3 = __t10 * __t11
    info.eval->relinearize_inplace(vs[3], rk);
    
    // __t14 = blend(__s1@000000000000000000000000000000000011010000000000000000000000, __s0@000000000000000000000000000000000000000000000000010000000000, __t12@000000000000000000000000000000000000000000000000101000000000)
    ctxt t14_1, t14_2;
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000011010000000000000000000000"], t14_1);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000000000010000000000"], t14_2);
    info.eval->add_many({t14_1, t14_2, ts[12]}, ts[14]);
    
    
    // __t15 = blend(__s5@000000000000000000000000000000000001010000000000000000000000, __s4@000000000000000000000000000000000000000000000000111000000000, __t13@000000000000000000000000000000000010000000000000000000000000)
    ctxt t15_1, t15_2;
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000001010000000000000000000000"], t15_1);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000000000000000000111000000000"], t15_2);
    info.eval->add_many({t15_1, t15_2, ts[13]}, ts[15]);
    
    info.eval->multiply(ts[14], ts[15], vs[4]); // __v4 = __t14 * __t15
    info.eval->relinearize_inplace(vs[4], rk);
    
    // __t16 = blend(__v3@000000000000000000000000000000000001000000000000000000000000, __v4@000000000000000000000000000000000000000000000000001000000000)
    ctxt t16_1, t16_2;
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000001000000000000000000000000"], t16_1);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000000000000000000001000000000"], t16_2);
    info.eval->add(t16_1, t16_2, ts[16]);
    
    info.eval->add(ts[16], vs[2], vs[5]); // __v5 = __t16 + __v2
    
    // __t19 = blend(__s0@000000000000000000100000000000000011010000000000000000000000, __s1@000000000000000000000000000000000000000000000000010000000000, __s2@000000000000000000000000000000000000000000000000001100000000, __t17@000000000000000000010000000000000000000000000000000000000000)
    ctxt t19_1, t19_2, t19_3;
    info.eval->multiply_plain(ss[0], bits["000000000000000000100000000000000011010000000000000000000000"], t19_1);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000000000000000000010000000000"], t19_2);
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000000000000000000001100000000"], t19_3);
    info.eval->add_many({t19_1, t19_2, t19_3, ts[17]}, ts[19]);
    
    
    // __t20 = blend(__s4@000000000000000000110000000000000001010000000000000000000000, __s5@000000000000000000000000000000000010000000000000010000000000, __t18@000000000000000000000000000000000000000000000000001100000000)
    ctxt t20_1, t20_2;
    info.eval->multiply_plain(ss[4], bits["000000000000000000110000000000000001010000000000000000000000"], t20_1);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000010000000000000010000000000"], t20_2);
    info.eval->add_many({t20_1, t20_2, ts[18]}, ts[20]);
    
    info.eval->multiply(ts[19], ts[20], vs[6]); // __v6 = __t19 * __t20
    info.eval->relinearize_inplace(vs[6], rk);
    
    // __t23 = blend(__s2@000000000000000000100000000000000010100000000000000000000000, __t21@000000000000000000000000000000000001000000000000001000000000)
    ctxt t23_1;
    info.eval->multiply_plain(ss[2], bits["000000000000000000100000000000000010100000000000000000000000"], t23_1);
    info.eval->add(t23_1, ts[21], ts[23]);
    
    
    // __t24 = blend(__s4@000000000000000000000000000000000010000000000000000000000000, __t22@000000000000000000100000000000000001100000000000001000000000)
    ctxt t24_1;
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000010000000000000000000000000"], t24_1);
    info.eval->add(t24_1, ts[22], ts[24]);
    
    info.eval->multiply(ts[23], ts[24], vs[7]); // __v7 = __t23 * __t24
    info.eval->relinearize_inplace(vs[7], rk);
    
    // __t25 = blend(__v6@000000000000000000110000000000000000010000000000000000000000, __v7@000000000000000000000000000000000010000000000000000000000000, __v5@000000000000000000000000000000000001000000000000001000000000, __v3@000000000000000000000000000000000000100000000000000000000000, __v4@000000000000000000000000000000000000000000000000010000000000)
    ctxt t25_1, t25_2, t25_3, t25_4, t25_5;
    info.eval->multiply_plain(vs[6], bits["000000000000000000110000000000000000010000000000000000000000"], t25_1);
    info.eval->multiply_plain(vs[7], bits["000000000000000000000000000000000010000000000000000000000000"], t25_2);
    info.eval->multiply_plain(vs[5], bits["000000000000000000000000000000000001000000000000001000000000"], t25_3);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000000100000000000000000000000"], t25_4);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000000000000000000010000000000"], t25_5);
    info.eval->add_many({t25_1, t25_2, t25_3, t25_4, t25_5}, ts[25]);
    
    
    // __t26 = blend(__v3@000000000000000000100000000000000000000000000000000000000000, __v2@000000000000000000010000000000000000100000000000000000000000, __v6@000000000000000000000000000000000010000000000000010000000000, __v7@000000000000000000000000000000000001000000000000001000000000, __v4@000000000000000000000000000000000000010000000000000000000000)
    ctxt t26_1, t26_2, t26_3, t26_4, t26_5;
    info.eval->multiply_plain(vs[3], bits["000000000000000000100000000000000000000000000000000000000000"], t26_1);
    info.eval->multiply_plain(vs[2], bits["000000000000000000010000000000000000100000000000000000000000"], t26_2);
    info.eval->multiply_plain(vs[6], bits["000000000000000000000000000000000010000000000000010000000000"], t26_3);
    info.eval->multiply_plain(vs[7], bits["000000000000000000000000000000000001000000000000001000000000"], t26_4);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000000010000000000000000000000"], t26_5);
    info.eval->add_many({t26_1, t26_2, t26_3, t26_4, t26_5}, ts[26]);
    
    info.eval->add(ts[25], ts[26], vs[8]); // __v8 = __t25 + __t26
    
    // __t29 = blend(__s2@000000000000000000000000000000000001000000000000010000000000, __s0@000000000000000000000000000000000000000000000000001000000000, __t27@000000000000000000000000000000000000001000000000100000000000)
    ctxt t29_1, t29_2;
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000001000000000000010000000000"], t29_1);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000000000001000000000"], t29_2);
    info.eval->add_many({t29_1, t29_2, ts[27]}, ts[29]);
    
    
    // __t30 = blend(__s5@000000000000000000000000000000000000001000000000000000000000, __s6@000000000000000000000000000000000000000000000000001000000000, __t28@000000000000000000000000000000000001000000000000110000000000)
    ctxt t30_1, t30_2;
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000000001000000000000000000000"], t30_1);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000000000000000000000000000000001000000000"], t30_2);
    info.eval->add_many({t30_1, t30_2, ts[28]}, ts[30]);
    
    info.eval->multiply(ts[29], ts[30], vs[9]); // __v9 = __t29 * __t30
    info.eval->relinearize_inplace(vs[9], rk);
    
    // __t31 = blend(__v8@000000000000000000010000000000000000000000000000010000000000, __v6@000000000000000000000000000000000001000000000000000000000000, __v2@000000000000000000000000000000000000001000000000000000000000, __v4@000000000000000000000000000000000000000000000000100000000000, __v9@000000000000000000000000000000000000000000000000001000000000, __v3@000000000000000000000000000000000000000000000000000100000000)
    ctxt t31_1, t31_2, t31_3, t31_4, t31_5, t31_6;
    info.eval->multiply_plain(vs[8], bits["000000000000000000010000000000000000000000000000010000000000"], t31_1);
    info.eval->multiply_plain(vs[6], bits["000000000000000000000000000000000001000000000000000000000000"], t31_2);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000000001000000000000000000000"], t31_3);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000000000000000000100000000000"], t31_4);
    info.eval->multiply_plain(vs[9], bits["000000000000000000000000000000000000000000000000001000000000"], t31_5);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000000000000000000000100000000"], t31_6);
    info.eval->add_many({t31_1, t31_2, t31_3, t31_4, t31_5, t31_6}, ts[31]);
    
    
    // __t32 = blend(__v3@000000000000000000010000000000000000000000000000001000000000, __v4@000000000000000000000000000000000001000000000000000000000000, __v9@000000000000000000000000000000000000001000000000010000000000, __v2@000000000000000000000000000000000000000000000000100100000000)
    ctxt t32_1, t32_2, t32_3, t32_4;
    info.eval->multiply_plain(vs[3], bits["000000000000000000010000000000000000000000000000001000000000"], t32_1);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000001000000000000000000000000"], t32_2);
    info.eval->multiply_plain(vs[9], bits["000000000000000000000000000000000000001000000000010000000000"], t32_3);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000000000000000000100100000000"], t32_4);
    info.eval->add_many({t32_1, t32_2, t32_3, t32_4}, ts[32]);
    
    info.eval->add(ts[31], ts[32], vs[10]); // __v10 = __t31 + __t32
    info.eval->rotate_rows(vs[10], -4, gk, ss[7]); // __s7 = __v10 >> 4
    info.eval->rotate_rows(vs[10], -34, gk, ss[8]); // __s8 = __v10 >> 34
    
    // __t33 = blend(__v8@000000000000000000100000000000000010110000000000000000000000, __v10@000000000000000000000000000000000001001000000000101100000000)
    ctxt t33_1, t33_2;
    info.eval->multiply_plain(vs[8], bits["000000000000000000100000000000000010110000000000000000000000"], t33_1);
    info.eval->multiply_plain(vs[10], bits["000000000000000000000000000000000001001000000000101100000000"], t33_2);
    info.eval->add(t33_1, t33_2, ts[33]);
    
    
    // __t34 = blend(__v7@000000000000000000100000000000000000100000000000000000000000, __v4@000000000000000000000000000000000010000000000000000000000000, __v9@000000000000000000000000000000000001000000000000100000000000, __v2@000000000000000000000000000000000000010000000000000000000000, __v3@000000000000000000000000000000000000001000000000000000000000, __v6@000000000000000000000000000000000000000000000000001100000000)
    ctxt t34_1, t34_2, t34_3, t34_4, t34_5, t34_6;
    info.eval->multiply_plain(vs[7], bits["000000000000000000100000000000000000100000000000000000000000"], t34_1);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000010000000000000000000000000"], t34_2);
    info.eval->multiply_plain(vs[9], bits["000000000000000000000000000000000001000000000000100000000000"], t34_3);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000000010000000000000000000000"], t34_4);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000000001000000000000000000000"], t34_5);
    info.eval->multiply_plain(vs[6], bits["000000000000000000000000000000000000000000000000001100000000"], t34_6);
    info.eval->add_many({t34_1, t34_2, t34_3, t34_4, t34_5, t34_6}, ts[34]);
    
    info.eval->add(ts[33], ts[34], vs[11]); // __v11 = __t33 + __t34
    info.eval->rotate_rows(vs[11], -22, gk, ss[9]); // __s9 = __v11 >> 22
    info.eval->rotate_rows(vs[11], -49, gk, ss[10]); // __s10 = __v11 >> 49
    info.eval->rotate_rows(vs[11], -4, gk, ss[11]); // __s11 = __v11 >> 4
    info.eval->rotate_rows(vs[11], -2, gk, ss[12]); // __s12 = __v11 >> 2
    info.eval->rotate_rows(vs[11], -52, gk, ss[13]); // __s13 = __v11 >> 52
    
    // __t35 = blend(__v11@000000000000000000000000000000000001000000000000000000000000, __v8@000000000000000000000000000000000000000000000000001000000000)
    ctxt t35_1, t35_2;
    info.eval->multiply_plain(vs[11], bits["000000000000000000000000000000000001000000000000000000000000"], t35_1);
    info.eval->multiply_plain(vs[8], bits["000000000000000000000000000000000000000000000000001000000000"], t35_2);
    info.eval->add(t35_1, t35_2, ts[35]);
    
    
    // __t36 = blend(__v8@000000000000000000000000000000000001000000000000000000000000, __v11@000000000000000000000000000000000000000000000000001000000000)
    ctxt t36_1, t36_2;
    info.eval->multiply_plain(vs[8], bits["000000000000000000000000000000000001000000000000000000000000"], t36_1);
    info.eval->multiply_plain(vs[11], bits["000000000000000000000000000000000000000000000000001000000000"], t36_2);
    info.eval->add(t36_1, t36_2, ts[36]);
    
    info.eval->multiply(ts[35], ts[36], vs[12]); // __v12 = __t35 * __t36
    info.eval->relinearize_inplace(vs[12], rk);
    info.eval->rotate_rows(vs[12], -4, gk, ss[14]); // __s14 = __v12 >> 4
    info.eval->rotate_rows(vs[12], -49, gk, ss[15]); // __s15 = __v12 >> 49
    
    // __t37 = blend(__s0@000000000000000000000001000000000000000000000000000000000000, __s13@000000000000000000000000000000000000000010000000000000000000)
    ctxt t37_1, t37_2;
    info.eval->multiply_plain(ss[0], bits["000000000000000000000001000000000000000000000000000000000000"], t37_1);
    info.eval->multiply_plain(ss[13], bits["000000000000000000000000000000000000000010000000000000000000"], t37_2);
    info.eval->add(t37_1, t37_2, ts[37]);
    
    
    // __t38 = blend(__s4@000000000000000000000001000000000000000000000000000000000000, __s9@000000000000000000000000000000000000000010000000000000000000)
    ctxt t38_1, t38_2;
    info.eval->multiply_plain(ss[4], bits["000000000000000000000001000000000000000000000000000000000000"], t38_1);
    info.eval->multiply_plain(ss[9], bits["000000000000000000000000000000000000000010000000000000000000"], t38_2);
    info.eval->add(t38_1, t38_2, ts[38]);
    
    info.eval->multiply(ts[37], ts[38], vs[13]); // __v13 = __t37 * __t38
    info.eval->relinearize_inplace(vs[13], rk);
    info.eval->multiply(ts[39], ts[40], vs[14]); // __v14 = __t39 * __t40
    info.eval->relinearize_inplace(vs[14], rk);
    info.eval->multiply(ss[1], ss[5], vs[15]); // __v15 = __s1 * __s5
    info.eval->relinearize_inplace(vs[15], rk);
    info.eval->multiply(ts[41], ss[6], vs[16]); // __v16 = __t41 * __s6
    info.eval->relinearize_inplace(vs[16], rk);
    info.eval->multiply(ts[42], ss[3], vs[17]); // __v17 = __t42 * __s3
    info.eval->relinearize_inplace(vs[17], rk);
    info.eval->add(vs[16], vs[17], vs[18]); // __v18 = __v16 + __v17
    
    // __t43 = blend(__v13@000000000000000000000001000000000000000000000000000000000000, __s14@000000000000000000000000000000000000000100000000000000000000)
    ctxt t43_1, t43_2;
    info.eval->multiply_plain(vs[13], bits["000000000000000000000001000000000000000000000000000000000000"], t43_1);
    info.eval->multiply_plain(ss[14], bits["000000000000000000000000000000000000000100000000000000000000"], t43_2);
    info.eval->add(t43_1, t43_2, ts[43]);
    
    
    // __t44 = blend(__v15@000000000000000000000001000000000000000000000000000000000000, __s15@000000000000000000000000000000000000000100000000000000000000)
    ctxt t44_1, t44_2;
    info.eval->multiply_plain(vs[15], bits["000000000000000000000001000000000000000000000000000000000000"], t44_1);
    info.eval->multiply_plain(ss[15], bits["000000000000000000000000000000000000000100000000000000000000"], t44_2);
    info.eval->add(t44_1, t44_2, ts[44]);
    
    info.eval->add(ts[43], ts[44], vs[19]); // __v19 = __t43 + __t44
    
    // __t46 = blend(__s2@000000000000000000000001000000000000000000000000000000000000, __s12@000000000000000000000000000000000000000100000000000000000000)
    ctxt t46_1, t46_2;
    info.eval->multiply_plain(ss[2], bits["000000000000000000000001000000000000000000000000000000000000"], t46_1);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000000000000000100000000000000000000"], t46_2);
    info.eval->add(t46_1, t46_2, ts[46]);
    
    
    // __t47 = blend(__v19@000000000000000000000000000000000000000100000000000000000000, __t45@000000000000000000000001000000000000000000000000000000000000)
    ctxt t47_1;
    info.eval->multiply_plain(vs[19], bits["000000000000000000000000000000000000000100000000000000000000"], t47_1);
    info.eval->add(t47_1, ts[45], ts[47]);
    
    info.eval->multiply(ts[46], ts[47], vs[20]); // __v20 = __t46 * __t47
    info.eval->relinearize_inplace(vs[20], rk);
    info.eval->rotate_rows(vs[20], -2, gk, ss[16]); // __s16 = __v20 >> 2
    info.eval->add(vs[19], vs[20], vs[21]); // __v21 = __v19 + __v20
    info.eval->multiply(vs[21], ss[7], vs[22]); // __v22 = __v21 * __s7
    info.eval->relinearize_inplace(vs[22], rk);
    info.eval->add(vs[18], vs[14], vs[23]); // __v23 = __v18 + __v14
    
    // __t48 = blend(__v23@000000000000000000000001000000000000000000000000000000000000, __s10@000000000000000000000000000000000000000010000000000000000000)
    ctxt t48_1, t48_2;
    info.eval->multiply_plain(vs[23], bits["000000000000000000000001000000000000000000000000000000000000"], t48_1);
    info.eval->multiply_plain(ss[10], bits["000000000000000000000000000000000000000010000000000000000000"], t48_2);
    info.eval->add(t48_1, t48_2, ts[48]);
    
    
    // __t49 = blend(__s8@000000000000000000000001000000000000000000000000000000000000, __s12@000000000000000000000000000000000000000010000000000000000000)
    ctxt t49_1, t49_2;
    info.eval->multiply_plain(ss[8], bits["000000000000000000000001000000000000000000000000000000000000"], t49_1);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000000000000000010000000000000000000"], t49_2);
    info.eval->add(t49_1, t49_2, ts[49]);
    
    info.eval->multiply(ts[48], ts[49], vs[24]); // __v24 = __t48 * __t49
    info.eval->relinearize_inplace(vs[24], rk);
    
    // __t50 = blend(__v22@000000000000000000000001000000000000000000000000000000000000, __v24@000000000000000000000000000000000000000010000000000000000000)
    ctxt t50_1, t50_2;
    info.eval->multiply_plain(vs[22], bits["000000000000000000000001000000000000000000000000000000000000"], t50_1);
    info.eval->multiply_plain(vs[24], bits["000000000000000000000000000000000000000010000000000000000000"], t50_2);
    info.eval->add(t50_1, t50_2, ts[50]);
    
    
    // __t51 = blend(__v24@000000000000000000000001000000000000000000000000000000000000, __v13@000000000000000000000000000000000000000010000000000000000000)
    ctxt t51_1, t51_2;
    info.eval->multiply_plain(vs[24], bits["000000000000000000000001000000000000000000000000000000000000"], t51_1);
    info.eval->multiply_plain(vs[13], bits["000000000000000000000000000000000000000010000000000000000000"], t51_2);
    info.eval->add(t51_1, t51_2, ts[51]);
    
    info.eval->add(ts[50], ts[51], vs[25]); // __v25 = __t50 + __t51
    
    // __t52 = blend(__s10@000000000000000000000001000000000000000000000000000000000000, __s11@000000000000000000000000000000000000000010000000000000000000)
    ctxt t52_1, t52_2;
    info.eval->multiply_plain(ss[10], bits["000000000000000000000001000000000000000000000000000000000000"], t52_1);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000000000010000000000000000000"], t52_2);
    info.eval->add(t52_1, t52_2, ts[52]);
    
    info.eval->multiply(ts[52], vs[25], vs[26]); // __v26 = __t52 * __v25
    info.eval->relinearize_inplace(vs[26], rk);
    info.eval->rotate_rows(vs[26], -18, gk, ss[17]); // __s17 = __v26 >> 18
    info.eval->rotate_rows(vs[26], -1, gk, ss[18]); // __s18 = __v26 >> 1
    info.eval->sub(ss[16], ss[17], vs[27]); // __v27 = __s16 - __s17
    info.eval->add(vs[27], ss[18], vs[28]); // __v28 = __v27 + __s18
    return vs[28];
}
    