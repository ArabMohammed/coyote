
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "000000000000100000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000000000000100000000110000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000010000000000000000000000001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000100000000000000000000000000000000000010000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000010000000000001000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000010000000000000000000000100000000000000000000000000000000000000000001", info);
    add_bitstring(bits, "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000100000000000000100100000000000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000010000000000000000000000000000100000000000101000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000000001000000000000100000000000001000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000001000000000000000000000100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000001000000000000000000000000000000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000001", info);
    add_bitstring(bits, "000000000000100000000000100000000000000000000000000000000000000001100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000000000100000000000100010000000000100000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000110010000100001000000000110100000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000010000000000000010000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000100100000000000010000000000000000000000010000000000000000000000000000000001", info);
    add_bitstring(bits, "000000000000000000000000001000000000100000010000010000010000000000000000010000000000000000000000000000000001", info);
    add_bitstring(bits, "000000000000000000000000000000000000010010000000000000000000100001100000100000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000100000000000000000000000000100010000000000000000000000111000000000000000000000000000001", info);
    add_bitstring(bits, "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000001000000000000000000000000100010000000101000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000010001000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000100000000000000000000000000000000000000000000000000000001000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000100000000000000000000010000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000100000000000010000010000100000000000010000000000000000000000000000000001", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000010000000000000000000000110000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000010000000000000000010000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000010000000000010000000100000000000100111000000000000000000000000000001", info);
    add_bitstring(bits, "000000000000000000000010000000000000000000000000000000000000000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000010000000000000000000000000000000000000000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000100000010000010000000000000000000000010000000000000000000000000000000001", info);
    add_bitstring(bits, "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(16);
    ts[0] = encrypt_input("1110000000000011100000000111111011001110000001111110110111111110111001110000111111011011111001110000111111011111111011000000011101111110110000000000000000011100000000000111", info);
    ts[2] = encrypt_input("00000000000000000000000000000000000000001110000000000000000000000111011000000000000000000000000000000000000000000111", info);
    ts[4] = encrypt_input("00000000000000000000000000000000000000110000000000000000000000111000000000000001110011100000000000000000000000000000", info);
    ts[6] = encrypt_input("00000000000000000000011000000000000000111000000000000000000000000000111000000000000111000000000000000000000000000000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[17];
    ctxt ss[33];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -12, gk, ss[0]); // __s0 = __v0 >> 12
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -105, gk, ss[1]); // __s1 = __v1 >> 105
    info.eval->rotate_rows(vs[1], -3, gk, ss[2]); // __s2 = __v1 >> 3
    info.eval->rotate_rows(vs[1], -94, gk, ss[3]); // __s3 = __v1 >> 94
    info.eval->rotate_rows(vs[1], -1, gk, ss[4]); // __s4 = __v1 >> 1
    info.eval->rotate_rows(vs[1], -66, gk, ss[5]); // __s5 = __v1 >> 66
    info.eval->rotate_rows(vs[1], -93, gk, ss[6]); // __s6 = __v1 >> 93
    info.eval->rotate_rows(vs[1], -67, gk, ss[7]); // __s7 = __v1 >> 67
    info.eval->rotate_rows(vs[1], -12, gk, ss[8]); // __s8 = __v1 >> 12
    info.eval->rotate_rows(vs[1], -73, gk, ss[9]); // __s9 = __v1 >> 73
    info.eval->rotate_rows(vs[1], -23, gk, ss[10]); // __s10 = __v1 >> 23
    vs[2] = ts[4]; // vector load instr
    info.eval->rotate_rows(vs[2], -106, gk, ss[11]); // __s11 = __v2 >> 106
    info.eval->rotate_rows(vs[2], -82, gk, ss[12]); // __s12 = __v2 >> 82
    info.eval->rotate_rows(vs[2], -103, gk, ss[13]); // __s13 = __v2 >> 103
    info.eval->rotate_rows(vs[2], -5, gk, ss[14]); // __s14 = __v2 >> 5
    info.eval->rotate_rows(vs[2], -84, gk, ss[15]); // __s15 = __v2 >> 84
    info.eval->rotate_rows(vs[2], -29, gk, ss[16]); // __s16 = __v2 >> 29
    vs[3] = ts[6]; // vector load instr
    info.eval->rotate_rows(vs[3], -3, gk, ss[17]); // __s17 = __v3 >> 3
    info.eval->rotate_rows(vs[3], -5, gk, ss[18]); // __s18 = __v3 >> 5
    info.eval->rotate_rows(vs[3], -87, gk, ss[19]); // __s19 = __v3 >> 87
    info.eval->rotate_rows(vs[3], -12, gk, ss[20]); // __s20 = __v3 >> 12
    info.eval->rotate_rows(vs[3], -29, gk, ss[21]); // __s21 = __v3 >> 29
    info.eval->rotate_rows(vs[3], -94, gk, ss[22]); // __s22 = __v3 >> 94
    info.eval->rotate_rows(vs[3], -7, gk, ss[23]); // __s23 = __v3 >> 7
    info.eval->rotate_rows(vs[3], -2, gk, ss[24]); // __s24 = __v3 >> 2
    info.eval->rotate_rows(vs[3], -43, gk, ss[25]); // __s25 = __v3 >> 43
    info.eval->rotate_rows(vs[3], -84, gk, ss[26]); // __s26 = __v3 >> 84
    info.eval->rotate_rows(vs[3], -68, gk, ss[27]); // __s27 = __v3 >> 68
    info.eval->rotate_rows(vs[3], -103, gk, ss[28]); // __s28 = __v3 >> 103
    
    // __t8 = blend(__s10@000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s3@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v0@000000000000000000000000000000000010001000000000000000000000000000000000000000000000000000000000000000000000, __s0@000000000000000000000000000000000000100000000000010000010000100000000000010000000000000000000000000000000001, __s1@000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000, __v1@000000000000000000000000000000000000000010000000000000000000000001000000000000000000000000000000000000000000, __s2@000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, __s4@000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000, __s9@000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000)
    ctxt t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9;
    info.eval->multiply_plain(ss[10], bits["000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t8_2);
    info.eval->multiply_plain(vs[0], bits["000000000000000000000000000000000010001000000000000000000000000000000000000000000000000000000000000000000000"], t8_3);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000100000000000010000010000100000000000010000000000000000000000000000000001"], t8_4);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000"], t8_5);
    info.eval->multiply_plain(vs[1], bits["000000000000000000000000000000000000000010000000000000000000000001000000000000000000000000000000000000000000"], t8_6);
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"], t8_7);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000"], t8_8);
    info.eval->multiply_plain(ss[9], bits["000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000"], t8_9);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9}, ts[8]);
    
    
    // __t9 = blend(__s22@000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s18@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s12@000000000000000000000000000000000010000000000000010000000000000000000000000000000000000000000000000000000000, __s11@000000000000000000000000000000000000100000000000000000000000000000000000010000000000000000000000000000000000, __s27@000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000, __v2@000000000000000000000000000000000000001000000000000000000000100000000000000000000000000000000000000000000000, __s26@000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000, __s23@000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, __s13@000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000, __v3@000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000, __s21@000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000, __s24@000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000, __s28@000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000, __s16@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
    ctxt t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7, t9_8, t9_9, t9_10, t9_11, t9_12, t9_13, t9_14;
    info.eval->multiply_plain(ss[22], bits["000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[18], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t9_2);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000000000010000000000000010000000000000000000000000000000000000000000000000000000000"], t9_3);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000000100000000000000000000000000000000000010000000000000000000000000000000000"], t9_4);
    info.eval->multiply_plain(ss[27], bits["000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000"], t9_5);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000000001000000000000000000000100000000000000000000000000000000000000000000000"], t9_6);
    info.eval->multiply_plain(ss[26], bits["000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000"], t9_7);
    info.eval->multiply_plain(ss[23], bits["000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"], t9_8);
    info.eval->multiply_plain(ss[13], bits["000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000"], t9_9);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000"], t9_10);
    info.eval->multiply_plain(ss[21], bits["000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000"], t9_11);
    info.eval->multiply_plain(ss[24], bits["000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000"], t9_12);
    info.eval->multiply_plain(ss[28], bits["000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000"], t9_13);
    info.eval->multiply_plain(ss[16], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"], t9_14);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7, t9_8, t9_9, t9_10, t9_11, t9_12, t9_13, t9_14}, ts[9]);
    
    info.eval->sub(ts[8], ts[9], vs[4]); // __v4 = __t8 - __t9
    
    // __t10 = blend(__s4@100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000, __s7@000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s3@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s0@000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000, __v1@000000000000000000000000000000000000000010000000000000000000000100000000000000000000000000000000000000000001, __v0@000000000000000000000000000000000000000000000000000110010000100001000000000110100000000000000000000000000000, __s9@000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000, __s8@000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000)
    ctxt t10_1, t10_2, t10_3, t10_4, t10_5, t10_6, t10_7, t10_8;
    info.eval->multiply_plain(ss[4], bits["100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000"], t10_1);
    info.eval->multiply_plain(ss[7], bits["000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t10_2);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t10_3);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000"], t10_4);
    info.eval->multiply_plain(vs[1], bits["000000000000000000000000000000000000000010000000000000000000000100000000000000000000000000000000000000000001"], t10_5);
    info.eval->multiply_plain(vs[0], bits["000000000000000000000000000000000000000000000000000110010000100001000000000110100000000000000000000000000000"], t10_6);
    info.eval->multiply_plain(ss[9], bits["000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000"], t10_7);
    info.eval->multiply_plain(ss[8], bits["000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000"], t10_8);
    info.eval->add_many({t10_1, t10_2, t10_3, t10_4, t10_5, t10_6, t10_7, t10_8}, ts[10]);
    
    
    // __t11 = blend(__s19@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s17@000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s18@000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s13@000000000000000000000000000000000100000000000000000000010000000000000000000000000000000000000000000000000000, __s12@000000000000000000000000000000000010000000000000000010000000000000000000000000000000000000000000000000000000, __s26@000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000, __s15@000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000, __v2@000000000000000000000000000000000000000000000000000000000000100000000000000100100000000000000000000000000000, __s22@000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000, __v3@000000000000000000000000000000000000000000000000000000000000000010000000000001000000000000000000000000000000, __s14@000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000, __s28@000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000, __s11@000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000, __s25@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
    ctxt t11_1, t11_2, t11_3, t11_4, t11_5, t11_6, t11_7, t11_8, t11_9, t11_10, t11_11, t11_12, t11_13, t11_14;
    info.eval->multiply_plain(ss[19], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t11_1);
    info.eval->multiply_plain(ss[17], bits["000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t11_2);
    info.eval->multiply_plain(ss[18], bits["000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t11_3);
    info.eval->multiply_plain(ss[13], bits["000000000000000000000000000000000100000000000000000000010000000000000000000000000000000000000000000000000000"], t11_4);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000000000010000000000000000010000000000000000000000000000000000000000000000000000000"], t11_5);
    info.eval->multiply_plain(ss[26], bits["000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000"], t11_6);
    info.eval->multiply_plain(ss[15], bits["000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"], t11_7);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000000000000000000000000000000100000000000000100100000000000000000000000000000"], t11_8);
    info.eval->multiply_plain(ss[22], bits["000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000"], t11_9);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000000000000000000000000000000000000000000000010000000000001000000000000000000000000000000"], t11_10);
    info.eval->multiply_plain(ss[14], bits["000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000"], t11_11);
    info.eval->multiply_plain(ss[28], bits["000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000"], t11_12);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000"], t11_13);
    info.eval->multiply_plain(ss[25], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"], t11_14);
    info.eval->add_many({t11_1, t11_2, t11_3, t11_4, t11_5, t11_6, t11_7, t11_8, t11_9, t11_10, t11_11, t11_12, t11_13, t11_14}, ts[11]);
    
    info.eval->sub(ts[00], ts[01], vs[5]); // __v5 = __t00 - __t01
    
    // __t12 = blend(__s4@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s0@000000000000100000000000000000000000001000000000000100000000000001000000000000100000000000000000000000000000, __s5@000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s10@000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v0@000000000000000000000000000000000100100000000000010000000000000000000000010000000000000000000000000000000001, __s1@000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000, __s2@000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, __s6@000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000, __v1@000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000)
    ctxt t12_1, t12_2, t12_3, t12_4, t12_5, t12_6, t12_7, t12_8, t12_9;
    info.eval->multiply_plain(ss[4], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t12_1);
    info.eval->multiply_plain(ss[0], bits["000000000000100000000000000000000000001000000000000100000000000001000000000000100000000000000000000000000000"], t12_2);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t12_3);
    info.eval->multiply_plain(ss[10], bits["000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t12_4);
    info.eval->multiply_plain(vs[0], bits["000000000000000000000000000000000100100000000000010000000000000000000000010000000000000000000000000000000001"], t12_5);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000"], t12_6);
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"], t12_7);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000"], t12_8);
    info.eval->multiply_plain(vs[1], bits["000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000"], t12_9);
    info.eval->add_many({t12_1, t12_2, t12_3, t12_4, t12_5, t12_6, t12_7, t12_8, t12_9}, ts[12]);
    
    
    // __t13 = blend(__s19@100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s12@000000000000100000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000, __v3@000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s22@000000000000000000000010000000000000000000000000000000000000000100000000000000000000000000000000000000000000, __s13@000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000, __s11@000000000000000000000000000000000000100000000000000000000000000000000000010000000000000000000000000000000000, __s27@000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000, __v2@000000000000000000000000000000000000001000000000000000000000000000000000000000100000000000000000000000000000, __s23@000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, __s20@000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000, __s15@000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000, __s14@000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000, __s16@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
    ctxt t13_1, t13_2, t13_3, t13_4, t13_5, t13_6, t13_7, t13_8, t13_9, t13_10, t13_11, t13_12, t13_13;
    info.eval->multiply_plain(ss[19], bits["100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t13_1);
    info.eval->multiply_plain(ss[12], bits["000000000000100000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000"], t13_2);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t13_3);
    info.eval->multiply_plain(ss[22], bits["000000000000000000000010000000000000000000000000000000000000000100000000000000000000000000000000000000000000"], t13_4);
    info.eval->multiply_plain(ss[13], bits["000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000"], t13_5);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000000100000000000000000000000000000000000010000000000000000000000000000000000"], t13_6);
    info.eval->multiply_plain(ss[27], bits["000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000"], t13_7);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000000001000000000000000000000000000000000000000100000000000000000000000000000"], t13_8);
    info.eval->multiply_plain(ss[23], bits["000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"], t13_9);
    info.eval->multiply_plain(ss[20], bits["000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000"], t13_10);
    info.eval->multiply_plain(ss[15], bits["000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"], t13_11);
    info.eval->multiply_plain(ss[14], bits["000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000"], t13_12);
    info.eval->multiply_plain(ss[16], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"], t13_13);
    info.eval->add_many({t13_1, t13_2, t13_3, t13_4, t13_5, t13_6, t13_7, t13_8, t13_9, t13_10, t13_11, t13_12, t13_13}, ts[13]);
    
    info.eval->sub(ts[02], ts[03], vs[6]); // __v6 = __t02 - __t03
    
    // __t14 = blend(__v4@000000000000000000000010000000000000000000000000000000000000000010000000000000000000000000000000000000000000, __v5@000000000000000000000000001000000000000000000000000100010000000101000000000000100000000000000000000000000000, __v6@000000000000000000000000000000000000100000010000010000000000000000000000010000000000000000000000000000000001)
    ctxt t14_1, t14_2, t14_3;
    info.eval->multiply_plain(vs[4], bits["000000000000000000000010000000000000000000000000000000000000000010000000000000000000000000000000000000000000"], t14_1);
    info.eval->multiply_plain(vs[5], bits["000000000000000000000000001000000000000000000000000100010000000101000000000000100000000000000000000000000000"], t14_2);
    info.eval->multiply_plain(vs[6], bits["000000000000000000000000000000000000100000010000010000000000000000000000010000000000000000000000000000000001"], t14_3);
    info.eval->add_many({t14_1, t14_2, t14_3}, ts[14]);
    
    
    // __t15 = blend(__v6@000000000000000000000010000000000000000000000000000100000000000101000000000000100000000000000000000000000000, __v4@000000000000000000000000001000000000100000010000010000010000000000000000010000000000000000000000000000000001, __v5@000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000)
    ctxt t15_1, t15_2, t15_3;
    info.eval->multiply_plain(vs[6], bits["000000000000000000000010000000000000000000000000000100000000000101000000000000100000000000000000000000000000"], t15_1);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000001000000000100000010000010000010000000000000000010000000000000000000000000000000001"], t15_2);
    info.eval->multiply_plain(vs[5], bits["000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000"], t15_3);
    info.eval->add_many({t15_1, t15_2, t15_3}, ts[15]);
    
    info.eval->multiply(ts[04], ts[05], vs[7]); // __v7 = __t04 * __t05
    info.eval->relinearize_inplace(vs[7], rk);
    info.eval->rotate_rows(vs[7], -12, gk, ss[29]); // __s29 = __v7 >> 12
    
    // __t16 = blend(__v0@000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s5@000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s7@000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s6@000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000, __s0@000000000000000000000000000000000000000000000000000010000000000000000000000110000000000000000000000000000000, __v1@000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000001, __s4@000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000, __s8@000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000)
    ctxt t16_1, t16_2, t16_3, t16_4, t16_5, t16_6, t16_7, t16_8;
    info.eval->multiply_plain(vs[0], bits["000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t16_1);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t16_2);
    info.eval->multiply_plain(ss[7], bits["000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t16_3);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000"], t16_4);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000000000000000000000000000000000010000000000000000000000110000000000000000000000000000000"], t16_5);
    info.eval->multiply_plain(vs[1], bits["000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000001"], t16_6);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000"], t16_7);
    info.eval->multiply_plain(ss[8], bits["000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000"], t16_8);
    info.eval->add_many({t16_1, t16_2, t16_3, t16_4, t16_5, t16_6, t16_7, t16_8}, ts[16]);
    
    
    // __t17 = blend(__s12@000000000000100000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000, __v3@000000000000000000000100000000000000000000000000000000000000000000000000000001000000000000000000000000000000, __s17@000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s20@000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000, __s21@000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000, __s24@000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000, __v2@000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000, __s11@000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000, __s25@000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
    ctxt t17_1, t17_2, t17_3, t17_4, t17_5, t17_6, t17_7, t17_8, t17_9;
    info.eval->multiply_plain(ss[12], bits["000000000000100000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000"], t17_1);
    info.eval->multiply_plain(vs[3], bits["000000000000000000000100000000000000000000000000000000000000000000000000000001000000000000000000000000000000"], t17_2);
    info.eval->multiply_plain(ss[17], bits["000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t17_3);
    info.eval->multiply_plain(ss[20], bits["000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000"], t17_4);
    info.eval->multiply_plain(ss[21], bits["000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000"], t17_5);
    info.eval->multiply_plain(ss[24], bits["000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000"], t17_6);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000"], t17_7);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000"], t17_8);
    info.eval->multiply_plain(ss[25], bits["000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"], t17_9);
    info.eval->add_many({t17_1, t17_2, t17_3, t17_4, t17_5, t17_6, t17_7, t17_8, t17_9}, ts[17]);
    
    info.eval->sub(ts[06], ts[07], vs[8]); // __v8 = __t06 - __t07
    
    // __t18 = blend(__v6@100000000000000000000100000000000100010000000000100000000000000000000000000000000000000000000000000000000000, __v8@000000000000100000000000100000000000000000000000000000000000000001100000000000000000000000000000000000000000, __v4@000000000000000000000000000000000010001000000000000000000000000000000000000000000000000000000000000000000000, __v5@000000000000000000000000000000000000000010000000000010000000100000000000100111000000000000000000000000000001)
    ctxt t18_1, t18_2, t18_3, t18_4;
    info.eval->multiply_plain(vs[6], bits["100000000000000000000100000000000100010000000000100000000000000000000000000000000000000000000000000000000000"], t18_1);
    info.eval->multiply_plain(vs[8], bits["000000000000100000000000100000000000000000000000000000000000000001100000000000000000000000000000000000000000"], t18_2);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000010001000000000000000000000000000000000000000000000000000000000000000000000"], t18_3);
    info.eval->multiply_plain(vs[5], bits["000000000000000000000000000000000000000010000000000010000000100000000000100111000000000000000000000000000001"], t18_4);
    info.eval->add_many({t18_1, t18_2, t18_3, t18_4}, ts[18]);
    
    
    // __t19 = blend(__v5@100000000000000000000000100000000110000000000000000000000000000000000000000000000000000000000000000000000000, __v6@000000000000100000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000, __v8@000000000000000000000100000000000000000000000000100010000000000000000000000111000000000000000000000000000001, __v4@000000000000000000000000000000000000010010000000000000000000100001100000100000000000000000000000000000000000)
    ctxt t19_1, t19_2, t19_3, t19_4;
    info.eval->multiply_plain(vs[5], bits["100000000000000000000000100000000110000000000000000000000000000000000000000000000000000000000000000000000000"], t19_1);
    info.eval->multiply_plain(vs[6], bits["000000000000100000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000"], t19_2);
    info.eval->multiply_plain(vs[8], bits["000000000000000000000100000000000000000000000000100010000000000000000000000111000000000000000000000000000001"], t19_3);
    info.eval->multiply_plain(vs[4], bits["000000000000000000000000000000000000010010000000000000000000100001100000100000000000000000000000000000000000"], t19_4);
    info.eval->add_many({t19_1, t19_2, t19_3, t19_4}, ts[19]);
    
    info.eval->multiply(ts[08], ts[09], vs[9]); // __v9 = __t08 * __t09
    info.eval->relinearize_inplace(vs[9], rk);
    info.eval->rotate_rows(vs[9], -12, gk, ss[30]); // __s30 = __v9 >> 12
    info.eval->rotate_rows(vs[9], -1, gk, ss[31]); // __s31 = __v9 >> 1
    info.eval->rotate_rows(vs[9], -82, gk, ss[32]); // __s32 = __v9 >> 82
    info.eval->add(vs[7], vs[9], vs[10]); // __v10 = __v7 + __v9
    info.eval->add(vs[9], ss[30], vs[11]); // __v11 = __v9 + __s30
    info.eval->add(vs[7], ss[31], vs[12]); // __v12 = __v7 + __s31
    info.eval->add(vs[9], ss[29], vs[15]); // __v15 = __v9 + __s29
    info.eval->add(vs[7], ss[30], vs[16]); // __v16 = __v7 + __s30
    info.eval->add(vs[7], ss[29], vs[17]); // __v17 = __v7 + __s29
    info.eval->add(vs[7], ss[32], vs[21]); // __v21 = __v7 + __s32
    return vs[16];
}
    