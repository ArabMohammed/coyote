
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "0000000010000000010000000000000000000000000000000100100000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000001000000000", info);
    add_bitstring(bits, "0000000000000000000000000100000000100101000000000000000000001000", info);
    add_bitstring(bits, "0000000010000000110000000000000000001000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000010100000000000000000000000010000001000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000010000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000100000000000010000010000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000001000111", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000011000", info);
    add_bitstring(bits, "0000000000000000000000000001000000000000000000100000000001000110", info);
    add_bitstring(bits, "0000000000000000000000000010100000000000000000001011010100000000", info);
    add_bitstring(bits, "0000000000000000000000000100000000000000000000000000000000101001", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000010100", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000001001", info);
    add_bitstring(bits, "0000000000000000000000000000000000100100000000000000000000010000", info);
    add_bitstring(bits, "0000000000000000000000000100000000000001000000000010000100000000", info);
    add_bitstring(bits, "0000000010000000110000000000000000001001000000001001000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000100000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000100100100000100000", info);
    add_bitstring(bits, "0000000000000000000000000001000000000000000000000000001000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000110101000000000000000000010000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000101", info);
    add_bitstring(bits, "0000000000000000000000000000000000000111000000000000001000000000", info);
    add_bitstring(bits, "0000000010000000010000000000000000000101000000001011000000000000", info);
    add_bitstring(bits, "0000000000000000100000000000000000001000000000000000000010000000", info);
    add_bitstring(bits, "0000000000000000100000000000000000001000000000100000000000100000", info);
    add_bitstring(bits, "0000000000000000000000000000000000010000000000000000000010010000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000001000000000000001000010000", info);
    add_bitstring(bits, "0000000000000000000000000000000000010011000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000001000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000100000000000000000000000100100100100001", info);
    add_bitstring(bits, "0000000000000000000000000001000000000000000000000000000001000111", info);
    add_bitstring(bits, "0000000000000000000000000010100000100100000000001001010000001000", info);
    add_bitstring(bits, "0000000000000000000000000010100000000000000000000100110100000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000010110000000000000000010000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000100000000001000110", info);
    add_bitstring(bits, "0000000000000000000000000001000000000000000000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(24);
    ts[0] = encrypt_input("11000000001101110000000111111111111000001111111111111111100000011111111011111111111011011111111111111111111011011111111100000000", info);
    ts[1] = encrypt_input("11000000001101110000000111111111111000001111111111111111100000011111111011111111111011011111111111111111111011011111111100000000", info);
    ts[2] = encrypt_input("00000000110000000011011100000001111111111111110110001111111111111111100000001110111111111110110111111111111111111110110111111111", info);
    ts[3] = encrypt_input("00000000110000000011011100000001111111111111110110001111111111111111100000001110111111111110110111111111111111111110110111111111", info);
    ts[4] = encrypt_input("11100000001111110000000111111111111000001111111111111111110000011111111111011111011111011111111011011111011111011111111000000000", info);
    ts[5] = encrypt_input("11100000001111110000000111111111111000001111111111111111110000011111111111011111011111011111111011011111011111011111111000000000", info);
    ts[6] = encrypt_input("00000000111000000011111100000001111111111111110111001111111111111111110000001110110111110111110111111110110111110111110111111110", info);
    ts[7] = encrypt_input("00000000111000000011111100000001111111111111110111001111111111111111110000001110110111110111110111111110110111110111110111111110", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[22];
    ctxt ss[6];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -8, gk, ss[0]); // __s0 = __v0 >> 8
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -8, gk, ss[1]); // __s1 = __v1 >> 8
    vs[2] = ts[4]; // vector load instr
    info.eval->rotate_rows(vs[2], -8, gk, ss[2]); // __s2 = __v2 >> 8
    vs[3] = ts[6]; // vector load instr
    info.eval->rotate_rows(vs[3], -8, gk, ss[3]); // __s3 = __v3 >> 8
    
    // __t8 = blend(__s1@0000000000000000000000000100000000000000000000000000000000101001, __s0@0000000000000000000000000010100000000000000000000100110100000000, __v1@0000000000000000000000000000000000010000000000000000000010010000, __v0@0000000000000000000000000000000000000111000000000000001000000000)
    ctxt t8_1, t8_2, t8_3, t8_4;
    info.eval->multiply_plain(ss[1], bits["0000000000000000000000000100000000000000000000000000000000101001"], t8_1);
    info.eval->multiply_plain(ss[0], bits["0000000000000000000000000010100000000000000000000100110100000000"], t8_2);
    info.eval->multiply_plain(vs[1], bits["0000000000000000000000000000000000010000000000000000000010010000"], t8_3);
    info.eval->multiply_plain(vs[0], bits["0000000000000000000000000000000000000111000000000000001000000000"], t8_4);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4}, ts[8]);
    
    
    // __t9 = blend(__s3@0000000000000000000000000100000000000000000000000000000000101001, __s2@0000000000000000000000000010100000000000000000000100110100000000, __v3@0000000000000000000000000000000000010000000000000000000010010000, __v2@0000000000000000000000000000000000000111000000000000001000000000)
    ctxt t9_1, t9_2, t9_3, t9_4;
    info.eval->multiply_plain(ss[3], bits["0000000000000000000000000100000000000000000000000000000000101001"], t9_1);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000010100000000000000000000100110100000000"], t9_2);
    info.eval->multiply_plain(vs[3], bits["0000000000000000000000000000000000010000000000000000000010010000"], t9_3);
    info.eval->multiply_plain(vs[2], bits["0000000000000000000000000000000000000111000000000000001000000000"], t9_4);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4}, ts[9]);
    
    info.eval->sub(ts[8], ts[9], vs[4]); // __v4 = __t8 - __t9
    
    // __t10 = blend(__v1@0000000000000000000000000100000000100101000000000000000000001000, __v0@0000000000000000000000000010100000000000000000001011010100000000, __s0@0000000000000000000000000001000000000000000000000000001000000000, __s1@0000000000000000000000000000000000000000000000100000000001000110)
    ctxt t10_1, t10_2, t10_3, t10_4;
    info.eval->multiply_plain(vs[1], bits["0000000000000000000000000100000000100101000000000000000000001000"], t10_1);
    info.eval->multiply_plain(vs[0], bits["0000000000000000000000000010100000000000000000001011010100000000"], t10_2);
    info.eval->multiply_plain(ss[0], bits["0000000000000000000000000001000000000000000000000000001000000000"], t10_3);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000000000000000000000000000000100000000001000110"], t10_4);
    info.eval->add_many({t10_1, t10_2, t10_3, t10_4}, ts[10]);
    
    
    // __t11 = blend(__v3@0000000000000000000000000100000000100101000000000000000000001000, __v2@0000000000000000000000000010100000000000000000001011010100000000, __s2@0000000000000000000000000001000000000000000000000000001000000000, __s3@0000000000000000000000000000000000000000000000100000000001000110)
    ctxt t11_1, t11_2, t11_3, t11_4;
    info.eval->multiply_plain(vs[3], bits["0000000000000000000000000100000000100101000000000000000000001000"], t11_1);
    info.eval->multiply_plain(vs[2], bits["0000000000000000000000000010100000000000000000001011010100000000"], t11_2);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000001000000000000000000000000001000000000"], t11_3);
    info.eval->multiply_plain(ss[3], bits["0000000000000000000000000000000000000000000000100000000001000110"], t11_4);
    info.eval->add_many({t11_1, t11_2, t11_3, t11_4}, ts[11]);
    
    info.eval->sub(ts[10], ts[11], vs[5]); // __v5 = __t10 - __t11
    
    // __t12 = blend(__s0@0000000010000000010000000000000000000101000000001011000000000000, __s1@0000000000000000100000000000000000001000000000000000000010000000, __v0@0000000000000000000000000001000000000000000000000000000000000000, __v1@0000000000000000000000000000000000000000000000000000000001000111)
    ctxt t12_1, t12_2, t12_3, t12_4;
    info.eval->multiply_plain(ss[0], bits["0000000010000000010000000000000000000101000000001011000000000000"], t12_1);
    info.eval->multiply_plain(ss[1], bits["0000000000000000100000000000000000001000000000000000000010000000"], t12_2);
    info.eval->multiply_plain(vs[0], bits["0000000000000000000000000001000000000000000000000000000000000000"], t12_3);
    info.eval->multiply_plain(vs[1], bits["0000000000000000000000000000000000000000000000000000000001000111"], t12_4);
    info.eval->add_many({t12_1, t12_2, t12_3, t12_4}, ts[12]);
    
    
    // __t13 = blend(__s2@0000000010000000010000000000000000000101000000001011000000000000, __s3@0000000000000000100000000000000000001000000000000000000010000000, __v2@0000000000000000000000000001000000000000000000000000000000000000, __v3@0000000000000000000000000000000000000000000000000000000001000111)
    ctxt t13_1, t13_2, t13_3, t13_4;
    info.eval->multiply_plain(ss[2], bits["0000000010000000010000000000000000000101000000001011000000000000"], t13_1);
    info.eval->multiply_plain(ss[3], bits["0000000000000000100000000000000000001000000000000000000010000000"], t13_2);
    info.eval->multiply_plain(vs[2], bits["0000000000000000000000000001000000000000000000000000000000000000"], t13_3);
    info.eval->multiply_plain(vs[3], bits["0000000000000000000000000000000000000000000000000000000001000111"], t13_4);
    info.eval->add_many({t13_1, t13_2, t13_3, t13_4}, ts[13]);
    
    info.eval->sub(ts[12], ts[13], vs[6]); // __v6 = __t12 - __t13
    
    // __t14 = blend(__v0@0000000010000000010000000000000000000000000000000100100000000000, __v1@0000000000000000100000000000000000001000000000100000000000100000, __s1@0000000000000000000000000000000000110101000000000000000000010000, __s0@0000000000000000000000000000000000000010000000000000000000000000)
    ctxt t14_1, t14_2, t14_3, t14_4;
    info.eval->multiply_plain(vs[0], bits["0000000010000000010000000000000000000000000000000100100000000000"], t14_1);
    info.eval->multiply_plain(vs[1], bits["0000000000000000100000000000000000001000000000100000000000100000"], t14_2);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000000000000000000110101000000000000000000010000"], t14_3);
    info.eval->multiply_plain(ss[0], bits["0000000000000000000000000000000000000010000000000000000000000000"], t14_4);
    info.eval->add_many({t14_1, t14_2, t14_3, t14_4}, ts[14]);
    
    
    // __t15 = blend(__v2@0000000010000000010000000000000000000000000000000100100000000000, __v3@0000000000000000100000000000000000001000000000100000000000100000, __s3@0000000000000000000000000000000000110101000000000000000000010000, __s2@0000000000000000000000000000000000000010000000000000000000000000)
    ctxt t15_1, t15_2, t15_3, t15_4;
    info.eval->multiply_plain(vs[2], bits["0000000010000000010000000000000000000000000000000100100000000000"], t15_1);
    info.eval->multiply_plain(vs[3], bits["0000000000000000100000000000000000001000000000100000000000100000"], t15_2);
    info.eval->multiply_plain(ss[3], bits["0000000000000000000000000000000000110101000000000000000000010000"], t15_3);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000000000000000010000000000000000000000000"], t15_4);
    info.eval->add_many({t15_1, t15_2, t15_3, t15_4}, ts[15]);
    
    info.eval->sub(ts[14], ts[15], vs[7]); // __v7 = __t14 - __t15
    
    // __t16 = blend(__v4@0000000000000000000000000100000000000000000000000100100100100001, __v5@0000000000000000000000000001000000000000000000100000000001000110, __v7@0000000000000000000000000000000000010011000000000000000000000000, __v6@0000000000000000000000000000000000000100000000000010000010000000)
    ctxt t16_1, t16_2, t16_3, t16_4;
    info.eval->multiply_plain(vs[4], bits["0000000000000000000000000100000000000000000000000100100100100001"], t16_1);
    info.eval->multiply_plain(vs[5], bits["0000000000000000000000000001000000000000000000100000000001000110"], t16_2);
    info.eval->multiply_plain(vs[7], bits["0000000000000000000000000000000000010011000000000000000000000000"], t16_3);
    info.eval->multiply_plain(vs[6], bits["0000000000000000000000000000000000000100000000000010000010000000"], t16_4);
    info.eval->add_many({t16_1, t16_2, t16_3, t16_4}, ts[16]);
    
    
    // __t17 = blend(__v5@0000000000000000000000000100000000000001000000000010000100000000, __v6@0000000000000000000000000001000000000000000000000000000001000111, __v4@0000000000000000000000000000000000010110000000000000000010000000, __v7@0000000000000000000000000000000000000000000000100100100000100000)
    ctxt t17_1, t17_2, t17_3, t17_4;
    info.eval->multiply_plain(vs[5], bits["0000000000000000000000000100000000000001000000000010000100000000"], t17_1);
    info.eval->multiply_plain(vs[6], bits["0000000000000000000000000001000000000000000000000000000001000111"], t17_2);
    info.eval->multiply_plain(vs[4], bits["0000000000000000000000000000000000010110000000000000000010000000"], t17_3);
    info.eval->multiply_plain(vs[7], bits["0000000000000000000000000000000000000000000000100100100000100000"], t17_4);
    info.eval->add_many({t17_1, t17_2, t17_3, t17_4}, ts[17]);
    
    info.eval->multiply(ts[16], ts[17], vs[8]); // __v8 = __t16 * __t17
    info.eval->relinearize_inplace(vs[8], rk);
    info.eval->rotate_rows(vs[8], -8, gk, ss[4]); // __s4 = __v8 >> 8
    
    // __t18 = blend(__v6@0000000010000000110000000000000000001001000000001001000000000000, __v4@0000000000000000000000000010100000000000000000000000010000001000, __v7@0000000000000000000000000000000000100100000000000000000000010000, __v5@0000000000000000000000000000000000000000000000000000001000000000)
    ctxt t18_1, t18_2, t18_3, t18_4;
    info.eval->multiply_plain(vs[6], bits["0000000010000000110000000000000000001001000000001001000000000000"], t18_1);
    info.eval->multiply_plain(vs[4], bits["0000000000000000000000000010100000000000000000000000010000001000"], t18_2);
    info.eval->multiply_plain(vs[7], bits["0000000000000000000000000000000000100100000000000000000000010000"], t18_3);
    info.eval->multiply_plain(vs[5], bits["0000000000000000000000000000000000000000000000000000001000000000"], t18_4);
    info.eval->add_many({t18_1, t18_2, t18_3, t18_4}, ts[18]);
    
    
    // __t19 = blend(__v7@0000000010000000110000000000000000001000000000000000000000000000, __v5@0000000000000000000000000010100000100100000000001001010000001000, __v4@0000000000000000000000000000000000000001000000000000001000010000)
    ctxt t19_1, t19_2, t19_3;
    info.eval->multiply_plain(vs[7], bits["0000000010000000110000000000000000001000000000000000000000000000"], t19_1);
    info.eval->multiply_plain(vs[5], bits["0000000000000000000000000010100000100100000000001001010000001000"], t19_2);
    info.eval->multiply_plain(vs[4], bits["0000000000000000000000000000000000000001000000000000001000010000"], t19_3);
    info.eval->add_many({t19_1, t19_2, t19_3}, ts[19]);
    
    info.eval->multiply(ts[18], ts[19], vs[9]); // __v9 = __t18 * __t19
    info.eval->relinearize_inplace(vs[9], rk);
    info.eval->rotate_rows(vs[9], -8, gk, ss[5]); // __s5 = __v9 >> 8
    
    // __t20 = blend(__v8@0000000000000000000000000000000000000100000000000000000000000000, __v9@0000000000000000000000000000000000000001000000000000000000000000)
    ctxt t20_1, t20_2;
    info.eval->multiply_plain(vs[8], bits["0000000000000000000000000000000000000100000000000000000000000000"], t20_1);
    info.eval->multiply_plain(vs[9], bits["0000000000000000000000000000000000000001000000000000000000000000"], t20_2);
    info.eval->add(t20_1, t20_2, ts[20]);
    
    
    // __t21 = blend(__v9@0000000000000000000000000000000000000100000000000000000000000000, __v8@0000000000000000000000000000000000000001000000000000000000000000)
    ctxt t21_1, t21_2;
    info.eval->multiply_plain(vs[9], bits["0000000000000000000000000000000000000100000000000000000000000000"], t21_1);
    info.eval->multiply_plain(vs[8], bits["0000000000000000000000000000000000000001000000000000000000000000"], t21_2);
    info.eval->add(t21_1, t21_2, ts[21]);
    
    info.eval->add(ts[20], ts[21], vs[10]); // __v10 = __t20 + __t21
    
    // __t22 = blend(__s5@0000000000000000000000000000000000000000000000000000000000010100, __s4@0000000000000000000000000000000000000000000000000000000000001001)
    ctxt t22_1, t22_2;
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000000000000000000000000000000000000010100"], t22_1);
    info.eval->multiply_plain(ss[4], bits["0000000000000000000000000000000000000000000000000000000000001001"], t22_2);
    info.eval->add(t22_1, t22_2, ts[22]);
    
    
    // __t23 = blend(__v9@0000000000000000000000000000000000000000000000000000000000011000, __v8@0000000000000000000000000000000000000000000000000000000000000101)
    ctxt t23_1, t23_2;
    info.eval->multiply_plain(vs[9], bits["0000000000000000000000000000000000000000000000000000000000011000"], t23_1);
    info.eval->multiply_plain(vs[8], bits["0000000000000000000000000000000000000000000000000000000000000101"], t23_2);
    info.eval->add(t23_1, t23_2, ts[23]);
    
    info.eval->add(ts[22], ts[23], vs[11]); // __v11 = __t22 + __t23
    info.eval->add(ss[5], vs[9], vs[12]); // __v12 = __s5 + __v9
    info.eval->add(ss[4], vs[8], vs[13]); // __v13 = __s4 + __v8
    info.eval->add(ss[4], vs[8], vs[14]); // __v14 = __s4 + __v8
    info.eval->add(ss[5], vs[8], vs[15]); // __v15 = __s5 + __v8
    info.eval->add(ss[5], vs[8], vs[16]); // __v16 = __s5 + __v8
    info.eval->add(ss[5], vs[9], vs[17]); // __v17 = __s5 + __v9
    info.eval->add(ss[5], vs[9], vs[18]); // __v18 = __s5 + __v9
    info.eval->add(ss[4], vs[8], vs[19]); // __v19 = __s4 + __v8
    info.eval->add(ss[4], vs[8], vs[20]); // __v20 = __s4 + __v8
    info.eval->add(ss[5], vs[8], vs[21]); // __v21 = __s5 + __v8
    return vs[21];
}
    