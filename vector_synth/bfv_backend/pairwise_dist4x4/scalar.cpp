
# include "../scalar.hpp"
int ScalarProgram::num_registers()
{
    return 128;
}

std::vector<std::string> ScalarProgram::vars_used()
{
    return {"a:0", "b:0", "b:3", "d:3", "a:1", "a:3", "d:1", "c:3", "b:1", "c:0", "b:2", "d:2", "c:1", "d:0", "c:2", "a:2"};
}

std::vector<ctxt> ScalarProgram::computation(std::map<std::string, ctxt> locs, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    ctxt regs[num_registers()];
    regs[0] = locs["a:0"];
    regs[1] = locs["c:0"];
    info.eval->add(regs[0], regs[1], regs[2]);
    info.eval->add(regs[0], regs[1], regs[3]);
    info.eval->multiply(regs[2], regs[3], regs[4]);
    info.eval->relinearize_inplace(regs[4], rk);
    regs[5] = locs["b:0"];
    regs[6] = locs["d:0"];
    info.eval->add(regs[5], regs[6], regs[7]);
    info.eval->add(regs[5], regs[6], regs[8]);
    info.eval->multiply(regs[7], regs[8], regs[9]);
    info.eval->relinearize_inplace(regs[9], rk);
    info.eval->sub(regs[4], regs[9], regs[10]);
    regs[11] = locs["c:1"];
    info.eval->add(regs[0], regs[11], regs[12]);
    info.eval->add(regs[0], regs[11], regs[13]);
    info.eval->multiply(regs[12], regs[13], regs[14]);
    info.eval->relinearize_inplace(regs[14], rk);
    regs[15] = locs["d:1"];
    info.eval->add(regs[5], regs[15], regs[16]);
    info.eval->add(regs[5], regs[15], regs[17]);
    info.eval->multiply(regs[16], regs[17], regs[18]);
    info.eval->relinearize_inplace(regs[18], rk);
    info.eval->sub(regs[14], regs[18], regs[19]);
    regs[20] = locs["c:2"];
    info.eval->add(regs[0], regs[20], regs[21]);
    info.eval->add(regs[0], regs[20], regs[22]);
    info.eval->multiply(regs[21], regs[22], regs[23]);
    info.eval->relinearize_inplace(regs[23], rk);
    regs[24] = locs["d:2"];
    info.eval->add(regs[5], regs[24], regs[25]);
    info.eval->add(regs[5], regs[24], regs[26]);
    info.eval->multiply(regs[25], regs[26], regs[27]);
    info.eval->relinearize_inplace(regs[27], rk);
    info.eval->sub(regs[23], regs[27], regs[28]);
    regs[29] = locs["c:3"];
    info.eval->add(regs[0], regs[29], regs[30]);
    info.eval->add(regs[0], regs[29], regs[31]);
    info.eval->multiply(regs[30], regs[31], regs[32]);
    info.eval->relinearize_inplace(regs[32], rk);
    regs[33] = locs["d:3"];
    info.eval->add(regs[5], regs[33], regs[34]);
    info.eval->add(regs[5], regs[33], regs[35]);
    info.eval->multiply(regs[34], regs[35], regs[36]);
    info.eval->relinearize_inplace(regs[36], rk);
    info.eval->sub(regs[32], regs[36], regs[37]);
    regs[38] = locs["a:1"];
    info.eval->add(regs[38], regs[1], regs[39]);
    info.eval->add(regs[38], regs[1], regs[40]);
    info.eval->multiply(regs[39], regs[40], regs[41]);
    info.eval->relinearize_inplace(regs[41], rk);
    regs[42] = locs["b:1"];
    info.eval->add(regs[42], regs[6], regs[43]);
    info.eval->add(regs[42], regs[6], regs[44]);
    info.eval->multiply(regs[43], regs[44], regs[45]);
    info.eval->relinearize_inplace(regs[45], rk);
    info.eval->sub(regs[41], regs[45], regs[46]);
    info.eval->add(regs[38], regs[11], regs[47]);
    info.eval->add(regs[38], regs[11], regs[48]);
    info.eval->multiply(regs[47], regs[48], regs[49]);
    info.eval->relinearize_inplace(regs[49], rk);
    info.eval->add(regs[42], regs[15], regs[50]);
    info.eval->add(regs[42], regs[15], regs[51]);
    info.eval->multiply(regs[50], regs[51], regs[52]);
    info.eval->relinearize_inplace(regs[52], rk);
    info.eval->sub(regs[49], regs[52], regs[53]);
    info.eval->add(regs[38], regs[20], regs[54]);
    info.eval->add(regs[38], regs[20], regs[55]);
    info.eval->multiply(regs[54], regs[55], regs[56]);
    info.eval->relinearize_inplace(regs[56], rk);
    info.eval->add(regs[42], regs[24], regs[57]);
    info.eval->add(regs[42], regs[24], regs[58]);
    info.eval->multiply(regs[57], regs[58], regs[59]);
    info.eval->relinearize_inplace(regs[59], rk);
    info.eval->sub(regs[56], regs[59], regs[60]);
    info.eval->add(regs[38], regs[29], regs[61]);
    info.eval->add(regs[38], regs[29], regs[62]);
    info.eval->multiply(regs[61], regs[62], regs[63]);
    info.eval->relinearize_inplace(regs[63], rk);
    info.eval->add(regs[42], regs[33], regs[64]);
    info.eval->add(regs[42], regs[33], regs[65]);
    info.eval->multiply(regs[64], regs[65], regs[66]);
    info.eval->relinearize_inplace(regs[66], rk);
    info.eval->sub(regs[63], regs[66], regs[67]);
    regs[68] = locs["a:2"];
    info.eval->add(regs[68], regs[1], regs[69]);
    info.eval->add(regs[68], regs[1], regs[70]);
    info.eval->multiply(regs[69], regs[70], regs[71]);
    info.eval->relinearize_inplace(regs[71], rk);
    regs[72] = locs["b:2"];
    info.eval->add(regs[72], regs[6], regs[73]);
    info.eval->add(regs[72], regs[6], regs[74]);
    info.eval->multiply(regs[73], regs[74], regs[75]);
    info.eval->relinearize_inplace(regs[75], rk);
    info.eval->sub(regs[71], regs[75], regs[76]);
    info.eval->add(regs[68], regs[11], regs[77]);
    info.eval->add(regs[68], regs[11], regs[78]);
    info.eval->multiply(regs[77], regs[78], regs[79]);
    info.eval->relinearize_inplace(regs[79], rk);
    info.eval->add(regs[72], regs[15], regs[80]);
    info.eval->add(regs[72], regs[15], regs[81]);
    info.eval->multiply(regs[80], regs[81], regs[82]);
    info.eval->relinearize_inplace(regs[82], rk);
    info.eval->sub(regs[79], regs[82], regs[83]);
    info.eval->add(regs[68], regs[20], regs[84]);
    info.eval->add(regs[68], regs[20], regs[85]);
    info.eval->multiply(regs[84], regs[85], regs[86]);
    info.eval->relinearize_inplace(regs[86], rk);
    info.eval->add(regs[72], regs[24], regs[87]);
    info.eval->add(regs[72], regs[24], regs[88]);
    info.eval->multiply(regs[87], regs[88], regs[89]);
    info.eval->relinearize_inplace(regs[89], rk);
    info.eval->sub(regs[86], regs[89], regs[90]);
    info.eval->add(regs[68], regs[29], regs[91]);
    info.eval->add(regs[68], regs[29], regs[92]);
    info.eval->multiply(regs[91], regs[92], regs[93]);
    info.eval->relinearize_inplace(regs[93], rk);
    info.eval->add(regs[72], regs[33], regs[94]);
    info.eval->add(regs[72], regs[33], regs[95]);
    info.eval->multiply(regs[94], regs[95], regs[96]);
    info.eval->relinearize_inplace(regs[96], rk);
    info.eval->sub(regs[93], regs[96], regs[97]);
    regs[98] = locs["a:3"];
    info.eval->add(regs[98], regs[1], regs[99]);
    info.eval->add(regs[98], regs[1], regs[100]);
    info.eval->multiply(regs[99], regs[100], regs[101]);
    info.eval->relinearize_inplace(regs[101], rk);
    regs[102] = locs["b:3"];
    info.eval->add(regs[102], regs[6], regs[103]);
    info.eval->add(regs[102], regs[6], regs[104]);
    info.eval->multiply(regs[103], regs[104], regs[105]);
    info.eval->relinearize_inplace(regs[105], rk);
    info.eval->sub(regs[101], regs[105], regs[106]);
    info.eval->add(regs[98], regs[11], regs[107]);
    info.eval->add(regs[98], regs[11], regs[108]);
    info.eval->multiply(regs[107], regs[108], regs[109]);
    info.eval->relinearize_inplace(regs[109], rk);
    info.eval->add(regs[102], regs[15], regs[110]);
    info.eval->add(regs[102], regs[15], regs[111]);
    info.eval->multiply(regs[110], regs[111], regs[112]);
    info.eval->relinearize_inplace(regs[112], rk);
    info.eval->sub(regs[109], regs[112], regs[113]);
    info.eval->add(regs[98], regs[20], regs[114]);
    info.eval->add(regs[98], regs[20], regs[115]);
    info.eval->multiply(regs[114], regs[115], regs[116]);
    info.eval->relinearize_inplace(regs[116], rk);
    info.eval->add(regs[102], regs[24], regs[117]);
    info.eval->add(regs[102], regs[24], regs[118]);
    info.eval->multiply(regs[117], regs[118], regs[119]);
    info.eval->relinearize_inplace(regs[119], rk);
    info.eval->sub(regs[116], regs[119], regs[120]);
    info.eval->add(regs[98], regs[29], regs[121]);
    info.eval->add(regs[98], regs[29], regs[122]);
    info.eval->multiply(regs[121], regs[122], regs[123]);
    info.eval->relinearize_inplace(regs[123], rk);
    info.eval->add(regs[102], regs[33], regs[124]);
    info.eval->add(regs[102], regs[33], regs[125]);
    info.eval->multiply(regs[124], regs[125], regs[126]);
    info.eval->relinearize_inplace(regs[126], rk);
    info.eval->sub(regs[123], regs[126], regs[127]);
    std::vector<ctxt> answer;
    answer.push_back(regs[10]);
    answer.push_back(regs[19]);
    answer.push_back(regs[28]);
    answer.push_back(regs[37]);
    answer.push_back(regs[46]);
    answer.push_back(regs[53]);
    answer.push_back(regs[60]);
    answer.push_back(regs[67]);
    answer.push_back(regs[76]);
    answer.push_back(regs[83]);
    answer.push_back(regs[90]);
    answer.push_back(regs[97]);
    answer.push_back(regs[106]);
    answer.push_back(regs[113]);
    answer.push_back(regs[120]);
    answer.push_back(regs[127]);
    return answer;
}
    