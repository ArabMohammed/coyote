
# include <scalar.hpp>
int ScalarProgram::num_registers()
{
    return 111;
}

std::vector<std::string> ScalarProgram::vars_used()
{
    return {"hamming_distance_16(b):12", "hamming_distance_16(b):1", "hamming_distance_16(a):2", "hamming_distance_16(b):2", "hamming_distance_16(a):13", "hamming_distance_16(a):8", "hamming_distance_16(a):11", "hamming_distance_16(b):0", "hamming_distance_16(a):5", "hamming_distance_16(b):4", "hamming_distance_16(b):6", "hamming_distance_16(a):7", "hamming_distance_16(b):7", "hamming_distance_16(a):3", "hamming_distance_16(a):9", "hamming_distance_16(b):9", "hamming_distance_16(b):11", "hamming_distance_16(b):13", "hamming_distance_16(a):0", "hamming_distance_16(a):1", "2", "hamming_distance_16(b):15", "hamming_distance_16(a):6", "hamming_distance_16(a):10", "hamming_distance_16(a):4", "hamming_distance_16(b):8", "hamming_distance_16(b):14", "hamming_distance_16(a):12", "hamming_distance_16(b):3", "hamming_distance_16(a):14", "hamming_distance_16(b):10", "hamming_distance_16(b):5", "hamming_distance_16(a):15"};
}

std::vector<ctxt> ScalarProgram::computation(std::map<std::string, ctxt> locs, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    ctxt regs[num_registers()];
    regs[0] = locs["hamming_distance_16(a):0"];
    regs[1] = locs["hamming_distance_16(b):0"];
    info.eval->add(regs[0], regs[1], regs[2]);
    info.eval->multiply(regs[0], regs[1], regs[3]);
    info.eval->relinearize_inplace(regs[3], rk);
    info.eval->multiply(locs["2"], regs[3], regs[4]);
    info.eval->relinearize_inplace(regs[4], rk);
    info.eval->sub(regs[2], regs[4], regs[5]);
    regs[6] = locs["hamming_distance_16(a):1"];
    regs[7] = locs["hamming_distance_16(b):1"];
    info.eval->add(regs[6], regs[7], regs[8]);
    info.eval->multiply(regs[6], regs[7], regs[9]);
    info.eval->relinearize_inplace(regs[9], rk);
    info.eval->multiply(locs["2"], regs[9], regs[10]);
    info.eval->relinearize_inplace(regs[10], rk);
    info.eval->sub(regs[8], regs[10], regs[11]);
    info.eval->add(regs[5], regs[11], regs[12]);
    regs[13] = locs["hamming_distance_16(a):2"];
    regs[14] = locs["hamming_distance_16(b):2"];
    info.eval->add(regs[13], regs[14], regs[15]);
    info.eval->multiply(regs[13], regs[14], regs[16]);
    info.eval->relinearize_inplace(regs[16], rk);
    info.eval->multiply(locs["2"], regs[16], regs[17]);
    info.eval->relinearize_inplace(regs[17], rk);
    info.eval->sub(regs[15], regs[17], regs[18]);
    regs[19] = locs["hamming_distance_16(a):3"];
    regs[20] = locs["hamming_distance_16(b):3"];
    info.eval->add(regs[19], regs[20], regs[21]);
    info.eval->multiply(regs[19], regs[20], regs[22]);
    info.eval->relinearize_inplace(regs[22], rk);
    info.eval->multiply(locs["2"], regs[22], regs[23]);
    info.eval->relinearize_inplace(regs[23], rk);
    info.eval->sub(regs[21], regs[23], regs[24]);
    info.eval->add(regs[18], regs[24], regs[25]);
    info.eval->add(regs[12], regs[25], regs[26]);
    regs[27] = locs["hamming_distance_16(a):4"];
    regs[28] = locs["hamming_distance_16(b):4"];
    info.eval->add(regs[27], regs[28], regs[29]);
    info.eval->multiply(regs[27], regs[28], regs[30]);
    info.eval->relinearize_inplace(regs[30], rk);
    info.eval->multiply(locs["2"], regs[30], regs[31]);
    info.eval->relinearize_inplace(regs[31], rk);
    info.eval->sub(regs[29], regs[31], regs[32]);
    regs[33] = locs["hamming_distance_16(a):5"];
    regs[34] = locs["hamming_distance_16(b):5"];
    info.eval->add(regs[33], regs[34], regs[35]);
    info.eval->multiply(regs[33], regs[34], regs[36]);
    info.eval->relinearize_inplace(regs[36], rk);
    info.eval->multiply(locs["2"], regs[36], regs[37]);
    info.eval->relinearize_inplace(regs[37], rk);
    info.eval->sub(regs[35], regs[37], regs[38]);
    info.eval->add(regs[32], regs[38], regs[39]);
    regs[40] = locs["hamming_distance_16(a):6"];
    regs[41] = locs["hamming_distance_16(b):6"];
    info.eval->add(regs[40], regs[41], regs[42]);
    info.eval->multiply(regs[40], regs[41], regs[43]);
    info.eval->relinearize_inplace(regs[43], rk);
    info.eval->multiply(locs["2"], regs[43], regs[44]);
    info.eval->relinearize_inplace(regs[44], rk);
    info.eval->sub(regs[42], regs[44], regs[45]);
    regs[46] = locs["hamming_distance_16(a):7"];
    regs[47] = locs["hamming_distance_16(b):7"];
    info.eval->add(regs[46], regs[47], regs[48]);
    info.eval->multiply(regs[46], regs[47], regs[49]);
    info.eval->relinearize_inplace(regs[49], rk);
    info.eval->multiply(locs["2"], regs[49], regs[50]);
    info.eval->relinearize_inplace(regs[50], rk);
    info.eval->sub(regs[48], regs[50], regs[51]);
    info.eval->add(regs[45], regs[51], regs[52]);
    info.eval->add(regs[39], regs[52], regs[53]);
    info.eval->add(regs[26], regs[53], regs[54]);
    regs[55] = locs["hamming_distance_16(a):8"];
    regs[56] = locs["hamming_distance_16(b):8"];
    info.eval->add(regs[55], regs[56], regs[57]);
    info.eval->multiply(regs[55], regs[56], regs[58]);
    info.eval->relinearize_inplace(regs[58], rk);
    info.eval->multiply(locs["2"], regs[58], regs[59]);
    info.eval->relinearize_inplace(regs[59], rk);
    info.eval->sub(regs[57], regs[59], regs[60]);
    regs[61] = locs["hamming_distance_16(a):9"];
    regs[62] = locs["hamming_distance_16(b):9"];
    info.eval->add(regs[61], regs[62], regs[63]);
    info.eval->multiply(regs[61], regs[62], regs[64]);
    info.eval->relinearize_inplace(regs[64], rk);
    info.eval->multiply(locs["2"], regs[64], regs[65]);
    info.eval->relinearize_inplace(regs[65], rk);
    info.eval->sub(regs[63], regs[65], regs[66]);
    info.eval->add(regs[60], regs[66], regs[67]);
    regs[68] = locs["hamming_distance_16(a):10"];
    regs[69] = locs["hamming_distance_16(b):10"];
    info.eval->add(regs[68], regs[69], regs[70]);
    info.eval->multiply(regs[68], regs[69], regs[71]);
    info.eval->relinearize_inplace(regs[71], rk);
    info.eval->multiply(locs["2"], regs[71], regs[72]);
    info.eval->relinearize_inplace(regs[72], rk);
    info.eval->sub(regs[70], regs[72], regs[73]);
    regs[74] = locs["hamming_distance_16(a):11"];
    regs[75] = locs["hamming_distance_16(b):11"];
    info.eval->add(regs[74], regs[75], regs[76]);
    info.eval->multiply(regs[74], regs[75], regs[77]);
    info.eval->relinearize_inplace(regs[77], rk);
    info.eval->multiply(locs["2"], regs[77], regs[78]);
    info.eval->relinearize_inplace(regs[78], rk);
    info.eval->sub(regs[76], regs[78], regs[79]);
    info.eval->add(regs[73], regs[79], regs[80]);
    info.eval->add(regs[67], regs[80], regs[81]);
    regs[82] = locs["hamming_distance_16(a):12"];
    regs[83] = locs["hamming_distance_16(b):12"];
    info.eval->add(regs[82], regs[83], regs[84]);
    info.eval->multiply(regs[82], regs[83], regs[85]);
    info.eval->relinearize_inplace(regs[85], rk);
    info.eval->multiply(locs["2"], regs[85], regs[86]);
    info.eval->relinearize_inplace(regs[86], rk);
    info.eval->sub(regs[84], regs[86], regs[87]);
    regs[88] = locs["hamming_distance_16(a):13"];
    regs[89] = locs["hamming_distance_16(b):13"];
    info.eval->add(regs[88], regs[89], regs[90]);
    info.eval->multiply(regs[88], regs[89], regs[91]);
    info.eval->relinearize_inplace(regs[91], rk);
    info.eval->multiply(locs["2"], regs[91], regs[92]);
    info.eval->relinearize_inplace(regs[92], rk);
    info.eval->sub(regs[90], regs[92], regs[93]);
    info.eval->add(regs[87], regs[93], regs[94]);
    regs[95] = locs["hamming_distance_16(a):14"];
    regs[96] = locs["hamming_distance_16(b):14"];
    info.eval->add(regs[95], regs[96], regs[97]);
    info.eval->multiply(regs[95], regs[96], regs[98]);
    info.eval->relinearize_inplace(regs[98], rk);
    info.eval->multiply(locs["2"], regs[98], regs[99]);
    info.eval->relinearize_inplace(regs[99], rk);
    info.eval->sub(regs[97], regs[99], regs[100]);
    regs[101] = locs["hamming_distance_16(a):15"];
    regs[102] = locs["hamming_distance_16(b):15"];
    info.eval->add(regs[101], regs[102], regs[103]);
    info.eval->multiply(regs[101], regs[102], regs[104]);
    info.eval->relinearize_inplace(regs[104], rk);
    info.eval->multiply(locs["2"], regs[104], regs[105]);
    info.eval->relinearize_inplace(regs[105], rk);
    info.eval->sub(regs[103], regs[105], regs[106]);
    info.eval->add(regs[100], regs[106], regs[107]);
    info.eval->add(regs[94], regs[107], regs[108]);
    info.eval->add(regs[81], regs[108], regs[109]);
    info.eval->add(regs[54], regs[109], regs[110]);
    std::vector<ctxt> answer;
    answer.push_back(regs[110]);
    return answer;
}
    