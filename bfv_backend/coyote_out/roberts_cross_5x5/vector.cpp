
# include <vector.hpp>

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "00000000000000000000000000000000000100000001000000", info);
    add_bitstring(bits, "00000000000000001000000000000000000000000000000000", info);
    add_bitstring(bits, "10000000000110000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000010000000000000000000000000000000", info);
    add_bitstring(bits, "00100000000000000000000100000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000100000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000100000010000000000000000110000000", info);
    add_bitstring(bits, "10000000100000100000000000000001000000000000000000", info);
    add_bitstring(bits, "00000000100000000000000000000000100000000001000000", info);
    add_bitstring(bits, "00000001000000000000000000000000010000000000000000", info);
    add_bitstring(bits, "00010001000000000000000000000000000000000000000100", info);
    add_bitstring(bits, "00000000000000000000000000100000000000000000000000", info);
    add_bitstring(bits, "00100000000000000000000001010000000000100000000000", info);
    add_bitstring(bits, "00000000000000010000000000000100000000000000000000", info);
    add_bitstring(bits, "00000000000000011000010001000000000000000000000000", info);
    add_bitstring(bits, "10000000000000000000000000010000000000000000000000", info);
    add_bitstring(bits, "00000000001001010000000000000000000010000000000000", info);
    add_bitstring(bits, "00000100000000000000000010000000000000001000000010", info);
    add_bitstring(bits, "00000000000000000000010000000001000000000000010000", info);
    add_bitstring(bits, "00000000000000000000000000000100000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000100000000000000010000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000010001000", info);
    add_bitstring(bits, "00000000000000000000010000000000000000000000000011", info);
    add_bitstring(bits, "00000000010000000000000000010000000000000000000000", info);
    add_bitstring(bits, "00000001000100100000000000000000000000000100000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000001000000000000", info);
    add_bitstring(bits, "10000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000010000100000", info);
    add_bitstring(bits, "01000000000001000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000001000001000000000000000000000", info);
    add_bitstring(bits, "00001000101000100000100100000000010001000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000001000000", info);
    add_bitstring(bits, "00000000000000010000000000000000000000001000000000", info);
    add_bitstring(bits, "00001000000000000010000000000000000000000000000000", info);
    add_bitstring(bits, "00010000000000000000000000000000000010010000000000", info);
    add_bitstring(bits, "00000000000000000010000000000000000000000100000000", info);
    add_bitstring(bits, "00000000000001000000000000000001000000000000000000", info);
    add_bitstring(bits, "00000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00100000000000000000010000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000001000000000000110000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000010000100000000000000", info);
    add_bitstring(bits, "01000001010000000000000000001000100000000000000000", info);
    add_bitstring(bits, "00000000001000000000000000010000000000000000000000", info);
    add_bitstring(bits, "00010000000000000000000000000000000000100000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000010", info);
    add_bitstring(bits, "00010000000000000000000000000000000000000001000000", info);
    add_bitstring(bits, "00000000000000000001000000000000000000000000000000", info);
    add_bitstring(bits, "00000010000000001001001000000000001100000000010100", info);
    add_bitstring(bits, "01000000000110000000000001000000000000000000000000", info);
    add_bitstring(bits, "00000000000000100000000000000001000000000000000000", info);
    add_bitstring(bits, "00000000000010000000000000000010000000001000000000", info);
    add_bitstring(bits, "00000000000000000000010000000000000000010010000000", info);
    add_bitstring(bits, "00000000100001000100000001000000000000000000000000", info);
    add_bitstring(bits, "00000000000100000000000000000000000000000100000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000100", info);
    add_bitstring(bits, "00000100000100000000000000100001000000000001001000", info);
    add_bitstring(bits, "00000000000000000000000000110000000000000000000000", info);
    add_bitstring(bits, "00000000000000010000000000000000010001000000000000", info);
    add_bitstring(bits, "00000000100000000000000000000100010000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000010000000", info);
    add_bitstring(bits, "00001010000000000100000000100000000000000000000000", info);
    add_bitstring(bits, "00000000010000000100000000101000001000000010000000", info);
    add_bitstring(bits, "00000001000000000000000000000000000000010000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000100000", info);
    add_bitstring(bits, "00000000000000000000100000000000100001100000100000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(9);
    ts[0] = encrypt_inputinfo);
    ts[1] = encrypt_input("00000000000000000000000000000000000000000000000000", info);
    ts[2] = encrypt_input("00000000000000000000000000000000000000000000000000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[5];
    ctxt ss[43];

    vs[0] = ts[0];
    info.eval->rotate_rows(vs[0], -1, gk, ss[0]); // __s0 = __v0 >> 1
    info.eval->rotate_rows(vs[0], -3, gk, ss[1]); // __s1 = __v0 >> 3
    info.eval->rotate_rows(vs[0], -21, gk, ss[2]); // __s2 = __v0 >> 21
    info.eval->rotate_rows(vs[0], -41, gk, ss[3]); // __s3 = __v0 >> 41
    info.eval->rotate_rows(vs[0], -48, gk, ss[4]); // __s4 = __v0 >> 48
    info.eval->rotate_rows(vs[0], -47, gk, ss[5]); // __s5 = __v0 >> 47
    info.eval->rotate_rows(vs[0], -5, gk, ss[6]); // __s6 = __v0 >> 5
    info.eval->rotate_rows(vs[0], -46, gk, ss[7]); // __s7 = __v0 >> 46
    info.eval->rotate_rows(vs[0], -40, gk, ss[8]); // __s8 = __v0 >> 40
    info.eval->rotate_rows(vs[0], -42, gk, ss[9]); // __s9 = __v0 >> 42
    info.eval->rotate_rows(vs[0], -49, gk, ss[10]); // __s10 = __v0 >> 49
    info.eval->rotate_rows(vs[0], -34, gk, ss[11]); // __s11 = __v0 >> 34
    info.eval->rotate_rows(vs[0], -32, gk, ss[12]); // __s12 = __v0 >> 32
    info.eval->rotate_rows(vs[0], -33, gk, ss[13]); // __s13 = __v0 >> 33
    info.eval->rotate_rows(vs[0], -23, gk, ss[14]); // __s14 = __v0 >> 23
    info.eval->rotate_rows(vs[0], -2, gk, ss[15]); // __s15 = __v0 >> 2
    info.eval->rotate_rows(vs[0], -14, gk, ss[16]); // __s16 = __v0 >> 14
    info.eval->rotate_rows(vs[0], -22, gk, ss[17]); // __s17 = __v0 >> 22
    info.eval->rotate_rows(vs[0], -7, gk, ss[18]); // __s18 = __v0 >> 7
    
    // __t3 = blend(__s12@10000000100000100000000000000001000000000000000000, __s11@01000000000110000000000001000000000000000000000000, __s17@00100000000000000000010000000000000000000000000000, __s8@00001010000000000100000000100000000000000000000000, __s1@00000100000000000000000010000000000000001000000010, __s9@00000001000000000000000000000000010000000000000000, __s5@00000000010000000000000000010000000000000000000000, __s4@00000000001001010000000000000000000010000000000000, __s13@00000000000000001000000000000110000000000000000000, __s6@00000000000000000010000000000000000000000100000000, __s14@00000000000000000001000000000000000000000000000000, __s10@00000000000000000000100000000000100001100000100000, __s3@00000000000000000000001000001000000000000000000000, __s2@00000000000000000000000100000000000000010000000000, __s7@00000000000000000000000000000000000100000001000000, __s16@00000000000000000000000000000000000000000010001000, __t1@00010000000000000000000000000000001000000000010101)
    {
    ctxt t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11, t3_12, t3_13, t3_14, t3_15, t3_16;
    info.eval->multiply_plain(ss[12], bits["10000000100000100000000000000001000000000000000000"], t3_1);
    info.eval->multiply_plain(ss[11], bits["01000000000110000000000001000000000000000000000000"], t3_2);
    info.eval->multiply_plain(ss[17], bits["00100000000000000000010000000000000000000000000000"], t3_3);
    info.eval->multiply_plain(ss[8], bits["00001010000000000100000000100000000000000000000000"], t3_4);
    info.eval->multiply_plain(ss[1], bits["00000100000000000000000010000000000000001000000010"], t3_5);
    info.eval->multiply_plain(ss[9], bits["00000001000000000000000000000000010000000000000000"], t3_6);
    info.eval->multiply_plain(ss[5], bits["00000000010000000000000000010000000000000000000000"], t3_7);
    info.eval->multiply_plain(ss[4], bits["00000000001001010000000000000000000010000000000000"], t3_8);
    info.eval->multiply_plain(ss[13], bits["00000000000000001000000000000110000000000000000000"], t3_9);
    info.eval->multiply_plain(ss[6], bits["00000000000000000010000000000000000000000100000000"], t3_10);
    info.eval->multiply_plain(ss[14], bits["00000000000000000001000000000000000000000000000000"], t3_11);
    info.eval->multiply_plain(ss[10], bits["00000000000000000000100000000000100001100000100000"], t3_12);
    info.eval->multiply_plain(ss[3], bits["00000000000000000000001000001000000000000000000000"], t3_13);
    info.eval->multiply_plain(ss[2], bits["00000000000000000000000100000000000000010000000000"], t3_14);
    info.eval->multiply_plain(ss[7], bits["00000000000000000000000000000000000100000001000000"], t3_15);
    info.eval->multiply_plain(ss[16], bits["00000000000000000000000000000000000000000010001000"], t3_16);
    info.eval->add_many({t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11, t3_12, t3_13, t3_14, t3_15, t3_16, ts[1]}, ts[3]);
    }
    
    
    // __t4 = blend(__s14@10000000000110000000000000000000000000000000000000, __s13@01000000000001000000000000000000000000000000000000, __s11@00100000000000000000000100000000000000000000000000, __s0@00010000000000000000000000000000000000100000000000, __s17@00001000000000000010000000000000000000000000000000, __s18@00000010000000000000000000000000000000000000000000, __s8@00000001000000000000000000000000000000010000000000, __s3@00000000100000000000000000000000100000000001000000, __s7@00000000010000000100000000101000001000000010000000, __s12@00000000001000000000000000010000000000000000000000, __s10@00000000000000010000000000000000000000001000000000, __s6@00000000000000000001000000000000000000000000000000, __v0@00000000000000000000010000000001000000000000010000, __s9@00000000000000000000000000000100000000000000000000, __s15@00000000000000000000000000000010000100000000000000, __s16@00000000000000000000000000000000000000000000000100, __s2@00000000000000000000000000000000000000000000000010, __t2@00000100000000101000101011000000010011000100101001)
    {
    ctxt t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10, t4_11, t4_12, t4_13, t4_14, t4_15, t4_16, t4_17;
    info.eval->multiply_plain(ss[14], bits["10000000000110000000000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[13], bits["01000000000001000000000000000000000000000000000000"], t4_2);
    info.eval->multiply_plain(ss[11], bits["00100000000000000000000100000000000000000000000000"], t4_3);
    info.eval->multiply_plain(ss[0], bits["00010000000000000000000000000000000000100000000000"], t4_4);
    info.eval->multiply_plain(ss[17], bits["00001000000000000010000000000000000000000000000000"], t4_5);
    info.eval->multiply_plain(ss[18], bits["00000010000000000000000000000000000000000000000000"], t4_6);
    info.eval->multiply_plain(ss[8], bits["00000001000000000000000000000000000000010000000000"], t4_7);
    info.eval->multiply_plain(ss[3], bits["00000000100000000000000000000000100000000001000000"], t4_8);
    info.eval->multiply_plain(ss[7], bits["00000000010000000100000000101000001000000010000000"], t4_9);
    info.eval->multiply_plain(ss[12], bits["00000000001000000000000000010000000000000000000000"], t4_10);
    info.eval->multiply_plain(ss[10], bits["00000000000000010000000000000000000000001000000000"], t4_11);
    info.eval->multiply_plain(ss[6], bits["00000000000000000001000000000000000000000000000000"], t4_12);
    info.eval->multiply_plain(vs[0], bits["00000000000000000000010000000001000000000000010000"], t4_13);
    info.eval->multiply_plain(ss[9], bits["00000000000000000000000000000100000000000000000000"], t4_14);
    info.eval->multiply_plain(ss[15], bits["00000000000000000000000000000010000100000000000000"], t4_15);
    info.eval->multiply_plain(ss[16], bits["00000000000000000000000000000000000000000000000100"], t4_16);
    info.eval->multiply_plain(ss[2], bits["00000000000000000000000000000000000000000000000010"], t4_17);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10, t4_11, t4_12, t4_13, t4_14, t4_15, t4_16, t4_17, ts[2]}, ts[4]);
    }
    
    info.eval->add(ts[3], ts[4], vs[1]); // __v1 = __t3 + __t4
    info.eval->rotate_rows(vs[1], -4, gk, ss[19]); // __s19 = __v1 >> 4
    info.eval->rotate_rows(vs[1], -24, gk, ss[20]); // __s20 = __v1 >> 24
    info.eval->rotate_rows(vs[1], -10, gk, ss[21]); // __s21 = __v1 >> 10
    info.eval->rotate_rows(vs[1], -14, gk, ss[22]); // __s22 = __v1 >> 14
    info.eval->rotate_rows(vs[1], -48, gk, ss[23]); // __s23 = __v1 >> 48
    info.eval->rotate_rows(vs[1], -44, gk, ss[24]); // __s24 = __v1 >> 44
    info.eval->rotate_rows(vs[1], -2, gk, ss[25]); // __s25 = __v1 >> 2
    info.eval->rotate_rows(vs[1], -34, gk, ss[26]); // __s26 = __v1 >> 34
    info.eval->rotate_rows(vs[1], -38, gk, ss[27]); // __s27 = __v1 >> 38
    info.eval->multiply(vs[1], vs[1], vs[2]); // __v2 = __v1 * __v1
    info.eval->relinearize_inplace(vs[2], rk);
    info.eval->rotate_rows(vs[2], -38, gk, ss[28]); // __s28 = __v2 >> 38
    info.eval->rotate_rows(vs[2], -4, gk, ss[29]); // __s29 = __v2 >> 4
    info.eval->rotate_rows(vs[2], -34, gk, ss[30]); // __s30 = __v2 >> 34
    
    // __t5 = blend(__s26@01000001010000000000000000001000100000000000000000, __s20@00100000000000000000000001010000000000100000000000, __s24@00010000000000000000000000000000000010010000000000, __s19@00001000101000100000100100000000010001000000000000, __v1@00000100000100000000000000100001000000000001001000, __s23@00000010000000001001001000000000001100000000010100, __s21@00000000000010000000000000000010000000001000000000, __s27@00000000000000010000000000000100000000000000000000, __s25@00000000000000000100000010000000000000000110000000, __s22@00000000000000000000010000000000000000000000000011)
    {
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9, t5_10;
    info.eval->multiply_plain(ss[26], bits["01000001010000000000000000001000100000000000000000"], t5_1);
    info.eval->multiply_plain(ss[20], bits["00100000000000000000000001010000000000100000000000"], t5_2);
    info.eval->multiply_plain(ss[24], bits["00010000000000000000000000000000000010010000000000"], t5_3);
    info.eval->multiply_plain(ss[19], bits["00001000101000100000100100000000010001000000000000"], t5_4);
    info.eval->multiply_plain(vs[1], bits["00000100000100000000000000100001000000000001001000"], t5_5);
    info.eval->multiply_plain(ss[23], bits["00000010000000001001001000000000001100000000010100"], t5_6);
    info.eval->multiply_plain(ss[21], bits["00000000000010000000000000000010000000001000000000"], t5_7);
    info.eval->multiply_plain(ss[27], bits["00000000000000010000000000000100000000000000000000"], t5_8);
    info.eval->multiply_plain(ss[25], bits["00000000000000000100000010000000000000000110000000"], t5_9);
    info.eval->multiply_plain(ss[22], bits["00000000000000000000010000000000000000000000000011"], t5_10);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9, t5_10}, ts[5]);
    }
    
    
    // __t6 = blend(__s26@01000001010000000000000000001000100000000000000000, __s20@00100000000000000000000001010000000000100000000000, __s24@00010000000000000000000000000000000010010000000000, __s19@00001000101000100000100100000000010001000000000000, __v1@00000100000100000000000000100001000000000001001000, __s23@00000010000000001001001000000000001100000000010100, __s21@00000000000010000000000000000010000000001000000000, __s27@00000000000000010000000000000100000000000000000000, __s25@00000000000000000100000010000000000000000110000000, __s22@00000000000000000000010000000000000000000000000011)
    {
    ctxt t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7, t6_8, t6_9, t6_10;
    info.eval->multiply_plain(ss[26], bits["01000001010000000000000000001000100000000000000000"], t6_1);
    info.eval->multiply_plain(ss[20], bits["00100000000000000000000001010000000000100000000000"], t6_2);
    info.eval->multiply_plain(ss[24], bits["00010000000000000000000000000000000010010000000000"], t6_3);
    info.eval->multiply_plain(ss[19], bits["00001000101000100000100100000000010001000000000000"], t6_4);
    info.eval->multiply_plain(vs[1], bits["00000100000100000000000000100001000000000001001000"], t6_5);
    info.eval->multiply_plain(ss[23], bits["00000010000000001001001000000000001100000000010100"], t6_6);
    info.eval->multiply_plain(ss[21], bits["00000000000010000000000000000010000000001000000000"], t6_7);
    info.eval->multiply_plain(ss[27], bits["00000000000000010000000000000100000000000000000000"], t6_8);
    info.eval->multiply_plain(ss[25], bits["00000000000000000100000010000000000000000110000000"], t6_9);
    info.eval->multiply_plain(ss[22], bits["00000000000000000000010000000000000000000000000011"], t6_10);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7, t6_8, t6_9, t6_10}, ts[6]);
    }
    
    info.eval->multiply(ts[5], ts[6], vs[3]); // __v3 = __t5 * __t6
    info.eval->relinearize_inplace(vs[3], rk);
    info.eval->rotate_rows(vs[3], -43, gk, ss[31]); // __s31 = __v3 >> 43
    info.eval->rotate_rows(vs[3], -9, gk, ss[32]); // __s32 = __v3 >> 9
    info.eval->rotate_rows(vs[3], -22, gk, ss[33]); // __s33 = __v3 >> 22
    info.eval->rotate_rows(vs[3], -47, gk, ss[34]); // __s34 = __v3 >> 47
    info.eval->rotate_rows(vs[3], -5, gk, ss[35]); // __s35 = __v3 >> 5
    info.eval->rotate_rows(vs[3], -38, gk, ss[36]); // __s36 = __v3 >> 38
    info.eval->rotate_rows(vs[3], -4, gk, ss[37]); // __s37 = __v3 >> 4
    info.eval->rotate_rows(vs[3], -42, gk, ss[38]); // __s38 = __v3 >> 42
    info.eval->rotate_rows(vs[3], -18, gk, ss[39]); // __s39 = __v3 >> 18
    info.eval->rotate_rows(vs[3], -2, gk, ss[40]); // __s40 = __v3 >> 2
    info.eval->rotate_rows(vs[3], -13, gk, ss[41]); // __s41 = __v3 >> 13
    info.eval->rotate_rows(vs[3], -27, gk, ss[42]); // __s42 = __v3 >> 27
    
    // __t7 = blend(__s28@10000000000000000000000000000000000000000000000000, __s34@00010000000000000000000000000000000000000001000000, __s38@00000001000100100000000000000000000000000100000000, __v3@00000000100000000000000000000100010000000000000000, __s36@00000000000001000000000000000001000000000000000000, __s35@00000000000000011000010001000000000000000000000000, __s29@00000000000000000100000000000000000000000000000000, __s37@00000000000000000010000000000000000000000000000000, __s33@00000000000000000000000000110000000000000000000000, __s32@00000000000000000000000000000000000001000000000000, __s40@00000000000000000000000000000000000000010000100000, __s39@00000000000000000000000000000000000000000010000000, __s41@00000000000000000000000000000000000000000000000100)
    {
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10, t7_11, t7_12, t7_13;
    info.eval->multiply_plain(ss[28], bits["10000000000000000000000000000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[34], bits["00010000000000000000000000000000000000000001000000"], t7_2);
    info.eval->multiply_plain(ss[38], bits["00000001000100100000000000000000000000000100000000"], t7_3);
    info.eval->multiply_plain(vs[3], bits["00000000100000000000000000000100010000000000000000"], t7_4);
    info.eval->multiply_plain(ss[36], bits["00000000000001000000000000000001000000000000000000"], t7_5);
    info.eval->multiply_plain(ss[35], bits["00000000000000011000010001000000000000000000000000"], t7_6);
    info.eval->multiply_plain(ss[29], bits["00000000000000000100000000000000000000000000000000"], t7_7);
    info.eval->multiply_plain(ss[37], bits["00000000000000000010000000000000000000000000000000"], t7_8);
    info.eval->multiply_plain(ss[33], bits["00000000000000000000000000110000000000000000000000"], t7_9);
    info.eval->multiply_plain(ss[32], bits["00000000000000000000000000000000000001000000000000"], t7_10);
    info.eval->multiply_plain(ss[40], bits["00000000000000000000000000000000000000010000100000"], t7_11);
    info.eval->multiply_plain(ss[39], bits["00000000000000000000000000000000000000000010000000"], t7_12);
    info.eval->multiply_plain(ss[41], bits["00000000000000000000000000000000000000000000000100"], t7_13);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10, t7_11, t7_12, t7_13}, ts[7]);
    }
    
    
    // __t8 = blend(__s36@10000000000000000000000000010000000000000000000000, __v3@00010001000000000000000000000000000000000000000100, __s42@00000000100001000100000001000000000000000000000000, __s32@00000000000100000000000000000000000000000100000000, __s35@00000000000000100000000000000001000000000000000000, __s38@00000000000000010000000000000000010001000000000000, __s30@00000000000000001000000000000000000000000000000000, __s34@00000000000000000010000000000000000000000000000000, __s37@00000000000000000000010000000000000000010010000000, __s28@00000000000000000000000000100000000000000000000000, __s40@00000000000000000000000000000100000000000000000000, __s41@00000000000000000000000000000000000000000001000000, __s31@00000000000000000000000000000000000000000000100000)
    {
    ctxt t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9, t8_10, t8_11, t8_12, t8_13;
    info.eval->multiply_plain(ss[36], bits["10000000000000000000000000010000000000000000000000"], t8_1);
    info.eval->multiply_plain(vs[3], bits["00010001000000000000000000000000000000000000000100"], t8_2);
    info.eval->multiply_plain(ss[42], bits["00000000100001000100000001000000000000000000000000"], t8_3);
    info.eval->multiply_plain(ss[32], bits["00000000000100000000000000000000000000000100000000"], t8_4);
    info.eval->multiply_plain(ss[35], bits["00000000000000100000000000000001000000000000000000"], t8_5);
    info.eval->multiply_plain(ss[38], bits["00000000000000010000000000000000010001000000000000"], t8_6);
    info.eval->multiply_plain(ss[30], bits["00000000000000001000000000000000000000000000000000"], t8_7);
    info.eval->multiply_plain(ss[34], bits["00000000000000000010000000000000000000000000000000"], t8_8);
    info.eval->multiply_plain(ss[37], bits["00000000000000000000010000000000000000010010000000"], t8_9);
    info.eval->multiply_plain(ss[28], bits["00000000000000000000000000100000000000000000000000"], t8_10);
    info.eval->multiply_plain(ss[40], bits["00000000000000000000000000000100000000000000000000"], t8_11);
    info.eval->multiply_plain(ss[41], bits["00000000000000000000000000000000000000000001000000"], t8_12);
    info.eval->multiply_plain(ss[31], bits["00000000000000000000000000000000000000000000100000"], t8_13);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9, t8_10, t8_11, t8_12, t8_13}, ts[8]);
    }
    
    info.eval->add(ts[7], ts[8], vs[4]); // __v4 = __t7 + __t8
    return vs[4];
}
    