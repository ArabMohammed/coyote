
# include <vector.hpp>

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "0000000000000000000000000000000001000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000100000000000000100000000", info);
    add_bitstring(bits, "0000100000000000000000100000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000010000000000000", info);
    add_bitstring(bits, "0000001000000000001000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000001001001000000100000000", info);
    add_bitstring(bits, "0000000000000010000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "0001000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "0001000000000000001000000000001000000000100000000", info);
    add_bitstring(bits, "0000000000001010000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000100000000000000001000000000000100000000", info);
    add_bitstring(bits, "0001000000000000010000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000100000010000000000000000000000000", info);
    add_bitstring(bits, "0000000000000001000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000001000000000000100000000000000000000000", info);
    add_bitstring(bits, "0001000000000011000000000000000000000000000000000", info);
    add_bitstring(bits, "0001000000100000101000010000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000010000000000000000000000000", info);
    add_bitstring(bits, "0000000000100000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000010000100000000", info);
    add_bitstring(bits, "0000000000000000000000100000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000001000000000", info);
    add_bitstring(bits, "0000000000000000001000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000001000000000000100001000000000000000000", info);
    add_bitstring(bits, "0000000000001000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000010000010000000000000000", info);
    add_bitstring(bits, "0000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000100000000000001000000000000000000", info);
    add_bitstring(bits, "0000001000000000010000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000100000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000100000000000", info);
    add_bitstring(bits, "0000000000000000000000000000010000000000000000000", info);
    add_bitstring(bits, "0000000000000010000000100000000000000000100000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(14);
    ts[0] = encrypt_inputinfo);
    ts[1] = encrypt_input("0000000000000000000000000000000000000000000000000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[13];
    ctxt ss[17];

    vs[0] = ts[0];
    info.eval->rotate_rows(vs[0], -3, gk, ss[0]); // __s0 = __v0 >> 3
    info.eval->rotate_rows(vs[0], -13, gk, ss[1]); // __s1 = __v0 >> 13
    info.eval->rotate_rows(vs[0], -48, gk, ss[2]); // __s2 = __v0 >> 48
    info.eval->rotate_rows(vs[0], -9, gk, ss[3]); // __s3 = __v0 >> 9
    info.eval->rotate_rows(vs[0], -18, gk, ss[4]); // __s4 = __v0 >> 18
    info.eval->rotate_rows(vs[0], -34, gk, ss[5]); // __s5 = __v0 >> 34
    info.eval->rotate_rows(vs[0], -27, gk, ss[6]); // __s6 = __v0 >> 27
    info.eval->rotate_rows(vs[0], -20, gk, ss[7]); // __s7 = __v0 >> 20
    
    // __t2 = blend(__s2@0001000000000000000000000000000000000000000000000, __s7@0000000000100000000000000000000000000000000000000, __v0@0000000000000000100000010000000000000000000000000, __s0@0000000000000000001000000000000000000000000000000, __s4@0000000000000000000000000010000010000000000000000, __s5@0000000000000000000000000000010000000000000000000, __s3@0000000000000000000000000000000000000001000000000)
    {
    ctxt t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    info.eval->multiply_plain(ss[2], bits["0001000000000000000000000000000000000000000000000"], t2_1);
    info.eval->multiply_plain(ss[7], bits["0000000000100000000000000000000000000000000000000"], t2_2);
    info.eval->multiply_plain(vs[0], bits["0000000000000000100000010000000000000000000000000"], t2_3);
    info.eval->multiply_plain(ss[0], bits["0000000000000000001000000000000000000000000000000"], t2_4);
    info.eval->multiply_plain(ss[4], bits["0000000000000000000000000010000010000000000000000"], t2_5);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000000010000000000000000000"], t2_6);
    info.eval->multiply_plain(ss[3], bits["0000000000000000000000000000000000000001000000000"], t2_7);
    info.eval->add_many({t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7}, ts[2]);
    }
    
    info.eval->add(ts[1], ts[2], vs[1]); // __v1 = __t1 + __t2
    info.eval->rotate_rows(vs[1], -1, gk, ss[8]); // __s8 = __v1 >> 1
    
    // __t3 = blend(__v1@0001000000100000101000010000000000000000000000000, __s8@0000000000000000000000000001001001000000100000000)
    {
    ctxt t3_1, t3_2;
    info.eval->multiply_plain(vs[1], bits["0001000000100000101000010000000000000000000000000"], t3_1);
    info.eval->multiply_plain(ss[8], bits["0000000000000000000000000001001001000000100000000"], t3_2);
    info.eval->add(t3_1, t3_2, ts[3]);
    }
    
    
    // __t4 = blend(__s0@0001000000000000000000000000000000000000000000000, __s4@0000000000100000000000000001000000000000100000000, __s1@0000000000000000100000000000001000000000000000000, __s7@0000000000000000001000000000000000000000000000000, __s5@0000000000000000000000010000000000000000000000000, __s2@0000000000000000000000000000000001000000000000000)
    {
    ctxt t4_1, t4_2, t4_3, t4_4, t4_5, t4_6;
    info.eval->multiply_plain(ss[0], bits["0001000000000000000000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[4], bits["0000000000100000000000000001000000000000100000000"], t4_2);
    info.eval->multiply_plain(ss[1], bits["0000000000000000100000000000001000000000000000000"], t4_3);
    info.eval->multiply_plain(ss[7], bits["0000000000000000001000000000000000000000000000000"], t4_4);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000010000000000000000000000000"], t4_5);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000000000001000000000000000"], t4_6);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4, t4_5, t4_6}, ts[4]);
    }
    
    info.eval->add(ts[3], ts[4], vs[2]); // __v2 = __t3 + __t4
    info.eval->rotate_rows(vs[2], -2, gk, ss[9]); // __s9 = __v2 >> 2
    info.eval->rotate_rows(vs[2], -39, gk, ss[10]); // __s10 = __v2 >> 39
    info.eval->add(vs[2], ss[1], vs[3]); // __v3 = __v2 + __s1
    info.eval->add(vs[3], ss[5], vs[4]); // __v4 = __v3 + __s5
    info.eval->rotate_rows(vs[4], -2, gk, ss[11]); // __s11 = __v4 >> 2
    
    // __t5 = blend(__v2@0001000000000000001000000000001000000000100000000, __s10@0000001000000000010000000000000000000000000000000, __s9@0000000000001000000000000100000000000000000000000, __s11@0000000000000000000000000000000000010000000000000)
    {
    ctxt t5_1, t5_2, t5_3, t5_4;
    info.eval->multiply_plain(vs[2], bits["0001000000000000001000000000001000000000100000000"], t5_1);
    info.eval->multiply_plain(ss[10], bits["0000001000000000010000000000000000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[9], bits["0000000000001000000000000100000000000000000000000"], t5_3);
    info.eval->multiply_plain(ss[11], bits["0000000000000000000000000000000000010000000000000"], t5_4);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4}, ts[5]);
    }
    
    
    // __t6 = blend(__s7@0001000000000000010000000000000000000000000000000, __s5@0000001000000000001000000000000000000000000000000, __s4@0000000000001000000000000100001000000000000000000, __v0@0000000000000000000000000000000000010000100000000)
    {
    ctxt t6_1, t6_2, t6_3, t6_4;
    info.eval->multiply_plain(ss[7], bits["0001000000000000010000000000000000000000000000000"], t6_1);
    info.eval->multiply_plain(ss[5], bits["0000001000000000001000000000000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[4], bits["0000000000001000000000000100001000000000000000000"], t6_3);
    info.eval->multiply_plain(vs[0], bits["0000000000000000000000000000000000010000100000000"], t6_4);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4}, ts[6]);
    }
    
    info.eval->add(ts[5], ts[6], vs[5]); // __v5 = __t5 + __t6
    info.eval->rotate_rows(vs[5], -46, gk, ss[12]); // __s12 = __v5 >> 46
    info.eval->rotate_rows(vs[5], -41, gk, ss[13]); // __s13 = __v5 >> 41
    
    // __t7 = blend(__s6@0001000000000000000000000000000000000000000000000, __s2@0000000000000000000000000000000000010000000000000)
    {
    ctxt t7_1, t7_2;
    info.eval->multiply_plain(ss[6], bits["0001000000000000000000000000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000000000000010000000000000"], t7_2);
    info.eval->add(t7_1, t7_2, ts[7]);
    }
    
    info.eval->add(vs[5], ts[7], vs[6]); // __v6 = __v5 + __t7
    
    // __t8 = blend(__s12@0001000000000011000000000000000000000000000000000, __s13@0000100000000000000000100000000000000000000000000, __v5@0000000000000000000000000100000000000000100000000)
    {
    ctxt t8_1, t8_2, t8_3;
    info.eval->multiply_plain(ss[12], bits["0001000000000011000000000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[13], bits["0000100000000000000000100000000000000000000000000"], t8_2);
    info.eval->multiply_plain(vs[5], bits["0000000000000000000000000100000000000000100000000"], t8_3);
    info.eval->add_many({t8_1, t8_2, t8_3}, ts[8]);
    }
    
    
    // __t9 = blend(__s5@0001000000000000000000000000000000000000000000000, __s0@0000100000000000000000000000000000000000000000000, __s3@0000000000000010000000100000000000000000100000000, __s1@0000000000000001000000000000000000000000000000000, __s2@0000000000000000000000000100000000000000000000000)
    {
    ctxt t9_1, t9_2, t9_3, t9_4, t9_5;
    info.eval->multiply_plain(ss[5], bits["0001000000000000000000000000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[0], bits["0000100000000000000000000000000000000000000000000"], t9_2);
    info.eval->multiply_plain(ss[3], bits["0000000000000010000000100000000000000000100000000"], t9_3);
    info.eval->multiply_plain(ss[1], bits["0000000000000001000000000000000000000000000000000"], t9_4);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000100000000000000000000000"], t9_5);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4, t9_5}, ts[9]);
    }
    
    info.eval->add(ts[8], ts[9], vs[7]); // __v7 = __t8 + __t9
    info.eval->rotate_rows(vs[7], -46, gk, ss[14]); // __s14 = __v7 >> 46
    
    // __t10 = blend(__s4@0000000000010000000000000000000000000000000000000, __s1@0000000000000000000100000000000000000000000000000, __s5@0000000000000000000000100000000000000000000000000, __s3@0000000000000000000000000000000000000100000000000)
    {
    ctxt t10_1, t10_2, t10_3, t10_4;
    info.eval->multiply_plain(ss[4], bits["0000000000010000000000000000000000000000000000000"], t10_1);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000100000000000000000000000000000"], t10_2);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000100000000000000000000000000"], t10_3);
    info.eval->multiply_plain(ss[3], bits["0000000000000000000000000000000000000100000000000"], t10_4);
    info.eval->add_many({t10_1, t10_2, t10_3, t10_4}, ts[10]);
    }
    
    info.eval->add(ss[14], ts[10], vs[8]); // __v8 = __s14 + __t10
    info.eval->rotate_rows(vs[8], -1, gk, ss[15]); // __s15 = __v8 >> 1
    
    // __t11 = blend(__s3@0000000000000000000100000000000000000000000000000, __s0@0000000000000000000000100000000000000000000000000)
    {
    ctxt t11_1, t11_2;
    info.eval->multiply_plain(ss[3], bits["0000000000000000000100000000000000000000000000000"], t11_1);
    info.eval->multiply_plain(ss[0], bits["0000000000000000000000100000000000000000000000000"], t11_2);
    info.eval->add(t11_1, t11_2, ts[11]);
    }
    
    info.eval->add(vs[8], ts[11], vs[9]); // __v9 = __v8 + __t11
    info.eval->rotate_rows(vs[9], -44, gk, ss[16]); // __s16 = __v9 >> 44
    
    // __t12 = blend(__s15@0000000000001000000000000000000000000000000000000, __s16@0000000000000010000000000000000000000000000000000, __v8@0000000000000000000000000000000000000100000000000)
    {
    ctxt t12_1, t12_2, t12_3;
    info.eval->multiply_plain(ss[15], bits["0000000000001000000000000000000000000000000000000"], t12_1);
    info.eval->multiply_plain(ss[16], bits["0000000000000010000000000000000000000000000000000"], t12_2);
    info.eval->multiply_plain(vs[8], bits["0000000000000000000000000000000000000100000000000"], t12_3);
    info.eval->add_many({t12_1, t12_2, t12_3}, ts[12]);
    }
    
    
    // __t13 = blend(__s5@0000000000001010000000000000000000000000000000000, __s1@0000000000000000000000000000000000000100000000000)
    {
    ctxt t13_1, t13_2;
    info.eval->multiply_plain(ss[5], bits["0000000000001010000000000000000000000000000000000"], t13_1);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000000000000000000000100000000000"], t13_2);
    info.eval->add(t13_1, t13_2, ts[13]);
    }
    
    info.eval->add(ts[12], ts[13], vs[10]); // __v10 = __t12 + __t13
    info.eval->add(vs[10], ss[0], vs[11]); // __v11 = __v10 + __s0
    info.eval->add(vs[11], ss[4], vs[12]); // __v12 = __v11 + __s4
    return vs[12];
}
    