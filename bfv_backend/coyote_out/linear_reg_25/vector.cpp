
# include <vector.hpp>

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "000000000000000000000001000000000000000001000001000000000000000000000000000", info);
    add_bitstring(bits, "000010000100000000000000010000000000100000000000000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000000000000000010000100000000000000001000101110000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000100010100010100000000000000001000", info);
    add_bitstring(bits, "000000000110000010000000000000000100000000000000000000001000000000000000000", info);
    add_bitstring(bits, "000100000000010000000000000000001000000000001000000001000000010000000100000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000000000100", info);
    add_bitstring(bits, "000000001000000000000001000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000100000000000000000000000000000010000010", info);
    add_bitstring(bits, "000000000000000000000000000100000000001000000000000000000000000000000000000", info);
    add_bitstring(bits, "000100000000000000000001000000000000000100110001000000100000000000000000000", info);
    add_bitstring(bits, "000010000000000000100010000000001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000100000000000000000000000100010000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000010000000010000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000010010000001000000000000000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000000000000000000001000000000000000000000000000000000000100000", info);
    add_bitstring(bits, "000000000100100000100000100000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000100000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000010000000", info);
    add_bitstring(bits, "000000000000000000010011010000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000010000000000000000", info);
    add_bitstring(bits, "000010001000000000000000000010000000000000001000000010000000000010000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000000000000000000000001001000", info);
    add_bitstring(bits, "000000000000000000010000000100000000001000000000000000100000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000101000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000010000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000010000000000000000000000100000010000000000000000100", info);
    add_bitstring(bits, "000000000000000000000000000010000001000001000001000000101000000000000000000", info);
    add_bitstring(bits, "000000000100000000000000010000010000001010000010100000000000000000000000000", info);
    add_bitstring(bits, "000000000000010000000000000000000000000000000000000001000000000000000000010", info);
    add_bitstring(bits, "000000000000000000000000000000000000001000000001000000000000000000001000010", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000100000000000000000000000001000010", info);
    add_bitstring(bits, "000000000000000000000000000000000000000010000000000000000000000010000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000100001000000000000000000000000000000", info);
    add_bitstring(bits, "000100000100000000000000010010000000000000000000000000100000000000000000000", info);
    add_bitstring(bits, "000100000000000000000000000010010000000000010000000000000000000000000000000", info);
    add_bitstring(bits, "000010000010000010000000000000001000100000000000111000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000000101000001000000000001000000", info);
    add_bitstring(bits, "000000000000000000000000100000000000100000000000111000000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(10);
    ts[0] = encrypt_inputinfo);
    ts[1] = encrypt_inputinfo);
    ts[2] = encrypt_inputinfo);
    ts[3] = encrypt_inputinfo);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[7];
    ctxt ss[33];

    vs[0] = ts[0];
    info.eval->rotate_rows(vs[0], -12, gk, ss[0]); // __s0 = __v0 >> 12
    info.eval->rotate_rows(vs[0], -74, gk, ss[1]); // __s1 = __v0 >> 74
    info.eval->rotate_rows(vs[0], -60, gk, ss[2]); // __s2 = __v0 >> 60
    info.eval->rotate_rows(vs[0], -66, gk, ss[3]); // __s3 = __v0 >> 66
    info.eval->rotate_rows(vs[0], -62, gk, ss[4]); // __s4 = __v0 >> 62
    vs[1] = ts[1];
    info.eval->rotate_rows(vs[1], -8, gk, ss[5]); // __s5 = __v1 >> 8
    info.eval->rotate_rows(vs[1], -57, gk, ss[6]); // __s6 = __v1 >> 57
    info.eval->rotate_rows(vs[1], -35, gk, ss[7]); // __s7 = __v1 >> 35
    info.eval->rotate_rows(vs[1], -74, gk, ss[8]); // __s8 = __v1 >> 74
    vs[2] = ts[2];
    info.eval->rotate_rows(vs[2], -6, gk, ss[9]); // __s9 = __v2 >> 6
    info.eval->rotate_rows(vs[2], -70, gk, ss[10]); // __s10 = __v2 >> 70
    info.eval->rotate_rows(vs[2], -67, gk, ss[11]); // __s11 = __v2 >> 67
    info.eval->rotate_rows(vs[2], -65, gk, ss[12]); // __s12 = __v2 >> 65
    vs[3] = ts[3];
    info.eval->rotate_rows(vs[3], -29, gk, ss[13]); // __s13 = __v3 >> 29
    info.eval->rotate_rows(vs[3], -67, gk, ss[14]); // __s14 = __v3 >> 67
    info.eval->rotate_rows(vs[3], -31, gk, ss[15]); // __s15 = __v3 >> 31
    info.eval->rotate_rows(vs[3], -63, gk, ss[16]); // __s16 = __v3 >> 63
    info.eval->rotate_rows(vs[3], -74, gk, ss[17]); // __s17 = __v3 >> 74
    
    // __t4 = blend(__s10@000010000010000010000000000000001000100000000000111000000000000000000000000, __s9@000000000100100000100000100000000000000000000000000000000000000000000000000, __v2@000000000000000000010011010000000100000000000000000000000000000000000000000, __s11@000000000000000000000000000100000000001000000000000000000000000000000000000, __s12@000000000000000000000000000010000001000001000001000000101000000000000000000)
    {
    ctxt t4_1, t4_2, t4_3, t4_4, t4_5;
    info.eval->multiply_plain(ss[10], bits["000010000010000010000000000000001000100000000000111000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[9], bits["000000000100100000100000100000000000000000000000000000000000000000000000000"], t4_2);
    info.eval->multiply_plain(vs[2], bits["000000000000000000010011010000000100000000000000000000000000000000000000000"], t4_3);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000100000000001000000000000000000000000000000000000"], t4_4);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000010000001000001000001000000101000000000000000000"], t4_5);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4, t4_5}, ts[4]);
    }
    
    
    // __t5 = blend(__v0@000010000000000000100010000000001000000000000000000000000000000000000000000, __s2@000000000110000010000000000000000100000000000000000000001000000000000000000, __s0@000000000000100000000000010010000001000000000000000000000000000000000000000, __s1@000000000000000000010000000100000000001000000000000000100000000000000000000, __s4@000000000000000000000001000000000000000001000001000000000000000000000000000, __s3@000000000000000000000000100000000000100000000000111000000000000000000000000)
    {
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5, t5_6;
    info.eval->multiply_plain(vs[0], bits["000010000000000000100010000000001000000000000000000000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[2], bits["000000000110000010000000000000000100000000000000000000001000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[0], bits["000000000000100000000000010010000001000000000000000000000000000000000000000"], t5_3);
    info.eval->multiply_plain(ss[1], bits["000000000000000000010000000100000000001000000000000000100000000000000000000"], t5_4);
    info.eval->multiply_plain(ss[4], bits["000000000000000000000001000000000000000001000001000000000000000000000000000"], t5_5);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000100000000000100000000000111000000000000000000000000"], t5_6);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5, t5_6}, ts[5]);
    }
    
    info.eval->multiply(ts[4], ts[5], vs[4]); // __v4 = __t4 * __t5
    info.eval->relinearize_inplace(vs[4], rk);
    info.eval->rotate_rows(vs[4], -68, gk, ss[18]); // __s18 = __v4 >> 68
    info.eval->rotate_rows(vs[4], -30, gk, ss[19]); // __s19 = __v4 >> 30
    info.eval->rotate_rows(vs[4], -19, gk, ss[20]); // __s20 = __v4 >> 19
    info.eval->rotate_rows(vs[4], -17, gk, ss[21]); // __s21 = __v4 >> 17
    info.eval->rotate_rows(vs[4], -12, gk, ss[22]); // __s22 = __v4 >> 12
    info.eval->rotate_rows(vs[4], -50, gk, ss[23]); // __s23 = __v4 >> 50
    info.eval->rotate_rows(vs[4], -11, gk, ss[24]); // __s24 = __v4 >> 11
    
    // __t6 = blend(__s6@000100000000000000000001000000000000000100110001000000100000000000000000000, __v1@000010001000000000000000000010000000000000001000000010000000000010000000000, __s5@000000000100000000000000010000010000001010000010100000000000000000000000000, __s8@000000000000000000000000000000000000100000000000000000000000000000010000010, __s7@000000000000000000000000000000000000000000000000000000000000000000001001000)
    {
    ctxt t6_1, t6_2, t6_3, t6_4, t6_5;
    info.eval->multiply_plain(ss[6], bits["000100000000000000000001000000000000000100110001000000100000000000000000000"], t6_1);
    info.eval->multiply_plain(vs[1], bits["000010001000000000000000000010000000000000001000000010000000000010000000000"], t6_2);
    info.eval->multiply_plain(ss[5], bits["000000000100000000000000010000010000001010000010100000000000000000000000000"], t6_3);
    info.eval->multiply_plain(ss[8], bits["000000000000000000000000000000000000100000000000000000000000000000010000010"], t6_4);
    info.eval->multiply_plain(ss[7], bits["000000000000000000000000000000000000000000000000000000000000000000001001000"], t6_5);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4, t6_5}, ts[6]);
    }
    
    
    // __t7 = blend(__s18@000100000000000000000000000010010000000000010000000000000000000000000000000, __v4@000010000100000000000000010000000000100000000000000000000000000000000000000, __s23@000000001000000000000001000000000000000000000000000000000000000000000000000, __s20@000000000000000000000000000000000000001000000001000000000000000000001000010, __s22@000000000000000000000000000000000000000100001000000000000000000000000000000, __s21@000000000000000000000000000000000000000010000000000000000000000010000000000, __s19@000000000000000000000000000000000000000000100010100010100000000000000001000, __s24@000000000000000000000000000000000000000000000000000000000000000000010000000)
    {
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8;
    info.eval->multiply_plain(ss[18], bits["000100000000000000000000000010010000000000010000000000000000000000000000000"], t7_1);
    info.eval->multiply_plain(vs[4], bits["000010000100000000000000010000000000100000000000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[23], bits["000000001000000000000001000000000000000000000000000000000000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[20], bits["000000000000000000000000000000000000001000000001000000000000000000001000010"], t7_4);
    info.eval->multiply_plain(ss[22], bits["000000000000000000000000000000000000000100001000000000000000000000000000000"], t7_5);
    info.eval->multiply_plain(ss[21], bits["000000000000000000000000000000000000000010000000000000000000000010000000000"], t7_6);
    info.eval->multiply_plain(ss[19], bits["000000000000000000000000000000000000000000100010100010100000000000000001000"], t7_7);
    info.eval->multiply_plain(ss[24], bits["000000000000000000000000000000000000000000000000000000000000000000010000000"], t7_8);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8}, ts[7]);
    }
    
    info.eval->sub(ts[6], ts[7], vs[5]); // __v5 = __t6 - __t7
    info.eval->rotate_rows(vs[5], -71, gk, ss[25]); // __s25 = __v5 >> 71
    info.eval->rotate_rows(vs[5], -5, gk, ss[26]); // __s26 = __v5 >> 5
    info.eval->rotate_rows(vs[5], -35, gk, ss[27]); // __s27 = __v5 >> 35
    info.eval->rotate_rows(vs[5], -4, gk, ss[28]); // __s28 = __v5 >> 4
    info.eval->rotate_rows(vs[5], -8, gk, ss[29]); // __s29 = __v5 >> 8
    info.eval->rotate_rows(vs[5], -33, gk, ss[30]); // __s30 = __v5 >> 33
    info.eval->rotate_rows(vs[5], -2, gk, ss[31]); // __s31 = __v5 >> 2
    info.eval->rotate_rows(vs[5], -65, gk, ss[32]); // __s32 = __v5 >> 65
    
    // __t8 = blend(__s25@100000000000000000000000000000001000000000000000000000000000000000000100000, __v5@000100000100000000000000010010000000000000000000000000100000000000000000000, __s26@000000000000010000000000000000000000000000000000000001000000000000000000010, __s32@000000000000000000000000000000000100000000000000000000000100010000000000000, __s28@000000000000000000000000000000000001000000000000101000001000000000001000000, __s31@000000000000000000000000000000000000000000101000000000000000000000000000000, __s29@000000000000000000000000000000000000000000000010000000010000000000000000000, __s27@000000000000000000000000000000000000000000000000000000000010000000000000000, __s30@000000000000000000000000000000000000000000000000000000000000000000000000100)
    {
    ctxt t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9;
    info.eval->multiply_plain(ss[25], bits["100000000000000000000000000000001000000000000000000000000000000000000100000"], t8_1);
    info.eval->multiply_plain(vs[5], bits["000100000100000000000000010010000000000000000000000000100000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[26], bits["000000000000010000000000000000000000000000000000000001000000000000000000010"], t8_3);
    info.eval->multiply_plain(ss[32], bits["000000000000000000000000000000000100000000000000000000000100010000000000000"], t8_4);
    info.eval->multiply_plain(ss[28], bits["000000000000000000000000000000000001000000000000101000001000000000001000000"], t8_5);
    info.eval->multiply_plain(ss[31], bits["000000000000000000000000000000000000000000101000000000000000000000000000000"], t8_6);
    info.eval->multiply_plain(ss[29], bits["000000000000000000000000000000000000000000000010000000010000000000000000000"], t8_7);
    info.eval->multiply_plain(ss[27], bits["000000000000000000000000000000000000000000000000000000000010000000000000000"], t8_8);
    info.eval->multiply_plain(ss[30], bits["000000000000000000000000000000000000000000000000000000000000000000000000100"], t8_9);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9}, ts[8]);
    }
    
    
    // __t9 = blend(__s14@100000000000000000000000000010000100000000000000001000101110000000000000000, __v3@000100000000010000000000000000001000000000001000000001000000010000000100000, __s16@000000000100000000000000000000000000000000000000000000000000000000000000000, __s17@000000000000000000000000010000000000000000000000100000010000000000000000100, __s13@000000000000000000000000000000000001000000000010000000000000000000000000000, __s15@000000000000000000000000000000000000000000100000000000000000000000001000010)
    {
    ctxt t9_1, t9_2, t9_3, t9_4, t9_5, t9_6;
    info.eval->multiply_plain(ss[14], bits["100000000000000000000000000010000100000000000000001000101110000000000000000"], t9_1);
    info.eval->multiply_plain(vs[3], bits["000100000000010000000000000000001000000000001000000001000000010000000100000"], t9_2);
    info.eval->multiply_plain(ss[16], bits["000000000100000000000000000000000000000000000000000000000000000000000000000"], t9_3);
    info.eval->multiply_plain(ss[17], bits["000000000000000000000000010000000000000000000000100000010000000000000000100"], t9_4);
    info.eval->multiply_plain(ss[13], bits["000000000000000000000000000000000001000000000010000000000000000000000000000"], t9_5);
    info.eval->multiply_plain(ss[15], bits["000000000000000000000000000000000000000000100000000000000000000000001000010"], t9_6);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4, t9_5, t9_6}, ts[9]);
    }
    
    info.eval->sub(ts[8], ts[9], vs[6]); // __v6 = __t8 - __t9
    return vs[6];
}
    