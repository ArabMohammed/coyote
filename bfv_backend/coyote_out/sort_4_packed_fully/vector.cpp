
# include <vector.hpp>

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "000000000000000000100000000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000100000000000000000000000000000010000", info);
    add_bitstring(bits, "000000011010000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000001000100000000000000000000000100000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000001000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000100000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000010000000000000000", info);
    add_bitstring(bits, "000000000000000000001000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000100000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000110000000000000", info);
    add_bitstring(bits, "000000000000000000000000001000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000010", info);
    add_bitstring(bits, "011001111110010000000001000001000100000000000000000", info);
    add_bitstring(bits, "000000000001000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000001000000000000000000", info);
    add_bitstring(bits, "010000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000010000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000100000000", info);
    add_bitstring(bits, "000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000001000000000000000000000000000", info);
    add_bitstring(bits, "001001111110000000000001000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000001000000000000000000000", info);
    add_bitstring(bits, "000000000000000000011000000000100010000111010000000", info);
    add_bitstring(bits, "000000000000000000000000010000000000000000000000000", info);
    add_bitstring(bits, "000000000000000100000000000000000000000000000000000", info);
    add_bitstring(bits, "100110000001101101100000111000000001001000100111111", info);
    add_bitstring(bits, "000000000000000000000000000000000000000100000000000", info);
    add_bitstring(bits, "000000000000000000000110000000000000000000000000000", info);
    add_bitstring(bits, "100000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000010000", info);
    add_bitstring(bits, "000000000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "001000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000000000100", info);
    add_bitstring(bits, "000000000000000010011110000100111010110111011000000", info);
    add_bitstring(bits, "000000000000000010000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000010000000000000000000", info);
    add_bitstring(bits, "000000000000000100000000000000000000000000000010000", info);
    add_bitstring(bits, "000000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000001000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000011010000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000001000000", info);
    add_bitstring(bits, "000100000000000000000000000000000001001000000000000", info);
    add_bitstring(bits, "000000000000001000000000000000000000000000000000000", info);
    add_bitstring(bits, "000110000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000100000000000000000", info);
    add_bitstring(bits, "000100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000100000000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(24);
    ts[0] = encrypt_inputinfo);
    ts[1] = encrypt_input("0111111111111111111111111111111111111111111111111111001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111110011111111111111111111111110011111111111111111111111110011111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111100001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111100111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111000000", info);
    ts[2] = encrypt_input("100110000001101101111000111000100011001111110111111", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[20];
    ctxt ss[56];

    vs[0] = ts[0];
    info.eval->rotate_rows(vs[0], -13, gk, ss[0]); // __s0 = __v0 >> 13
    info.eval->rotate_rows(vs[0], -32, gk, ss[1]); // __s1 = __v0 >> 32
    info.eval->rotate_rows(vs[0], -34, gk, ss[2]); // __s2 = __v0 >> 34
    info.eval->rotate_rows(vs[0], -33, gk, ss[3]); // __s3 = __v0 >> 33
    info.eval->rotate_rows(vs[0], -11, gk, ss[4]); // __s4 = __v0 >> 11
    info.eval->rotate_rows(vs[0], -7, gk, ss[5]); // __s5 = __v0 >> 7
    info.eval->rotate_rows(vs[0], -39, gk, ss[6]); // __s6 = __v0 >> 39
    info.eval->rotate_rows(vs[0], -15, gk, ss[7]); // __s7 = __v0 >> 15
    info.eval->rotate_rows(vs[0], -2, gk, ss[8]); // __s8 = __v0 >> 2
    vs[1] = ts[1];
    info.eval->rotate_rows(vs[1], -21, gk, ss[9]); // __s9 = __v1 >> 21
    
    // __t3 = blend(__v0@100110000001101101100000111000000001001000100111111, __s0@000000000000000000010000000000000000000000000000000, __s4@000000000000000000001000000000000000000000000000000, __s5@000000000000000000000000000000100000000000000000000, __s1@000000000000000000000000000000000010000000000000000, __s2@000000000000000000000000000000000000000100000000000, __s3@000000000000000000000000000000000000000011010000000)
    {
    ctxt t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    info.eval->multiply_plain(vs[0], bits["100110000001101101100000111000000001001000100111111"], t3_1);
    info.eval->multiply_plain(ss[0], bits["000000000000000000010000000000000000000000000000000"], t3_2);
    info.eval->multiply_plain(ss[4], bits["000000000000000000001000000000000000000000000000000"], t3_3);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000100000000000000000000"], t3_4);
    info.eval->multiply_plain(ss[1], bits["000000000000000000000000000000000010000000000000000"], t3_5);
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000000000000000000100000000000"], t3_6);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000000000000000011010000000"], t3_7);
    info.eval->add_many({t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7}, ts[3]);
    }
    
    info.eval->add(ts[2], ts[3], vs[2]); // __v2 = __t2 + __t3
    info.eval->rotate_rows(vs[2], -10, gk, ss[10]); // __s10 = __v2 >> 10
    info.eval->rotate_rows(vs[2], -12, gk, ss[11]); // __s11 = __v2 >> 12
    info.eval->rotate_rows(vs[2], -18, gk, ss[12]); // __s12 = __v2 >> 18
    info.eval->rotate_rows(vs[2], -37, gk, ss[13]); // __s13 = __v2 >> 37
    info.eval->rotate_rows(vs[2], -36, gk, ss[14]); // __s14 = __v2 >> 36
    info.eval->rotate_rows(vs[2], -19, gk, ss[15]); // __s15 = __v2 >> 19
    info.eval->rotate_rows(vs[2], -28, gk, ss[16]); // __s16 = __v2 >> 28
    
    // __t4 = blend(__s8@010000000000000000000000000000000000000000000000000, __v0@001001111110000000000001000000000000000000000000000, __s7@000000000000010000000000000000000000000000000000000, __s3@000000000000000000000000000001000000000000000000000, __s6@000000000000000000000000000000000100000000000000000, __v2@000000000000000000000000000000000000000000000000010)
    {
    ctxt t4_1, t4_2, t4_3, t4_4, t4_5, t4_6;
    info.eval->multiply_plain(ss[8], bits["010000000000000000000000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(vs[0], bits["001001111110000000000001000000000000000000000000000"], t4_2);
    info.eval->multiply_plain(ss[7], bits["000000000000010000000000000000000000000000000000000"], t4_3);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000001000000000000000000000"], t4_4);
    info.eval->multiply_plain(ss[6], bits["000000000000000000000000000000000100000000000000000"], t4_5);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000000000000000000000000000000010"], t4_6);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4, t4_5, t4_6}, ts[4]);
    }
    
    
    // __t5 = blend(__v1@011001111110010000000001000001000100000000000000000, __s9@000000000000000000000000000000000000000000000000010)
    {
    ctxt t5_1, t5_2;
    info.eval->multiply_plain(vs[1], bits["011001111110010000000001000001000100000000000000000"], t5_1);
    info.eval->multiply_plain(ss[9], bits["000000000000000000000000000000000000000000000000010"], t5_2);
    info.eval->add(t5_1, t5_2, ts[5]);
    }
    
    info.eval->multiply(ts[4], ts[5], vs[3]); // __v3 = __t4 * __t5
    info.eval->relinearize_inplace(vs[3], rk);
    info.eval->rotate_rows(vs[3], -15, gk, ss[17]); // __s17 = __v3 >> 15
    info.eval->add(vs[3], ss[17], vs[4]); // __v4 = __v3 + __s17
    
    // __t6 = blend(__s0@000000000000010000000000000000000000000000000000000, __s15@000000000000000010000000000000000000000000000000000, __v2@000000000000000000011000000000100010000111010000000, __s10@000000000000000000000110000000000000000000000000000, __s16@000000000000000000000000000100000000000000000000000, __s13@000000000000000000000000000000010000000000000000000, __s14@000000000000000000000000000000001000000000000000000, __s11@000000000000000000000000000000000000110000000000000, __s12@000000000000000000000000000000000000000000001000000)
    {
    ctxt t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7, t6_8, t6_9;
    info.eval->multiply_plain(ss[0], bits["000000000000010000000000000000000000000000000000000"], t6_1);
    info.eval->multiply_plain(ss[15], bits["000000000000000010000000000000000000000000000000000"], t6_2);
    info.eval->multiply_plain(vs[2], bits["000000000000000000011000000000100010000111010000000"], t6_3);
    info.eval->multiply_plain(ss[10], bits["000000000000000000000110000000000000000000000000000"], t6_4);
    info.eval->multiply_plain(ss[16], bits["000000000000000000000000000100000000000000000000000"], t6_5);
    info.eval->multiply_plain(ss[13], bits["000000000000000000000000000000010000000000000000000"], t6_6);
    info.eval->multiply_plain(ss[14], bits["000000000000000000000000000000001000000000000000000"], t6_7);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000000000000000110000000000000"], t6_8);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000000000000000000000001000000"], t6_9);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7, t6_8, t6_9}, ts[6]);
    }
    
    
    // __t7 = blend(__v4@000000000000010000000000000000000000000000000000000, __v1@000000000000000010011110000100111010110111011000000)
    {
    ctxt t7_1, t7_2;
    info.eval->multiply_plain(vs[4], bits["000000000000010000000000000000000000000000000000000"], t7_1);
    info.eval->multiply_plain(vs[1], bits["000000000000000010011110000100111010110111011000000"], t7_2);
    info.eval->add(t7_1, t7_2, ts[7]);
    }
    
    info.eval->multiply(ts[6], ts[7], vs[5]); // __v5 = __t6 * __t7
    info.eval->relinearize_inplace(vs[5], rk);
    info.eval->rotate_rows(vs[5], -38, gk, ss[18]); // __s18 = __v5 >> 38
    info.eval->rotate_rows(vs[5], -40, gk, ss[19]); // __s19 = __v5 >> 40
    info.eval->rotate_rows(vs[5], -25, gk, ss[20]); // __s20 = __v5 >> 25
    info.eval->rotate_rows(vs[5], -44, gk, ss[21]); // __s21 = __v5 >> 44
    info.eval->rotate_rows(vs[5], -2, gk, ss[22]); // __s22 = __v5 >> 2
    info.eval->rotate_rows(vs[5], -48, gk, ss[23]); // __s23 = __v5 >> 48
    info.eval->rotate_rows(vs[5], -19, gk, ss[24]); // __s24 = __v5 >> 19
    info.eval->rotate_rows(vs[5], -17, gk, ss[25]); // __s25 = __v5 >> 17
    info.eval->rotate_rows(vs[5], -18, gk, ss[26]); // __s26 = __v5 >> 18
    
    // __t8 = blend(__s20@010000000000000000000000000000000000000000000000000, __s24@001000000000000000000000000000000000000000000000000, __s25@000001000000000000000000000000000000000000000000000, __s18@000000100000000000000000000000000000000000000000000, __s26@000000011010000000000000000000000000000000000000000, __s19@000000000100000000000000000000000000000000000000000, __s21@000000000000000000000001000000000000000000000000000, __s23@000000000000000000000000000001000000000000000000000, __s22@000000000000000000000000000000000100000000000000000)
    {
    ctxt t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9;
    info.eval->multiply_plain(ss[20], bits["010000000000000000000000000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[24], bits["001000000000000000000000000000000000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[25], bits["000001000000000000000000000000000000000000000000000"], t8_3);
    info.eval->multiply_plain(ss[18], bits["000000100000000000000000000000000000000000000000000"], t8_4);
    info.eval->multiply_plain(ss[26], bits["000000011010000000000000000000000000000000000000000"], t8_5);
    info.eval->multiply_plain(ss[19], bits["000000000100000000000000000000000000000000000000000"], t8_6);
    info.eval->multiply_plain(ss[21], bits["000000000000000000000001000000000000000000000000000"], t8_7);
    info.eval->multiply_plain(ss[23], bits["000000000000000000000000000001000000000000000000000"], t8_8);
    info.eval->multiply_plain(ss[22], bits["000000000000000000000000000000000100000000000000000"], t8_9);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9}, ts[8]);
    }
    
    info.eval->add(vs[3], ts[8], vs[6]); // __v6 = __v3 + __t8
    info.eval->rotate_rows(vs[6], -14, gk, ss[27]); // __s27 = __v6 >> 14
    info.eval->rotate_rows(vs[6], -12, gk, ss[28]); // __s28 = __v6 >> 12
    info.eval->rotate_rows(vs[6], -41, gk, ss[29]); // __s29 = __v6 >> 41
    info.eval->rotate_rows(vs[6], -36, gk, ss[30]); // __s30 = __v6 >> 36
    info.eval->rotate_rows(vs[6], -11, gk, ss[31]); // __s31 = __v6 >> 11
    info.eval->rotate_rows(vs[6], -38, gk, ss[32]); // __s32 = __v6 >> 38
    info.eval->rotate_rows(vs[6], -33, gk, ss[33]); // __s33 = __v6 >> 33
    info.eval->rotate_rows(vs[6], -8, gk, ss[34]); // __s34 = __v6 >> 8
    info.eval->rotate_rows(vs[6], -42, gk, ss[35]); // __s35 = __v6 >> 42
    info.eval->rotate_rows(vs[6], -22, gk, ss[36]); // __s36 = __v6 >> 22
    
    // __t9 = blend(__v2@100000000000000100000000000000000000000000000010000, __v0@000000000000001000100000000000000000000000100000000)
    {
    ctxt t9_1, t9_2;
    info.eval->multiply_plain(vs[2], bits["100000000000000100000000000000000000000000000010000"], t9_1);
    info.eval->multiply_plain(vs[0], bits["000000000000001000100000000000000000000000100000000"], t9_2);
    info.eval->add(t9_1, t9_2, ts[9]);
    }
    
    
    // __t10 = blend(__s36@100000000000000000000000000000000000000000000000000, __s35@000000000000001000000000000000000000000000000000000, __s33@000000000000000100000000000000000000000000000000000, __s31@000000000000000000100000000000000000000000000000000, __s30@000000000000000000000000000000000000000000100000000, __s32@000000000000000000000000000000000000000000000010000)
    {
    ctxt t10_1, t10_2, t10_3, t10_4, t10_5, t10_6;
    info.eval->multiply_plain(ss[36], bits["100000000000000000000000000000000000000000000000000"], t10_1);
    info.eval->multiply_plain(ss[35], bits["000000000000001000000000000000000000000000000000000"], t10_2);
    info.eval->multiply_plain(ss[33], bits["000000000000000100000000000000000000000000000000000"], t10_3);
    info.eval->multiply_plain(ss[31], bits["000000000000000000100000000000000000000000000000000"], t10_4);
    info.eval->multiply_plain(ss[30], bits["000000000000000000000000000000000000000000100000000"], t10_5);
    info.eval->multiply_plain(ss[32], bits["000000000000000000000000000000000000000000000010000"], t10_6);
    info.eval->add_many({t10_1, t10_2, t10_3, t10_4, t10_5, t10_6}, ts[10]);
    }
    
    info.eval->multiply(ts[9], ts[10], vs[7]); // __v7 = __t9 * __t10
    info.eval->relinearize_inplace(vs[7], rk);
    
    // __t11 = blend(__v2@000000000000001000100000000000000000000000100000000, __v0@000000000000000100000000000000000000000000000010000)
    {
    ctxt t11_1, t11_2;
    info.eval->multiply_plain(vs[2], bits["000000000000001000100000000000000000000000100000000"], t11_1);
    info.eval->multiply_plain(vs[0], bits["000000000000000100000000000000000000000000000010000"], t11_2);
    info.eval->add(t11_1, t11_2, ts[11]);
    }
    
    
    // __t12 = blend(__s28@000000000000001000000000000000000000000000000000000, __s27@000000000000000100000000000000000000000000000000000, __s34@000000000000000000100000000000000000000000000000000, __s33@000000000000000000000000000000000000000000100000000, __s29@000000000000000000000000000000000000000000000010000)
    {
    ctxt t12_1, t12_2, t12_3, t12_4, t12_5;
    info.eval->multiply_plain(ss[28], bits["000000000000001000000000000000000000000000000000000"], t12_1);
    info.eval->multiply_plain(ss[27], bits["000000000000000100000000000000000000000000000000000"], t12_2);
    info.eval->multiply_plain(ss[34], bits["000000000000000000100000000000000000000000000000000"], t12_3);
    info.eval->multiply_plain(ss[33], bits["000000000000000000000000000000000000000000100000000"], t12_4);
    info.eval->multiply_plain(ss[29], bits["000000000000000000000000000000000000000000000010000"], t12_5);
    info.eval->add_many({t12_1, t12_2, t12_3, t12_4, t12_5}, ts[12]);
    }
    
    info.eval->multiply(ts[11], ts[12], vs[8]); // __v8 = __t11 * __t12
    info.eval->relinearize_inplace(vs[8], rk);
    
    // __t13 = blend(__s18@100000000000000000000000000000000000000000000000000, __v7@000000000000001000100000000000000000000000100000000, __v8@000000000000000100000000000000000000000000000010000)
    {
    ctxt t13_1, t13_2, t13_3;
    info.eval->multiply_plain(ss[18], bits["100000000000000000000000000000000000000000000000000"], t13_1);
    info.eval->multiply_plain(vs[7], bits["000000000000001000100000000000000000000000100000000"], t13_2);
    info.eval->multiply_plain(vs[8], bits["000000000000000100000000000000000000000000000010000"], t13_3);
    info.eval->add_many({t13_1, t13_2, t13_3}, ts[13]);
    }
    
    
    // __t14 = blend(__v7@100000000000000100000000000000000000000000000010000, __v8@000000000000001000100000000000000000000000100000000)
    {
    ctxt t14_1, t14_2;
    info.eval->multiply_plain(vs[7], bits["100000000000000100000000000000000000000000000010000"], t14_1);
    info.eval->multiply_plain(vs[8], bits["000000000000001000100000000000000000000000100000000"], t14_2);
    info.eval->add(t14_1, t14_2, ts[14]);
    }
    
    info.eval->add(ts[13], ts[14], vs[9]); // __v9 = __t13 + __t14
    info.eval->rotate_rows(vs[9], -48, gk, ss[37]); // __s37 = __v9 >> 48
    info.eval->rotate_rows(vs[9], -11, gk, ss[38]); // __s38 = __v9 >> 11
    info.eval->rotate_rows(vs[9], -9, gk, ss[39]); // __s39 = __v9 >> 9
    info.eval->rotate_rows(vs[9], -8, gk, ss[40]); // __s40 = __v9 >> 8
    info.eval->rotate_rows(vs[9], -21, gk, ss[41]); // __s41 = __v9 >> 21
    info.eval->rotate_rows(vs[9], -16, gk, ss[42]); // __s42 = __v9 >> 16
    
    // __t15 = blend(__s42@000000000001000000000000000000000000000000000000000, __s41@000000000000100000000000000000000000000000000000000, __s39@000000000000000000000000100000000000000000000000000, __s38@000000000000000000000000010000000000000000000000000, __s40@000000000000000000000000001000000000000000000000000, __s37@000000000000000000000000000000000000000000000000100)
    {
    ctxt t15_1, t15_2, t15_3, t15_4, t15_5, t15_6;
    info.eval->multiply_plain(ss[42], bits["000000000001000000000000000000000000000000000000000"], t15_1);
    info.eval->multiply_plain(ss[41], bits["000000000000100000000000000000000000000000000000000"], t15_2);
    info.eval->multiply_plain(ss[39], bits["000000000000000000000000100000000000000000000000000"], t15_3);
    info.eval->multiply_plain(ss[38], bits["000000000000000000000000010000000000000000000000000"], t15_4);
    info.eval->multiply_plain(ss[40], bits["000000000000000000000000001000000000000000000000000"], t15_5);
    info.eval->multiply_plain(ss[37], bits["000000000000000000000000000000000000000000000000100"], t15_6);
    info.eval->add_many({t15_1, t15_2, t15_3, t15_4, t15_5, t15_6}, ts[15]);
    }
    
    info.eval->multiply(vs[0], ts[15], vs[10]); // __v10 = __v0 * __t15
    info.eval->relinearize_inplace(vs[10], rk);
    info.eval->rotate_rows(vs[10], -10, gk, ss[43]); // __s43 = __v10 >> 10
    info.eval->rotate_rows(vs[10], -12, gk, ss[44]); // __s44 = __v10 >> 12
    info.eval->rotate_rows(vs[10], -18, gk, ss[45]); // __s45 = __v10 >> 18
    info.eval->rotate_rows(vs[10], -19, gk, ss[46]); // __s46 = __v10 >> 19
    
    // __t16 = blend(__s46@000000000000000010000000000000000000000000000000000, __s43@000000000000000000000110000000000000000000000000000, __s44@000000000000000000000000000000000000110000000000000, __s45@000000000000000000000000000000000000000000001000000)
    {
    ctxt t16_1, t16_2, t16_3, t16_4;
    info.eval->multiply_plain(ss[46], bits["000000000000000010000000000000000000000000000000000"], t16_1);
    info.eval->multiply_plain(ss[43], bits["000000000000000000000110000000000000000000000000000"], t16_2);
    info.eval->multiply_plain(ss[44], bits["000000000000000000000000000000000000110000000000000"], t16_3);
    info.eval->multiply_plain(ss[45], bits["000000000000000000000000000000000000000000001000000"], t16_4);
    info.eval->add_many({t16_1, t16_2, t16_3, t16_4}, ts[16]);
    }
    
    info.eval->add(ts[16], vs[5], vs[11]); // __v11 = __t16 + __v5
    info.eval->rotate_rows(vs[11], -19, gk, ss[47]); // __s47 = __v11 >> 19
    info.eval->rotate_rows(vs[11], -17, gk, ss[48]); // __s48 = __v11 >> 17
    info.eval->rotate_rows(vs[11], -13, gk, ss[49]); // __s49 = __v11 >> 13
    info.eval->rotate_rows(vs[11], -18, gk, ss[50]); // __s50 = __v11 >> 18
    info.eval->rotate_rows(vs[11], -11, gk, ss[51]); // __s51 = __v11 >> 11
    
    // __t17 = blend(__v2@000100000000000000000000000000000001001000000000000, __v0@000010000000000000000000000000000000000000000000000)
    {
    ctxt t17_1, t17_2;
    info.eval->multiply_plain(vs[2], bits["000100000000000000000000000000000001001000000000000"], t17_1);
    info.eval->multiply_plain(vs[0], bits["000010000000000000000000000000000000000000000000000"], t17_2);
    info.eval->add(t17_1, t17_2, ts[17]);
    }
    
    
    // __t18 = blend(__s50@000110000000000000000000000000000000000000000000000, __s47@000000000000000000000000000000000001000000000000000, __s48@000000000000000000000000000000000000001000000000000)
    {
    ctxt t18_1, t18_2, t18_3;
    info.eval->multiply_plain(ss[50], bits["000110000000000000000000000000000000000000000000000"], t18_1);
    info.eval->multiply_plain(ss[47], bits["000000000000000000000000000000000001000000000000000"], t18_2);
    info.eval->multiply_plain(ss[48], bits["000000000000000000000000000000000000001000000000000"], t18_3);
    info.eval->add_many({t18_1, t18_2, t18_3}, ts[18]);
    }
    
    info.eval->multiply(ts[17], ts[18], vs[12]); // __v12 = __t17 * __t18
    info.eval->relinearize_inplace(vs[12], rk);
    
    // __t19 = blend(__v2@000010000000000000000000000000000000000000000000000, __v0@000000000000000000000000000000000001000000000000000)
    {
    ctxt t19_1, t19_2;
    info.eval->multiply_plain(vs[2], bits["000010000000000000000000000000000000000000000000000"], t19_1);
    info.eval->multiply_plain(vs[0], bits["000000000000000000000000000000000001000000000000000"], t19_2);
    info.eval->add(t19_1, t19_2, ts[19]);
    }
    
    
    // __t20 = blend(__s51@000010000000000000000000000000000000000000000000000, __s49@000000000000000000000000000000000001000000000000000)
    {
    ctxt t20_1, t20_2;
    info.eval->multiply_plain(ss[51], bits["000010000000000000000000000000000000000000000000000"], t20_1);
    info.eval->multiply_plain(ss[49], bits["000000000000000000000000000000000001000000000000000"], t20_2);
    info.eval->add(t20_1, t20_2, ts[20]);
    }
    
    info.eval->multiply(ts[19], ts[20], vs[13]); // __v13 = __t19 * __t20
    info.eval->relinearize_inplace(vs[13], rk);
    
    // __t21 = blend(__v12@000010000000000000000000000000000000000000000000000, __v13@000000000000000000000000000000000001000000000000000)
    {
    ctxt t21_1, t21_2;
    info.eval->multiply_plain(vs[12], bits["000010000000000000000000000000000000000000000000000"], t21_1);
    info.eval->multiply_plain(vs[13], bits["000000000000000000000000000000000001000000000000000"], t21_2);
    info.eval->add(t21_1, t21_2, ts[21]);
    }
    
    
    // __t22 = blend(__v13@000010000000000000000000000000000000000000000000000, __v12@000000000000000000000000000000000001000000000000000)
    {
    ctxt t22_1, t22_2;
    info.eval->multiply_plain(vs[13], bits["000010000000000000000000000000000000000000000000000"], t22_1);
    info.eval->multiply_plain(vs[12], bits["000000000000000000000000000000000001000000000000000"], t22_2);
    info.eval->add(t22_1, t22_2, ts[22]);
    }
    
    info.eval->add(ts[21], ts[22], vs[14]); // __v14 = __t21 + __t22
    info.eval->rotate_rows(vs[14], -50, gk, ss[52]); // __s52 = __v14 >> 50
    info.eval->rotate_rows(vs[14], -3, gk, ss[53]); // __s53 = __v14 >> 3
    
    // __t23 = blend(__s52@000100000000000000000000000000000000000000000000000, __s53@000000000000000000000000000000000000001000000000000)
    {
    ctxt t23_1, t23_2;
    info.eval->multiply_plain(ss[52], bits["000100000000000000000000000000000000000000000000000"], t23_1);
    info.eval->multiply_plain(ss[53], bits["000000000000000000000000000000000000001000000000000"], t23_2);
    info.eval->add(t23_1, t23_2, ts[23]);
    }
    
    info.eval->multiply(vs[0], ts[23], vs[15]); // __v15 = __v0 * __t23
    info.eval->relinearize_inplace(vs[15], rk);
    info.eval->add(vs[15], vs[12], vs[16]); // __v16 = __v15 + __v12
    info.eval->rotate_rows(vs[16], -14, gk, ss[54]); // __s54 = __v16 >> 14
    info.eval->rotate_rows(vs[16], -30, gk, ss[55]); // __s55 = __v16 >> 30
    info.eval->multiply(vs[2], ss[55], vs[17]); // __v17 = __v2 * __s55
    info.eval->relinearize_inplace(vs[17], rk);
    info.eval->multiply(vs[0], ss[54], vs[18]); // __v18 = __v0 * __s54
    info.eval->relinearize_inplace(vs[18], rk);
    info.eval->add(vs[18], vs[17], vs[19]); // __v19 = __v18 + __v17
    return vs[19];
}
    