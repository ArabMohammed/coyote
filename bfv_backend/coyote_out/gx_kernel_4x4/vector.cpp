
# include <vector.hpp>

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "0000000000000000010000000000000000010000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000100000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000100000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000010000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000001000000000000010000000000000000100000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000100000000", info);
    add_bitstring(bits, "0000000000000000000000010000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000100000000000000000010000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000100000", info);
    add_bitstring(bits, "0000101000010000000000000000000000000000000000001000001000000000", info);
    add_bitstring(bits, "0000000000000000000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "1000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000010000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0001000000000000000000000000000000001000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000100000000000000000000001000000000001001010000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000010000000000000000", info);
    add_bitstring(bits, "0000000010000000000000000000000000000000000000000001000000000000", info);
    add_bitstring(bits, "0010000000001100001000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000010000000010000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000100000000000000000000000000010000000000000000000000000000", info);
    add_bitstring(bits, "0000001000000000000001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000001000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000010010000000000000000000000000000000000000000100000000000000", info);
    add_bitstring(bits, "0000000000110000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000010000000000000000000000000000000000000000000100000000", info);
    add_bitstring(bits, "0000000000000000001000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000100000000000000000000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000010000000000000", info);
    add_bitstring(bits, "0000100010000000001000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000010000000000000000000100000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000010000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000001", info);
    add_bitstring(bits, "0000100000001000000000000000000000010000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "0000010000000000000000010000000000000000000000010000000000000000", info);
    add_bitstring(bits, "0000010010100000000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000100000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000001000000010000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0010000000100000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000011000000000000000000000001001000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000010000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000100000000000001110", info);
    add_bitstring(bits, "0000000000000000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000100000000001000100000", info);
    add_bitstring(bits, "1000000000100000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000010000100100000100", info);
    add_bitstring(bits, "0000000100000000000000000000000010000000000000011000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000010000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000001000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000001000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000100000000000001010000000", info);
    add_bitstring(bits, "0000000000000000000000000000000010000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000011000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000100000010000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000001000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000100000000000000000", info);
    add_bitstring(bits, "0000000000001000000000000000000000000000010000000000100000000000", info);
    add_bitstring(bits, "0000000000001000000000000000000000000000000000000000000000000100", info);
    add_bitstring(bits, "0000000000001000000001000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000010000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000010000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000010000", info);
    add_bitstring(bits, "0000000000000001000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000001000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000001000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000100000000000000000000000000000010000000000000000000000000", info);
    add_bitstring(bits, "0010000000000000000000000000000000000100000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000001000000000", info);
    add_bitstring(bits, "0000000000100000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0001000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000010000000000000010000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000010001000000000000000000100000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000100000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(14);
    ts[0] = encrypt_input("000111111111111111111111111111111111111111111111110111111111111111111111110011111111111111111111111100111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111101100000000000111111111111111111111110000000001111111111111111111110111111111111111111111111110111111111111111111111010000000001111111111111111111111110011111111111111111111111111111111111111111111101111111111111111111111111100000000000", info);
    ts[1] = encrypt_input("0000000000000000000000000000000000000000000000000000000000000000", info);
    ts[2] = encrypt_input("0000000000000000000000000000000000000000000000000000000000000000", info);
    ts[5] = encrypt_input("0010101101011011101100111101000101010101011000110010100100001110", info);
    ts[6] = encrypt_input("0000000000000000000000000000000000000000000000000000000000000000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[6];
    ctxt ss[51];

    vs[0] = ts[0];
    info.eval->rotate_rows(vs[0], -1, gk, ss[0]); // __s0 = __v0 >> 1
    info.eval->rotate_rows(vs[0], -7, gk, ss[1]); // __s1 = __v0 >> 7
    info.eval->rotate_rows(vs[0], -44, gk, ss[2]); // __s2 = __v0 >> 44
    info.eval->rotate_rows(vs[0], -14, gk, ss[3]); // __s3 = __v0 >> 14
    info.eval->rotate_rows(vs[0], -27, gk, ss[4]); // __s4 = __v0 >> 27
    info.eval->rotate_rows(vs[0], -16, gk, ss[5]); // __s5 = __v0 >> 16
    info.eval->rotate_rows(vs[0], -4, gk, ss[6]); // __s6 = __v0 >> 4
    info.eval->rotate_rows(vs[0], -5, gk, ss[7]); // __s7 = __v0 >> 5
    info.eval->rotate_rows(vs[0], -62, gk, ss[8]); // __s8 = __v0 >> 62
    info.eval->rotate_rows(vs[0], -10, gk, ss[9]); // __s9 = __v0 >> 10
    info.eval->rotate_rows(vs[0], -49, gk, ss[10]); // __s10 = __v0 >> 49
    info.eval->rotate_rows(vs[0], -54, gk, ss[11]); // __s11 = __v0 >> 54
    info.eval->rotate_rows(vs[0], -38, gk, ss[12]); // __s12 = __v0 >> 38
    info.eval->rotate_rows(vs[0], -41, gk, ss[13]); // __s13 = __v0 >> 41
    info.eval->rotate_rows(vs[0], -46, gk, ss[14]); // __s14 = __v0 >> 46
    
    // __t3 = blend(__s11@1000000000000000000000000000000000000000000000000000000000000000, __s8@0001000000000000000000000000000000001000000000000000000000000000, __s6@0000000010000000000000000000000000000000000000000001000000000000, __s7@0000000000100000000000000000000000000000000000000000000000000000, __s3@0000000000000000010001000000000000000000100000000000000000000000, __s5@0000000000000000000010000000000000000000000000000000000000000000, __s4@0000000000000000000000000000001000000000000000000000000000000000, __s1@0000000000000000000000000000000000000000000100000000001000100000, __s9@0000000000000000000000000000000000000000000001000000000000000000, __s13@0000000000000000000000000000000000000000000000000000010000000000, __s2@0000000000000000000000000000000000000000000000000000000010000000, __s10@0000000000000000000000000000000000000000000000000000000000010000, __t1@0100010000000100000000000010110010100010000010001100000001000001)
    {
    ctxt t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11, t3_12;
    info.eval->multiply_plain(ss[11], bits["1000000000000000000000000000000000000000000000000000000000000000"], t3_1);
    info.eval->multiply_plain(ss[8], bits["0001000000000000000000000000000000001000000000000000000000000000"], t3_2);
    info.eval->multiply_plain(ss[6], bits["0000000010000000000000000000000000000000000000000001000000000000"], t3_3);
    info.eval->multiply_plain(ss[7], bits["0000000000100000000000000000000000000000000000000000000000000000"], t3_4);
    info.eval->multiply_plain(ss[3], bits["0000000000000000010001000000000000000000100000000000000000000000"], t3_5);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000010000000000000000000000000000000000000000000"], t3_6);
    info.eval->multiply_plain(ss[4], bits["0000000000000000000000000000001000000000000000000000000000000000"], t3_7);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000000000000000000000000000100000000001000100000"], t3_8);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000000000000000000000000000001000000000000000000"], t3_9);
    info.eval->multiply_plain(ss[13], bits["0000000000000000000000000000000000000000000000000000010000000000"], t3_10);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000000000000000000000000000000000010000000"], t3_11);
    info.eval->multiply_plain(ss[10], bits["0000000000000000000000000000000000000000000000000000000000010000"], t3_12);
    info.eval->add_many({t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11, t3_12, ts[1]}, ts[3]);
    }
    
    
    // __t4 = blend(__v0@0001000000000000000000000000000000000000000000000000000000000000, __s8@0000010010000000000000000000000000000000000000000100000000000000, __s1@0000000000100000000000000000000000000000000000000000000000000000, __s0@0000000000000100000000000000000000001000000000001001010000000000, __s9@0000000000000000000011000000000000000000000000000000000000000000, __s3@0000000000000000000000000010000000000000000000000000000000000000, __s6@0000000000000000000000000000000000000000100000000000001010000000, __s2@0000000000000000000000000000000000000000000000000000000000100000, __s5@0000000000000000000000000000000000000000000000000000000000000001, __t2@1100000000000000010000000000111010100010000111000000000001010000)
    {
    ctxt t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9;
    info.eval->multiply_plain(vs[0], bits["0001000000000000000000000000000000000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[8], bits["0000010010000000000000000000000000000000000000000100000000000000"], t4_2);
    info.eval->multiply_plain(ss[1], bits["0000000000100000000000000000000000000000000000000000000000000000"], t4_3);
    info.eval->multiply_plain(ss[0], bits["0000000000000100000000000000000000001000000000001001010000000000"], t4_4);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000011000000000000000000000000000000000000000000"], t4_5);
    info.eval->multiply_plain(ss[3], bits["0000000000000000000000000010000000000000000000000000000000000000"], t4_6);
    info.eval->multiply_plain(ss[6], bits["0000000000000000000000000000000000000000100000000000001010000000"], t4_7);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000000000000000000000000000000000000100000"], t4_8);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000000000000000000000000000000000000000001"], t4_9);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, ts[2]}, ts[4]);
    }
    
    info.eval->add(ts[3], ts[4], vs[1]); // __v1 = __t3 + __t4
    info.eval->rotate_rows(vs[1], -54, gk, ss[15]); // __s15 = __v1 >> 54
    info.eval->rotate_rows(vs[1], -22, gk, ss[16]); // __s16 = __v1 >> 22
    info.eval->rotate_rows(vs[1], -4, gk, ss[17]); // __s17 = __v1 >> 4
    info.eval->rotate_rows(vs[1], -1, gk, ss[18]); // __s18 = __v1 >> 1
    info.eval->rotate_rows(vs[1], -48, gk, ss[19]); // __s19 = __v1 >> 48
    info.eval->rotate_rows(vs[1], -49, gk, ss[20]); // __s20 = __v1 >> 49
    info.eval->rotate_rows(vs[1], -53, gk, ss[21]); // __s21 = __v1 >> 53
    info.eval->rotate_rows(vs[1], -62, gk, ss[22]); // __s22 = __v1 >> 62
    info.eval->rotate_rows(vs[1], -36, gk, ss[23]); // __s23 = __v1 >> 36
    info.eval->rotate_rows(vs[1], -51, gk, ss[24]); // __s24 = __v1 >> 51
    info.eval->rotate_rows(vs[1], -43, gk, ss[25]); // __s25 = __v1 >> 43
    info.eval->rotate_rows(vs[1], -52, gk, ss[26]); // __s26 = __v1 >> 52
    info.eval->rotate_rows(vs[1], -18, gk, ss[27]); // __s27 = __v1 >> 18
    info.eval->rotate_rows(vs[1], -37, gk, ss[28]); // __s28 = __v1 >> 37
    info.eval->rotate_rows(vs[1], -57, gk, ss[29]); // __s29 = __v1 >> 57
    
    // __t7 = blend(__s11@0010000000000000000000000000000000000100000000000000000000000000, __s0@0000100000010000000000000000000000000000000000000000000000000000, __v0@0000000100000000000000000000000000010000000000000000000000000000, __s7@0000000000001000000000000000000000000000010000000000100000000000, __s6@0000000000000011000000000000000000000001001000000000000000000000, __s3@0000000000000000000100000000000000000000000000000000000000000000, __s8@0000000000000000000000001000000000000000000000000000000000000000, __s4@0000000000000000000000000000000100000000000000000000000000000000, __s14@0000000000000000000000000000000001000000000000000000000000000000, __s9@0000000000000000000000000000000000000000000000100000000000001110, __s2@0000000000000000000000000000000000000000000000010000000000000000, __s12@0000000000000000000000000000000000000000000000000010000000000000, __s13@0000000000000000000000000000000000000000000000000000000100000000, __t6@0000001001000000101000110101000000000000000000000000000000000000)
    {
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10, t7_11, t7_12, t7_13;
    info.eval->multiply_plain(ss[11], bits["0010000000000000000000000000000000000100000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[0], bits["0000100000010000000000000000000000000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(vs[0], bits["0000000100000000000000000000000000010000000000000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[7], bits["0000000000001000000000000000000000000000010000000000100000000000"], t7_4);
    info.eval->multiply_plain(ss[6], bits["0000000000000011000000000000000000000001001000000000000000000000"], t7_5);
    info.eval->multiply_plain(ss[3], bits["0000000000000000000100000000000000000000000000000000000000000000"], t7_6);
    info.eval->multiply_plain(ss[8], bits["0000000000000000000000001000000000000000000000000000000000000000"], t7_7);
    info.eval->multiply_plain(ss[4], bits["0000000000000000000000000000000100000000000000000000000000000000"], t7_8);
    info.eval->multiply_plain(ss[14], bits["0000000000000000000000000000000001000000000000000000000000000000"], t7_9);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000000000000000000000000000000100000000000001110"], t7_10);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000000000000000000000000010000000000000000"], t7_11);
    info.eval->multiply_plain(ss[12], bits["0000000000000000000000000000000000000000000000000010000000000000"], t7_12);
    info.eval->multiply_plain(ss[13], bits["0000000000000000000000000000000000000000000000000000000100000000"], t7_13);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10, t7_11, t7_12, t7_13, ts[6]}, ts[7]);
    }
    
    info.eval->multiply(ts[5], ts[7], vs[2]); // __v2 = __t5 * __t7
    info.eval->relinearize_inplace(vs[2], rk);
    info.eval->rotate_rows(vs[2], -62, gk, ss[30]); // __s30 = __v2 >> 62
    info.eval->rotate_rows(vs[2], -1, gk, ss[31]); // __s31 = __v2 >> 1
    info.eval->rotate_rows(vs[2], -22, gk, ss[32]); // __s32 = __v2 >> 22
    info.eval->rotate_rows(vs[2], -57, gk, ss[33]); // __s33 = __v2 >> 57
    info.eval->rotate_rows(vs[2], -4, gk, ss[34]); // __s34 = __v2 >> 4
    info.eval->rotate_rows(vs[2], -48, gk, ss[35]); // __s35 = __v2 >> 48
    info.eval->rotate_rows(vs[2], -51, gk, ss[36]); // __s36 = __v2 >> 51
    info.eval->rotate_rows(vs[2], -37, gk, ss[37]); // __s37 = __v2 >> 37
    info.eval->rotate_rows(vs[2], -43, gk, ss[38]); // __s38 = __v2 >> 43
    info.eval->rotate_rows(vs[2], -52, gk, ss[39]); // __s39 = __v2 >> 52
    info.eval->rotate_rows(vs[2], -49, gk, ss[40]); // __s40 = __v2 >> 49
    
    // __t8 = blend(__s35@1000000000000000000000000000000000000000000000000000000000000000, __s37@0000100000000000000000000000000000100000000000000000000000000000, __s31@0000010010100000000010000000000000000000000000000000000000000000, __s38@0000000000000010000000000000000000000000000000000000000000000000, __s34@0000000000000000001000000010000000000000000000000000000000000000, __s30@0000000000000000000001000000000000000000000000000000000000000000, __s40@0000000000000000000000000001000000010000000000000000000000000000, __s36@0000000000000000000000000000100000000000000000000000000000000000, __s33@0000000000000000000000000000000000000000000001000000000000000000, __s32@0000000000000000000000000000000000000000000000100000000000000000)
    {
    ctxt t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9, t8_10;
    info.eval->multiply_plain(ss[35], bits["1000000000000000000000000000000000000000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[37], bits["0000100000000000000000000000000000100000000000000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[31], bits["0000010010100000000010000000000000000000000000000000000000000000"], t8_3);
    info.eval->multiply_plain(ss[38], bits["0000000000000010000000000000000000000000000000000000000000000000"], t8_4);
    info.eval->multiply_plain(ss[34], bits["0000000000000000001000000010000000000000000000000000000000000000"], t8_5);
    info.eval->multiply_plain(ss[30], bits["0000000000000000000001000000000000000000000000000000000000000000"], t8_6);
    info.eval->multiply_plain(ss[40], bits["0000000000000000000000000001000000010000000000000000000000000000"], t8_7);
    info.eval->multiply_plain(ss[36], bits["0000000000000000000000000000100000000000000000000000000000000000"], t8_8);
    info.eval->multiply_plain(ss[33], bits["0000000000000000000000000000000000000000000001000000000000000000"], t8_9);
    info.eval->multiply_plain(ss[32], bits["0000000000000000000000000000000000000000000000100000000000000000"], t8_10);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9, t8_10}, ts[8]);
    }
    
    
    // __t9 = blend(__s30@1000000000100000000000000000000000000000000000000000000000000000, __s33@0000100010000000001000000010000000000000000000000000000000000000, __s36@0000010000000010000000000000000000000000000000000000000000000000, __s37@0000000000000000000010000000000000010000000000000000000000000000, __s35@0000000000000000000001000000000000000000000000000000000000000000, __s39@0000000000000000000000000001000000000000000000000000000000000000, __s32@0000000000000000000000000000100000000000000000000000000000000000, __s38@0000000000000000000000000000000000100000000000000000000000000000, __s40@0000000000000000000000000000000000000000000001000000000000000000, __v2@0000000000000000000000000000000000000000000000100000000000000000)
    {
    ctxt t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7, t9_8, t9_9, t9_10;
    info.eval->multiply_plain(ss[30], bits["1000000000100000000000000000000000000000000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[33], bits["0000100010000000001000000010000000000000000000000000000000000000"], t9_2);
    info.eval->multiply_plain(ss[36], bits["0000010000000010000000000000000000000000000000000000000000000000"], t9_3);
    info.eval->multiply_plain(ss[37], bits["0000000000000000000010000000000000010000000000000000000000000000"], t9_4);
    info.eval->multiply_plain(ss[35], bits["0000000000000000000001000000000000000000000000000000000000000000"], t9_5);
    info.eval->multiply_plain(ss[39], bits["0000000000000000000000000001000000000000000000000000000000000000"], t9_6);
    info.eval->multiply_plain(ss[32], bits["0000000000000000000000000000100000000000000000000000000000000000"], t9_7);
    info.eval->multiply_plain(ss[38], bits["0000000000000000000000000000000000100000000000000000000000000000"], t9_8);
    info.eval->multiply_plain(ss[40], bits["0000000000000000000000000000000000000000000001000000000000000000"], t9_9);
    info.eval->multiply_plain(vs[2], bits["0000000000000000000000000000000000000000000000100000000000000000"], t9_10);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7, t9_8, t9_9, t9_10}, ts[9]);
    }
    
    info.eval->add(ts[8], ts[9], vs[3]); // __v3 = __t8 + __t9
    info.eval->rotate_rows(vs[3], -47, gk, ss[41]); // __s41 = __v3 >> 47
    info.eval->rotate_rows(vs[3], -11, gk, ss[42]); // __s42 = __v3 >> 11
    info.eval->rotate_rows(vs[3], -56, gk, ss[43]); // __s43 = __v3 >> 56
    info.eval->rotate_rows(vs[3], -58, gk, ss[44]); // __s44 = __v3 >> 58
    info.eval->rotate_rows(vs[3], -29, gk, ss[45]); // __s45 = __v3 >> 29
    
    // __t10 = blend(__s27@0010000000100000000000000000000000000000000000000000000000000000, __s18@0000000000010000000000000000000000000000000000000000000100000000, __s17@0000000000001000000000000000000000000000000000000000000000000100, __v1@0000000000000100000000000000000000000000000000000000000000000000, __s25@0000000000000001000000000000000000000000000000000000000000000000, __s21@0000000000000000001000000000000000000000000000000000000000000000, __s24@0000000000000000000001000000000000000000000000000000000000000000, __s26@0000000000000000000000000010000000000000000000100000000000000000, __s22@0000000000000000000000000000100000000000000000010000000000000000, __s19@0000000000000000000000000000010000000000000000000000000000000000, __s29@0000000000000000000000000000000000000000000000000000100000000000)
    {
    ctxt t10_1, t10_2, t10_3, t10_4, t10_5, t10_6, t10_7, t10_8, t10_9, t10_10, t10_11;
    info.eval->multiply_plain(ss[27], bits["0010000000100000000000000000000000000000000000000000000000000000"], t10_1);
    info.eval->multiply_plain(ss[18], bits["0000000000010000000000000000000000000000000000000000000100000000"], t10_2);
    info.eval->multiply_plain(ss[17], bits["0000000000001000000000000000000000000000000000000000000000000100"], t10_3);
    info.eval->multiply_plain(vs[1], bits["0000000000000100000000000000000000000000000000000000000000000000"], t10_4);
    info.eval->multiply_plain(ss[25], bits["0000000000000001000000000000000000000000000000000000000000000000"], t10_5);
    info.eval->multiply_plain(ss[21], bits["0000000000000000001000000000000000000000000000000000000000000000"], t10_6);
    info.eval->multiply_plain(ss[24], bits["0000000000000000000001000000000000000000000000000000000000000000"], t10_7);
    info.eval->multiply_plain(ss[26], bits["0000000000000000000000000010000000000000000000100000000000000000"], t10_8);
    info.eval->multiply_plain(ss[22], bits["0000000000000000000000000000100000000000000000010000000000000000"], t10_9);
    info.eval->multiply_plain(ss[19], bits["0000000000000000000000000000010000000000000000000000000000000000"], t10_10);
    info.eval->multiply_plain(ss[29], bits["0000000000000000000000000000000000000000000000000000100000000000"], t10_11);
    info.eval->add_many({t10_1, t10_2, t10_3, t10_4, t10_5, t10_6, t10_7, t10_8, t10_9, t10_10, t10_11}, ts[10]);
    }
    
    
    // __t11 = blend(__s43@0010000000001100001000000010000000000000000000000000000000000000, __s45@0000000000110000000000000000000000000000000000000000000000000000, __s42@0000000000000001000000000000010000000000000000100000000000000000, __s44@0000000000000000000001000000000000000000000000000000000000000000, __v3@0000000000000000000000000000100000000000000000000000000000000000, __s41@0000000000000000000000000000000000000000000000010000100100000100)
    {
    ctxt t11_1, t11_2, t11_3, t11_4, t11_5, t11_6;
    info.eval->multiply_plain(ss[43], bits["0010000000001100001000000010000000000000000000000000000000000000"], t11_1);
    info.eval->multiply_plain(ss[45], bits["0000000000110000000000000000000000000000000000000000000000000000"], t11_2);
    info.eval->multiply_plain(ss[42], bits["0000000000000001000000000000010000000000000000100000000000000000"], t11_3);
    info.eval->multiply_plain(ss[44], bits["0000000000000000000001000000000000000000000000000000000000000000"], t11_4);
    info.eval->multiply_plain(vs[3], bits["0000000000000000000000000000100000000000000000000000000000000000"], t11_5);
    info.eval->multiply_plain(ss[41], bits["0000000000000000000000000000000000000000000000010000100100000100"], t11_6);
    info.eval->add_many({t11_1, t11_2, t11_3, t11_4, t11_5, t11_6}, ts[11]);
    }
    
    info.eval->add(ts[10], ts[11], vs[4]); // __v4 = __t10 + __t11
    info.eval->rotate_rows(vs[4], -30, gk, ss[46]); // __s46 = __v4 >> 30
    info.eval->rotate_rows(vs[4], -59, gk, ss[47]); // __s47 = __v4 >> 59
    info.eval->rotate_rows(vs[4], -57, gk, ss[48]); // __s48 = __v4 >> 57
    info.eval->rotate_rows(vs[4], -56, gk, ss[49]); // __s49 = __v4 >> 56
    info.eval->rotate_rows(vs[4], -52, gk, ss[50]); // __s50 = __v4 >> 52
    
    // __t12 = blend(__s48@0000101000010000000000000000000000000000000000001000001000000000, __s47@0000010000000000000000010000000000000000000000010000000000000000, __s49@0000000100000000000000000000000000000010000000000000000000000000, __v4@0000000000001000000001000010000000000000000000000000000000000000, __s50@0000000000000000010000000000000000010000000000000000000000000000, __s46@0000000000000000000000000000000010000000000000000000000000000000)
    {
    ctxt t12_1, t12_2, t12_3, t12_4, t12_5, t12_6;
    info.eval->multiply_plain(ss[48], bits["0000101000010000000000000000000000000000000000001000001000000000"], t12_1);
    info.eval->multiply_plain(ss[47], bits["0000010000000000000000010000000000000000000000010000000000000000"], t12_2);
    info.eval->multiply_plain(ss[49], bits["0000000100000000000000000000000000000010000000000000000000000000"], t12_3);
    info.eval->multiply_plain(vs[4], bits["0000000000001000000001000010000000000000000000000000000000000000"], t12_4);
    info.eval->multiply_plain(ss[50], bits["0000000000000000010000000000000000010000000000000000000000000000"], t12_5);
    info.eval->multiply_plain(ss[46], bits["0000000000000000000000000000000010000000000000000000000000000000"], t12_6);
    info.eval->add_many({t12_1, t12_2, t12_3, t12_4, t12_5, t12_6}, ts[12]);
    }
    
    
    // __t13 = blend(__s23@0000100000001000000000000000000000010000000000000000000000000000, __s19@0000010000000000000000000000000000000000000000000000000000000000, __s18@0000001000000000000001000000000000000000000000000000000000000000, __s17@0000000100000000000000000000000010000000000000011000000000000000, __s20@0000000000010000000000000000000000000000000000000000000000000000, __v1@0000000000000000010000000000000000000000000000000000000000000000, __s16@0000000000000000000000010000000000000000000000000000000000000000, __s28@0000000000000000000000000010000000000000000000000000000000000000, __s24@0000000000000000000000000000000000000010000000000000000000000000, __s15@0000000000000000000000000000000000000000000000000000001000000000)
    {
    ctxt t13_1, t13_2, t13_3, t13_4, t13_5, t13_6, t13_7, t13_8, t13_9, t13_10;
    info.eval->multiply_plain(ss[23], bits["0000100000001000000000000000000000010000000000000000000000000000"], t13_1);
    info.eval->multiply_plain(ss[19], bits["0000010000000000000000000000000000000000000000000000000000000000"], t13_2);
    info.eval->multiply_plain(ss[18], bits["0000001000000000000001000000000000000000000000000000000000000000"], t13_3);
    info.eval->multiply_plain(ss[17], bits["0000000100000000000000000000000010000000000000011000000000000000"], t13_4);
    info.eval->multiply_plain(ss[20], bits["0000000000010000000000000000000000000000000000000000000000000000"], t13_5);
    info.eval->multiply_plain(vs[1], bits["0000000000000000010000000000000000000000000000000000000000000000"], t13_6);
    info.eval->multiply_plain(ss[16], bits["0000000000000000000000010000000000000000000000000000000000000000"], t13_7);
    info.eval->multiply_plain(ss[28], bits["0000000000000000000000000010000000000000000000000000000000000000"], t13_8);
    info.eval->multiply_plain(ss[24], bits["0000000000000000000000000000000000000010000000000000000000000000"], t13_9);
    info.eval->multiply_plain(ss[15], bits["0000000000000000000000000000000000000000000000000000001000000000"], t13_10);
    info.eval->add_many({t13_1, t13_2, t13_3, t13_4, t13_5, t13_6, t13_7, t13_8, t13_9, t13_10}, ts[13]);
    }
    
    info.eval->add(ts[12], ts[13], vs[5]); // __v5 = __t12 + __t13
    return vs[5];
}
    