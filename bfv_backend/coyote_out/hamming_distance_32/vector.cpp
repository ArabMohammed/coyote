
# include <vector.hpp>

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "0000000010100000000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000100000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000100000000001000000000000000000000000000100", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000001000000000000", info);
    add_bitstring(bits, "0001010000000000010000000000000000000000000010000000000001000000", info);
    add_bitstring(bits, "0000000000000000000000000000000001100000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000001000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000100000000000000000000000001000000001000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000100000000000000000", info);
    add_bitstring(bits, "0000000000000000000001000000100000000010000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000100000000000000000001000000", info);
    add_bitstring(bits, "0000000000000001000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000100000000000000000000000010000010000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000100001000000000001000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000110000000000000000001000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000100000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0001000000000000000000000100000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000010000000000000001000000000000", info);
    add_bitstring(bits, "0000000001000000000000000100000000000000000000000100000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000001000000100000100000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000010000000000000000", info);
    add_bitstring(bits, "0000000000000000000100000000000000000000010000000100000100000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000010000100000000010", info);
    add_bitstring(bits, "0000000000000000000000000000010000000000000001000000000000000000", info);
    add_bitstring(bits, "0010000000100000000000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000001000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000001", info);
    add_bitstring(bits, "0000000000011000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000001010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000001100010000000000000000001000000000", info);
    add_bitstring(bits, "0100000000000000100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000100000000000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000001000000000001000000000000000000000000000000000001000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000100000000000000000000000000", info);
    add_bitstring(bits, "1100000001001000000001100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000100000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000010001000000010000000000000000010000000010000000000000000", info);
    add_bitstring(bits, "0000000000000000000000001000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000110000000000000000001000000000001100010000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000001000000000000000000000", info);
    add_bitstring(bits, "0000000000000010000000000000000000000000000000000000010000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000100000", info);
    add_bitstring(bits, "0000000010000000000000000000000000000010000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000100000000000000", info);
    add_bitstring(bits, "0000000000010000000000000000000000000000000000000000000000000100", info);
    add_bitstring(bits, "0000000000000000000000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000010000000001000010000000000000000", info);
    add_bitstring(bits, "0000000001000001000100100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000010000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000010000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000101000000000000000000000000000000000001000000000000000000", info);
    add_bitstring(bits, "0000000000000000000010001001000000000001100000000000000000100000", info);
    add_bitstring(bits, "0000001000000001000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000100010000010000000000000000000010000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000010000000000000000000001000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000010000000000000000000", info);
    add_bitstring(bits, "1000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000010000000000000000000000000010000000000010000000000000", info);
    add_bitstring(bits, "0100000000000000000000000000000000000000000000000000000010000000", info);
    add_bitstring(bits, "0100000000000000000000000000000010000000000000100000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000100000000110000000000100000000", info);
    add_bitstring(bits, "0000000000010000000000000010000000000100000000000000000000000000", info);
    add_bitstring(bits, "0000000000000100001000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000001000000000000000001000010", info);
    add_bitstring(bits, "1001000000000000000000000000000010000000010000000000000000000000", info);
    add_bitstring(bits, "0000010000000000000000000000000000000000000000000000100000000000", info);
    add_bitstring(bits, "0000000010000000000000000000000000100000000000000110000000000000", info);
    add_bitstring(bits, "0000000000000000000000000001000000000000100000001000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000001000000010000000000000000000", info);
    add_bitstring(bits, "1000000000000000000001000000000000000000010000000000000000000000", info);
    add_bitstring(bits, "0000000000000010000001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000100000000000", info);
    add_bitstring(bits, "0000010000001000110000000000000000000000000000001000000000001000", info);
    add_bitstring(bits, "0000000000000001000000000000000000001000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000010000000000000000000000000000100000000000000000000", info);
    add_bitstring(bits, "0000001000000000000100000000100000000100000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000010000000000000", info);
    add_bitstring(bits, "0000000000000000000000001000010001000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000010001", info);
    add_bitstring(bits, "0010000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000100000000000000000000000000000000000000010000000000000", info);
    add_bitstring(bits, "0000000100100000100000000000000000000001000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000100000010010100000", info);
    add_bitstring(bits, "0000000000000000000000000000010110000000000000000000000000000000", info);
    add_bitstring(bits, "0000000010000000000000000000000000000000000100000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000010100000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(10);
    ts[0] = encrypt_inputinfo);
    ts[1] = encrypt_input("001111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111100111111111111111111111111111111111111111111111111100111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111110001111111111111111111111110111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000111111111111111111111111111111111111111111111111110111111111111111111111111100000011111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111110011111111111111111111111110000000", info);
    ts[6] = encrypt_input("0001110110111001111000100010010101111011001010000111100001101100", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[6];
    ctxt ss[66];

    vs[0] = ts[0];
    info.eval->rotate_rows(vs[0], -6, gk, ss[0]); // __s0 = __v0 >> 6
    info.eval->rotate_rows(vs[0], -16, gk, ss[1]); // __s1 = __v0 >> 16
    info.eval->rotate_rows(vs[0], -62, gk, ss[2]); // __s2 = __v0 >> 62
    info.eval->rotate_rows(vs[0], -1, gk, ss[3]); // __s3 = __v0 >> 1
    info.eval->rotate_rows(vs[0], -53, gk, ss[4]); // __s4 = __v0 >> 53
    info.eval->rotate_rows(vs[0], -12, gk, ss[5]); // __s5 = __v0 >> 12
    info.eval->rotate_rows(vs[0], -44, gk, ss[6]); // __s6 = __v0 >> 44
    info.eval->rotate_rows(vs[0], -45, gk, ss[7]); // __s7 = __v0 >> 45
    info.eval->rotate_rows(vs[0], -5, gk, ss[8]); // __s8 = __v0 >> 5
    info.eval->rotate_rows(vs[0], -20, gk, ss[9]); // __s9 = __v0 >> 20
    info.eval->rotate_rows(vs[0], -10, gk, ss[10]); // __s10 = __v0 >> 10
    info.eval->rotate_rows(vs[0], -33, gk, ss[11]); // __s11 = __v0 >> 33
    info.eval->rotate_rows(vs[0], -47, gk, ss[12]); // __s12 = __v0 >> 47
    info.eval->rotate_rows(vs[0], -63, gk, ss[13]); // __s13 = __v0 >> 63
    vs[1] = ts[1];
    info.eval->rotate_rows(vs[1], -20, gk, ss[14]); // __s14 = __v1 >> 20
    info.eval->rotate_rows(vs[1], -2, gk, ss[15]); // __s15 = __v1 >> 2
    info.eval->rotate_rows(vs[1], -62, gk, ss[16]); // __s16 = __v1 >> 62
    info.eval->rotate_rows(vs[1], -7, gk, ss[17]); // __s17 = __v1 >> 7
    info.eval->rotate_rows(vs[1], -8, gk, ss[18]); // __s18 = __v1 >> 8
    info.eval->rotate_rows(vs[1], -5, gk, ss[19]); // __s19 = __v1 >> 5
    info.eval->rotate_rows(vs[1], -24, gk, ss[20]); // __s20 = __v1 >> 24
    info.eval->rotate_rows(vs[1], -63, gk, ss[21]); // __s21 = __v1 >> 63
    info.eval->rotate_rows(vs[1], -50, gk, ss[22]); // __s22 = __v1 >> 50
    info.eval->rotate_rows(vs[1], -13, gk, ss[23]); // __s23 = __v1 >> 13
    info.eval->rotate_rows(vs[1], -56, gk, ss[24]); // __s24 = __v1 >> 56
    info.eval->rotate_rows(vs[1], -4, gk, ss[25]); // __s25 = __v1 >> 4
    info.eval->rotate_rows(vs[1], -52, gk, ss[26]); // __s26 = __v1 >> 52
    info.eval->rotate_rows(vs[1], -6, gk, ss[27]); // __s27 = __v1 >> 6
    info.eval->rotate_rows(vs[1], -12, gk, ss[28]); // __s28 = __v1 >> 12
    
    // __t2 = blend(__v0@0100000000000000000000000000000000000000000000000000000010000000, __s6@0010000000000000000000000000000000000000000000000000000000000000, __s2@0000010000001000110000000000000000000000000000001000000000001000, __s11@0000001000000001000000000000000000000000000000000000000000000000, __s7@0000000010100000000100000000000000000000000000000000000000000000, __s3@0000000000000010000000000000000000000000000000000000010000000000, __s1@0000000000000000000010001001000000000001100000000000000000100000, __s4@0000000000000000000001000000100000000010000000000000000000000000, __s12@0000000000000000000000000010000000000000000000000000000000000000, __s0@0000000000000000000000000000000000000100000000000000000001000000, __s10@0000000000000000000000000000000000000000000000100000000000000000, __s13@0000000000000000000000000000000000000000000000010000100000000010)
    {
    ctxt t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8, t2_9, t2_10, t2_11, t2_12;
    info.eval->multiply_plain(vs[0], bits["0100000000000000000000000000000000000000000000000000000010000000"], t2_1);
    info.eval->multiply_plain(ss[6], bits["0010000000000000000000000000000000000000000000000000000000000000"], t2_2);
    info.eval->multiply_plain(ss[2], bits["0000010000001000110000000000000000000000000000001000000000001000"], t2_3);
    info.eval->multiply_plain(ss[11], bits["0000001000000001000000000000000000000000000000000000000000000000"], t2_4);
    info.eval->multiply_plain(ss[7], bits["0000000010100000000100000000000000000000000000000000000000000000"], t2_5);
    info.eval->multiply_plain(ss[3], bits["0000000000000010000000000000000000000000000000000000010000000000"], t2_6);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000010001001000000000001100000000000000000100000"], t2_7);
    info.eval->multiply_plain(ss[4], bits["0000000000000000000001000000100000000010000000000000000000000000"], t2_8);
    info.eval->multiply_plain(ss[12], bits["0000000000000000000000000010000000000000000000000000000000000000"], t2_9);
    info.eval->multiply_plain(ss[0], bits["0000000000000000000000000000000000000100000000000000000001000000"], t2_10);
    info.eval->multiply_plain(ss[10], bits["0000000000000000000000000000000000000000000000100000000000000000"], t2_11);
    info.eval->multiply_plain(ss[13], bits["0000000000000000000000000000000000000000000000010000100000000010"], t2_12);
    info.eval->add_many({t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8, t2_9, t2_10, t2_11, t2_12}, ts[2]);
    }
    
    
    // __t3 = blend(__s22@0100000000000000100000000000000000000000000000000000000000000000, __v1@0010000000100000000000000010000000000000000000000000000000000000, __s15@0000010000000000000000000000000000000000000000000000100000000000, __s26@0000001000000000000100000000100000000100000000000000000000000000, __s21@0000000010000000000000000000000000000010000000000000000000000000, __s17@0000000000001000000000001000000000000000000000000000000000001000, __s18@0000000000000010000001000000000000000000000000000000000000000000, __s24@0000000000000001010000000000000000000000000000000000000000000000, __s25@0000000000000000000010000000000000000000000000000000000000000000, __s23@0000000000000000000000000001000000000000100000001000000000000000, __s27@0000000000000000000000000000000000000001000000000000000001000010, __s20@0000000000000000000000000000000000000000000000100000010010100000, __s19@0000000000000000000000000000000000000000000000010000000000000000)
    {
    ctxt t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11, t3_12, t3_13;
    info.eval->multiply_plain(ss[22], bits["0100000000000000100000000000000000000000000000000000000000000000"], t3_1);
    info.eval->multiply_plain(vs[1], bits["0010000000100000000000000010000000000000000000000000000000000000"], t3_2);
    info.eval->multiply_plain(ss[15], bits["0000010000000000000000000000000000000000000000000000100000000000"], t3_3);
    info.eval->multiply_plain(ss[26], bits["0000001000000000000100000000100000000100000000000000000000000000"], t3_4);
    info.eval->multiply_plain(ss[21], bits["0000000010000000000000000000000000000010000000000000000000000000"], t3_5);
    info.eval->multiply_plain(ss[17], bits["0000000000001000000000001000000000000000000000000000000000001000"], t3_6);
    info.eval->multiply_plain(ss[18], bits["0000000000000010000001000000000000000000000000000000000000000000"], t3_7);
    info.eval->multiply_plain(ss[24], bits["0000000000000001010000000000000000000000000000000000000000000000"], t3_8);
    info.eval->multiply_plain(ss[25], bits["0000000000000000000010000000000000000000000000000000000000000000"], t3_9);
    info.eval->multiply_plain(ss[23], bits["0000000000000000000000000001000000000000100000001000000000000000"], t3_10);
    info.eval->multiply_plain(ss[27], bits["0000000000000000000000000000000000000001000000000000000001000010"], t3_11);
    info.eval->multiply_plain(ss[20], bits["0000000000000000000000000000000000000000000000100000010010100000"], t3_12);
    info.eval->multiply_plain(ss[19], bits["0000000000000000000000000000000000000000000000010000000000000000"], t3_13);
    info.eval->add_many({t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11, t3_12, t3_13}, ts[3]);
    }
    
    info.eval->add(ts[2], ts[3], vs[2]); // __v2 = __t2 + __t3
    info.eval->rotate_rows(vs[2], -9, gk, ss[29]); // __s29 = __v2 >> 9
    info.eval->rotate_rows(vs[2], -6, gk, ss[30]); // __s30 = __v2 >> 6
    info.eval->rotate_rows(vs[2], -59, gk, ss[31]); // __s31 = __v2 >> 59
    info.eval->rotate_rows(vs[2], -5, gk, ss[32]); // __s32 = __v2 >> 5
    info.eval->rotate_rows(vs[2], -17, gk, ss[33]); // __s33 = __v2 >> 17
    info.eval->rotate_rows(vs[2], -3, gk, ss[34]); // __s34 = __v2 >> 3
    info.eval->rotate_rows(vs[2], -58, gk, ss[35]); // __s35 = __v2 >> 58
    info.eval->rotate_rows(vs[2], -54, gk, ss[36]); // __s36 = __v2 >> 54
    info.eval->rotate_rows(vs[2], -18, gk, ss[37]); // __s37 = __v2 >> 18
    info.eval->rotate_rows(vs[2], -61, gk, ss[38]); // __s38 = __v2 >> 61
    info.eval->rotate_rows(vs[2], -49, gk, ss[39]); // __s39 = __v2 >> 49
    info.eval->rotate_rows(vs[2], -37, gk, ss[40]); // __s40 = __v2 >> 37
    info.eval->rotate_rows(vs[2], -31, gk, ss[41]); // __s41 = __v2 >> 31
    info.eval->rotate_rows(vs[2], -50, gk, ss[42]); // __s42 = __v2 >> 50
    
    // __t4 = blend(__s4@1001000000000000000000000000000010000000010000000000000000000000, __v0@0000100000000000000000100000000000000000000000000000000000000000, __s0@0000000100000000000000000000000001000000001000000000000000000000, __s3@0000000001000000000000000100000000000000000000000100000000000000, __s2@0000000000010000000000000000000000000000000000000000000000000100, __s7@0000000000000100001000000000000000000000000000000000000000000000, __s1@0000000000000000000000010000000000000000000000000000000000000000, __s12@0000000000000000000000000000010000000000000001000000000000000000, __s5@0000000000000000000000000000001100010000000000000000001000000000, __s8@0000000000000000000000000000000000100000000110000000000100000000, __s6@0000000000000000000000000000000000001000000000000000000000000000, __s13@0000000000000000000000000000000000000000000000000010000000000000, __s9@0000000000000000000000000000000000000000000000000001000000000000, __s10@0000000000000000000000000000000000000000000000000000000000010001)
    {
    ctxt t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10, t4_11, t4_12, t4_13, t4_14;
    info.eval->multiply_plain(ss[4], bits["1001000000000000000000000000000010000000010000000000000000000000"], t4_1);
    info.eval->multiply_plain(vs[0], bits["0000100000000000000000100000000000000000000000000000000000000000"], t4_2);
    info.eval->multiply_plain(ss[0], bits["0000000100000000000000000000000001000000001000000000000000000000"], t4_3);
    info.eval->multiply_plain(ss[3], bits["0000000001000000000000000100000000000000000000000100000000000000"], t4_4);
    info.eval->multiply_plain(ss[2], bits["0000000000010000000000000000000000000000000000000000000000000100"], t4_5);
    info.eval->multiply_plain(ss[7], bits["0000000000000100001000000000000000000000000000000000000000000000"], t4_6);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000000010000000000000000000000000000000000000000"], t4_7);
    info.eval->multiply_plain(ss[12], bits["0000000000000000000000000000010000000000000001000000000000000000"], t4_8);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000000001100010000000000000000001000000000"], t4_9);
    info.eval->multiply_plain(ss[8], bits["0000000000000000000000000000000000100000000110000000000100000000"], t4_10);
    info.eval->multiply_plain(ss[6], bits["0000000000000000000000000000000000001000000000000000000000000000"], t4_11);
    info.eval->multiply_plain(ss[13], bits["0000000000000000000000000000000000000000000000000010000000000000"], t4_12);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000000000000000000000000000000000001000000000000"], t4_13);
    info.eval->multiply_plain(ss[10], bits["0000000000000000000000000000000000000000000000000000000000010001"], t4_14);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10, t4_11, t4_12, t4_13, t4_14}, ts[4]);
    }
    
    
    // __t5 = blend(__s22@1000000000000000000000000000000000000000000000000000000000000000, __s16@0001000000000000000000000100000000000000000000000000000000000000, __s26@0000100000000000000000000000000000000000000000000000000000000000, __s24@0000000101000000000000000000000000000000000001000000000000000000, __s19@0000000000010000000000000000000000000000000000000000000000000100, __v1@0000000000000100001000000000001000000000000000000000000000000000, __s14@0000000000000000000000110000000000000000001000000000001100010000, __s27@0000000000000000000000000000010110000000000000000000000000000000, __s20@0000000000000000000000000000000001100000000000000000000000000000, __s15@0000000000000000000000000000000000010000000000000001000000000000, __s25@0000000000000000000000000000000000001000000010000000000000000000, __s28@0000000000000000000000000000000000000000010100000000000000000000, __s17@0000000000000000000000000000000000000000000000000100000000000000, __s21@0000000000000000000000000000000000000000000000000010000000000000, __s23@0000000000000000000000000000000000000000000000000000000000000001)
    {
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9, t5_10, t5_11, t5_12, t5_13, t5_14, t5_15;
    info.eval->multiply_plain(ss[22], bits["1000000000000000000000000000000000000000000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[16], bits["0001000000000000000000000100000000000000000000000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[26], bits["0000100000000000000000000000000000000000000000000000000000000000"], t5_3);
    info.eval->multiply_plain(ss[24], bits["0000000101000000000000000000000000000000000001000000000000000000"], t5_4);
    info.eval->multiply_plain(ss[19], bits["0000000000010000000000000000000000000000000000000000000000000100"], t5_5);
    info.eval->multiply_plain(vs[1], bits["0000000000000100001000000000001000000000000000000000000000000000"], t5_6);
    info.eval->multiply_plain(ss[14], bits["0000000000000000000000110000000000000000001000000000001100010000"], t5_7);
    info.eval->multiply_plain(ss[27], bits["0000000000000000000000000000010110000000000000000000000000000000"], t5_8);
    info.eval->multiply_plain(ss[20], bits["0000000000000000000000000000000001100000000000000000000000000000"], t5_9);
    info.eval->multiply_plain(ss[15], bits["0000000000000000000000000000000000010000000000000001000000000000"], t5_10);
    info.eval->multiply_plain(ss[25], bits["0000000000000000000000000000000000001000000010000000000000000000"], t5_11);
    info.eval->multiply_plain(ss[28], bits["0000000000000000000000000000000000000000010100000000000000000000"], t5_12);
    info.eval->multiply_plain(ss[17], bits["0000000000000000000000000000000000000000000000000100000000000000"], t5_13);
    info.eval->multiply_plain(ss[21], bits["0000000000000000000000000000000000000000000000000010000000000000"], t5_14);
    info.eval->multiply_plain(ss[23], bits["0000000000000000000000000000000000000000000000000000000000000001"], t5_15);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9, t5_10, t5_11, t5_12, t5_13, t5_14, t5_15}, ts[5]);
    }
    
    info.eval->multiply(ts[4], ts[5], vs[3]); // __v3 = __t4 * __t5
    info.eval->relinearize_inplace(vs[3], rk);
    info.eval->rotate_rows(vs[3], -18, gk, ss[43]); // __s43 = __v3 >> 18
    info.eval->rotate_rows(vs[3], -5, gk, ss[44]); // __s44 = __v3 >> 5
    info.eval->rotate_rows(vs[3], -3, gk, ss[45]); // __s45 = __v3 >> 3
    info.eval->rotate_rows(vs[3], -58, gk, ss[46]); // __s46 = __v3 >> 58
    info.eval->rotate_rows(vs[3], -50, gk, ss[47]); // __s47 = __v3 >> 50
    info.eval->rotate_rows(vs[3], -17, gk, ss[48]); // __s48 = __v3 >> 17
    info.eval->rotate_rows(vs[3], -49, gk, ss[49]); // __s49 = __v3 >> 49
    info.eval->rotate_rows(vs[3], -59, gk, ss[50]); // __s50 = __v3 >> 59
    info.eval->rotate_rows(vs[3], -6, gk, ss[51]); // __s51 = __v3 >> 6
    info.eval->rotate_rows(vs[3], -41, gk, ss[52]); // __s52 = __v3 >> 41
    info.eval->rotate_rows(vs[3], -54, gk, ss[53]); // __s53 = __v3 >> 54
    info.eval->rotate_rows(vs[3], -9, gk, ss[54]); // __s54 = __v3 >> 9
    info.eval->rotate_rows(vs[3], -61, gk, ss[55]); // __s55 = __v3 >> 61
    info.eval->rotate_rows(vs[3], -63, gk, ss[56]); // __s56 = __v3 >> 63
    
    // __t7 = blend(__s46@0001010000000000010000000000000000000000000010000000000001000000, __s47@0000100000000000000000000000010000010000000000000000000000000000, __s45@0000000100100000100000000000000000000001000000000000000000000000, __s44@0000000010000000000000000000000000100000000000000110000000000000, __s52@0000000000011000000000000000000000000000000000000000000000000000, __s49@0000000000000001000000000000000000001000000000000000000000000000, __s43@0000000000000000001000000000000000000000000000000000000000000000, __v3@0000000000000000000000100000000001000000000000000000000000000100, __s50@0000000000000000000000000010000000000000000000000000000000000000, __s53@0000000000000000000000000000000100000000000000000000000000000000, __s51@0000000000000000000000000000000000000010000000000000000000001000, __s48@0000000000000000000000000000000000000000001000000000000000000000, __s54@0000000000000000000000000000000000000000000000000001000000000000, __s55@0000000000000000000000000000000000000000000000000000100000000000, __s56@0000000000000000000000000000000000000000000000000000000000100000)
    {
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10, t7_11, t7_12, t7_13, t7_14, t7_15;
    info.eval->multiply_plain(ss[46], bits["0001010000000000010000000000000000000000000010000000000001000000"], t7_1);
    info.eval->multiply_plain(ss[47], bits["0000100000000000000000000000010000010000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[45], bits["0000000100100000100000000000000000000001000000000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[44], bits["0000000010000000000000000000000000100000000000000110000000000000"], t7_4);
    info.eval->multiply_plain(ss[52], bits["0000000000011000000000000000000000000000000000000000000000000000"], t7_5);
    info.eval->multiply_plain(ss[49], bits["0000000000000001000000000000000000001000000000000000000000000000"], t7_6);
    info.eval->multiply_plain(ss[43], bits["0000000000000000001000000000000000000000000000000000000000000000"], t7_7);
    info.eval->multiply_plain(vs[3], bits["0000000000000000000000100000000001000000000000000000000000000100"], t7_8);
    info.eval->multiply_plain(ss[50], bits["0000000000000000000000000010000000000000000000000000000000000000"], t7_9);
    info.eval->multiply_plain(ss[53], bits["0000000000000000000000000000000100000000000000000000000000000000"], t7_10);
    info.eval->multiply_plain(ss[51], bits["0000000000000000000000000000000000000010000000000000000000001000"], t7_11);
    info.eval->multiply_plain(ss[48], bits["0000000000000000000000000000000000000000001000000000000000000000"], t7_12);
    info.eval->multiply_plain(ss[54], bits["0000000000000000000000000000000000000000000000000001000000000000"], t7_13);
    info.eval->multiply_plain(ss[55], bits["0000000000000000000000000000000000000000000000000000100000000000"], t7_14);
    info.eval->multiply_plain(ss[56], bits["0000000000000000000000000000000000000000000000000000000000100000"], t7_15);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10, t7_11, t7_12, t7_13, t7_14, t7_15}, ts[7]);
    }
    
    info.eval->multiply(ts[6], ts[7], vs[4]); // __v4 = __t6 * __t7
    info.eval->relinearize_inplace(vs[4], rk);
    info.eval->rotate_rows(vs[4], -21, gk, ss[57]); // __s57 = __v4 >> 21
    info.eval->rotate_rows(vs[4], -61, gk, ss[58]); // __s58 = __v4 >> 61
    info.eval->rotate_rows(vs[4], -4, gk, ss[59]); // __s59 = __v4 >> 4
    info.eval->rotate_rows(vs[4], -7, gk, ss[60]); // __s60 = __v4 >> 7
    info.eval->rotate_rows(vs[4], -59, gk, ss[61]); // __s61 = __v4 >> 59
    info.eval->rotate_rows(vs[4], -47, gk, ss[62]); // __s62 = __v4 >> 47
    info.eval->rotate_rows(vs[4], -50, gk, ss[63]); // __s63 = __v4 >> 50
    info.eval->rotate_rows(vs[4], -48, gk, ss[64]); // __s64 = __v4 >> 48
    info.eval->rotate_rows(vs[4], -62, gk, ss[65]); // __s65 = __v4 >> 62
    
    // __t8 = blend(__s31@1100000001001000000001100000000000000000000000000000000000000000, __s30@0000000010000000000000000000000000000000000100000000000000000000, __s29@0000000000100000010000000000000000000000000000000000000000000000, __s36@0000000000010000000000000000000000000010000000000010000000000000, __s35@0000000000000110000000000000000001000000000000000000000000000000, __s32@0000000000000001000010000000000000000000000000000000000000000000, __s34@0000000000000000000100000000000000000000010000000100000100000000, __s41@0000000000000000000000010000000000000000000000000000000000000000, __v2@0000000000000000000000001000000000000000000000000000000000000000, __s40@0000000000000000000000000010000000000000000000000000000000000000, __s33@0000000000000000000000000000010000000000000000000000000000000000, __s39@0000000000000000000000000000000010000000001000010000000000000000, __s38@0000000000000000000000000000000000000100000000000000000000000000, __s42@0000000000000000000000000000000000000000000010000000000000000000, __s37@0000000000000000000000000000000000000000000000100000000000000000)
    {
    ctxt t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9, t8_10, t8_11, t8_12, t8_13, t8_14, t8_15;
    info.eval->multiply_plain(ss[31], bits["1100000001001000000001100000000000000000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[30], bits["0000000010000000000000000000000000000000000100000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[29], bits["0000000000100000010000000000000000000000000000000000000000000000"], t8_3);
    info.eval->multiply_plain(ss[36], bits["0000000000010000000000000000000000000010000000000010000000000000"], t8_4);
    info.eval->multiply_plain(ss[35], bits["0000000000000110000000000000000001000000000000000000000000000000"], t8_5);
    info.eval->multiply_plain(ss[32], bits["0000000000000001000010000000000000000000000000000000000000000000"], t8_6);
    info.eval->multiply_plain(ss[34], bits["0000000000000000000100000000000000000000010000000100000100000000"], t8_7);
    info.eval->multiply_plain(ss[41], bits["0000000000000000000000010000000000000000000000000000000000000000"], t8_8);
    info.eval->multiply_plain(vs[2], bits["0000000000000000000000001000000000000000000000000000000000000000"], t8_9);
    info.eval->multiply_plain(ss[40], bits["0000000000000000000000000010000000000000000000000000000000000000"], t8_10);
    info.eval->multiply_plain(ss[33], bits["0000000000000000000000000000010000000000000000000000000000000000"], t8_11);
    info.eval->multiply_plain(ss[39], bits["0000000000000000000000000000000010000000001000010000000000000000"], t8_12);
    info.eval->multiply_plain(ss[38], bits["0000000000000000000000000000000000000100000000000000000000000000"], t8_13);
    info.eval->multiply_plain(ss[42], bits["0000000000000000000000000000000000000000000010000000000000000000"], t8_14);
    info.eval->multiply_plain(ss[37], bits["0000000000000000000000000000000000000000000000100000000000000000"], t8_15);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9, t8_10, t8_11, t8_12, t8_13, t8_14, t8_15}, ts[8]);
    }
    
    
    // __t9 = blend(__s62@1000000000000000000001000000000000000000010000000000000000000000, __s58@0100000000000000000000000000000010000000000000100000000000000000, __s63@0000000010001000000010000000000000000010000000010000000000000000, __s59@0000000001000001000100100000000000000000000000000000000000000000, __v4@0000000000100000000000000000000000000000000000000010000000000000, __s61@0000000000010000000000000010000000000100000000000000000000000000, __s64@0000000000000100010000010000000000000000000010000000000000000000, __s60@0000000000000010000000000000000000000000000100000000000000000000, __s57@0000000000000000000000001000010001000000000000000000000000000000, __s65@0000000000000000000000000000000000000000001000000100000100000000)
    {
    ctxt t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7, t9_8, t9_9, t9_10;
    info.eval->multiply_plain(ss[62], bits["1000000000000000000001000000000000000000010000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[58], bits["0100000000000000000000000000000010000000000000100000000000000000"], t9_2);
    info.eval->multiply_plain(ss[63], bits["0000000010001000000010000000000000000010000000010000000000000000"], t9_3);
    info.eval->multiply_plain(ss[59], bits["0000000001000001000100100000000000000000000000000000000000000000"], t9_4);
    info.eval->multiply_plain(vs[4], bits["0000000000100000000000000000000000000000000000000010000000000000"], t9_5);
    info.eval->multiply_plain(ss[61], bits["0000000000010000000000000010000000000100000000000000000000000000"], t9_6);
    info.eval->multiply_plain(ss[64], bits["0000000000000100010000010000000000000000000010000000000000000000"], t9_7);
    info.eval->multiply_plain(ss[60], bits["0000000000000010000000000000000000000000000100000000000000000000"], t9_8);
    info.eval->multiply_plain(ss[57], bits["0000000000000000000000001000010001000000000000000000000000000000"], t9_9);
    info.eval->multiply_plain(ss[65], bits["0000000000000000000000000000000000000000001000000100000100000000"], t9_10);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7, t9_8, t9_9, t9_10}, ts[9]);
    }
    
    info.eval->sub(ts[8], ts[9], vs[5]); // __v5 = __t8 - __t9
    return vs[5];
}
    