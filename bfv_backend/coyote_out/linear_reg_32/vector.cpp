
# include <vector.hpp>

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "00000000000000000000000000000000100001000000000001000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000100000000000000000000010000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000011000000000100000000000010000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000010100000000000000000000000000000000100100000100000000000000000011", info);
    add_bitstring(bits, "01000000000010000000000000000001000000000000000000000000000000000000100000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000100010000000000000000000000100000000010000000000001001000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000001000000010000000000", info);
    add_bitstring(bits, "00000000000000000000010000001000000000000000000100000000000000000000100000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000010000010000000000000000001000000000000000000000000010000000000000000000010", info);
    add_bitstring(bits, "00000000100000000000000000000000001100000000000000000000000000000000000001000000000000000000001", info);
    add_bitstring(bits, "00000000000000000000010000000000000100100000000000000000000000010000000010000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000100000000000100000000000000100100000100000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000", info);
    add_bitstring(bits, "00000000000000100000000000000000000000000000010010000000000000000000000100000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000010000000000000000000000000000000000000000000000000000010000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000010000000000000000000000000000001000000000000001000", info);
    add_bitstring(bits, "00000000000000000000000000000000001000000000000000001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000010110000000000000000000001000000000000110000000000000000000", info);
    add_bitstring(bits, "00000000010010000000000000000000010000000000000000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000010000000000000000000000000000010000000000000000000000000000000000000000000010000000000", info);
    add_bitstring(bits, "00000000000000000010100010000101000000000000000000000000000010000000000000000000000000000001000", info);
    add_bitstring(bits, "00000000000000000000000001000100000000000000000000000000000000000000000000000000000000010000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000010000000000000000000000000000010000000001000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000100000001000000000000000000000000100000000000000", info);
    add_bitstring(bits, "00000000000000010000000001000000000000000100000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000010000000000000000000000000000000000000000010100000011010000000000000110000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000010000000000000000000000000000000000000000000010000000000", info);
    add_bitstring(bits, "00000000000000000000000000000100000000000000010010010000000000000001000000001000100000000000000", info);
    add_bitstring(bits, "00000000001000001000000101001000000000001001000000000000000000000000100000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000100010000000000010000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000001000000000001000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000010000000000000000000000000000010000000000000001000000000000000000", info);
    add_bitstring(bits, "00000000000010000001000000000100000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000100000001000000000000000000000000000", info);
    add_bitstring(bits, "00000000010000100010000000000000000000000000010000000000000001000000010000001000000000000000000", info);
    add_bitstring(bits, "01000010000000000000000000000000000000000000000000000000000000010000010000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000010000000100000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000100000000000000000010000100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000001000000000000000100000000000000000000000000000001000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000010010001000000101000000000000010000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000001000000000000001000000000000000000000000100000000000000000100000100000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000100010000100000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000010000100000001000000000000000000000001000000000000000000100000100000000000", info);
    add_bitstring(bits, "00000100100000000000000000000000000001000000001001000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000100000000010000000000000000000000000000000000001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000010000000000000000010010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000100000000000000000100000000000000000000000000000000000000010000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(10);
    ts[0] = encrypt_inputinfo);
    ts[1] = encrypt_inputinfo);
    ts[2] = encrypt_inputinfo);
    ts[3] = encrypt_inputinfo);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[8];
    ctxt ss[44];

    vs[0] = ts[0];
    info.eval->rotate_rows(vs[0], -34, gk, ss[0]); // __s0 = __v0 >> 34
    info.eval->rotate_rows(vs[0], -25, gk, ss[1]); // __s1 = __v0 >> 25
    info.eval->rotate_rows(vs[0], -14, gk, ss[2]); // __s2 = __v0 >> 14
    info.eval->rotate_rows(vs[0], -78, gk, ss[3]); // __s3 = __v0 >> 78
    info.eval->rotate_rows(vs[0], -79, gk, ss[4]); // __s4 = __v0 >> 79
    info.eval->rotate_rows(vs[0], -50, gk, ss[5]); // __s5 = __v0 >> 50
    info.eval->rotate_rows(vs[0], -77, gk, ss[6]); // __s6 = __v0 >> 77
    vs[1] = ts[1];
    info.eval->rotate_rows(vs[1], -25, gk, ss[7]); // __s7 = __v1 >> 25
    info.eval->rotate_rows(vs[1], -29, gk, ss[8]); // __s8 = __v1 >> 29
    info.eval->rotate_rows(vs[1], -39, gk, ss[9]); // __s9 = __v1 >> 39
    info.eval->rotate_rows(vs[1], -80, gk, ss[10]); // __s10 = __v1 >> 80
    info.eval->rotate_rows(vs[1], -72, gk, ss[11]); // __s11 = __v1 >> 72
    info.eval->rotate_rows(vs[1], -27, gk, ss[12]); // __s12 = __v1 >> 27
    info.eval->rotate_rows(vs[1], -53, gk, ss[13]); // __s13 = __v1 >> 53
    vs[2] = ts[2];
    info.eval->rotate_rows(vs[2], -6, gk, ss[14]); // __s14 = __v2 >> 6
    info.eval->rotate_rows(vs[2], -25, gk, ss[15]); // __s15 = __v2 >> 25
    info.eval->rotate_rows(vs[2], -94, gk, ss[16]); // __s16 = __v2 >> 94
    info.eval->rotate_rows(vs[2], -14, gk, ss[17]); // __s17 = __v2 >> 14
    info.eval->rotate_rows(vs[2], -12, gk, ss[18]); // __s18 = __v2 >> 12
    info.eval->rotate_rows(vs[2], -79, gk, ss[19]); // __s19 = __v2 >> 79
    info.eval->rotate_rows(vs[2], -88, gk, ss[20]); // __s20 = __v2 >> 88
    info.eval->rotate_rows(vs[2], -84, gk, ss[21]); // __s21 = __v2 >> 84
    vs[3] = ts[3];
    info.eval->rotate_rows(vs[3], -17, gk, ss[22]); // __s22 = __v3 >> 17
    info.eval->rotate_rows(vs[3], -31, gk, ss[23]); // __s23 = __v3 >> 31
    info.eval->rotate_rows(vs[3], -45, gk, ss[24]); // __s24 = __v3 >> 45
    info.eval->rotate_rows(vs[3], -86, gk, ss[25]); // __s25 = __v3 >> 86
    info.eval->rotate_rows(vs[3], -1, gk, ss[26]); // __s26 = __v3 >> 1
    info.eval->rotate_rows(vs[3], -87, gk, ss[27]); // __s27 = __v3 >> 87
    info.eval->rotate_rows(vs[3], -56, gk, ss[28]); // __s28 = __v3 >> 56
    info.eval->rotate_rows(vs[3], -89, gk, ss[29]); // __s29 = __v3 >> 89
    
    // __t4 = blend(__s16@00000100000000010000000000000000000000000000000000001000000000000000000000000000000000000000000, __s14@00000000100000000000000000000000001100000000000000000000000000000000000001000000000000000000001, __v2@00000000000000000000010000010000000000000000001000000000000000000000000010000000000000000000010, __s19@00000000000000000000000100000000000000000010000100000000000000000000000000000000000000000000000, __s17@00000000000000000000000001000100000000000000000000000000000000000000000000000000000000010000000, __s15@00000000000000000000000000000010000000000000000000000000000010000000000000001000000000000000000, __s18@00000000000000000000000000000000100001000000000001000000000000000000000000000000000000000000000, __s21@00000000000000000000000000000000000000100000000000100000000000000100100000100000000000000000000, __s20@00000000000000000000000000000000000000000100000000000000000000010000000000000000000000000000000)
    {
    ctxt t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9;
    info.eval->multiply_plain(ss[16], bits["00000100000000010000000000000000000000000000000000001000000000000000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[14], bits["00000000100000000000000000000000001100000000000000000000000000000000000001000000000000000000001"], t4_2);
    info.eval->multiply_plain(vs[2], bits["00000000000000000000010000010000000000000000001000000000000000000000000010000000000000000000010"], t4_3);
    info.eval->multiply_plain(ss[19], bits["00000000000000000000000100000000000000000010000100000000000000000000000000000000000000000000000"], t4_4);
    info.eval->multiply_plain(ss[17], bits["00000000000000000000000001000100000000000000000000000000000000000000000000000000000000010000000"], t4_5);
    info.eval->multiply_plain(ss[15], bits["00000000000000000000000000000010000000000000000000000000000010000000000000001000000000000000000"], t4_6);
    info.eval->multiply_plain(ss[18], bits["00000000000000000000000000000000100001000000000001000000000000000000000000000000000000000000000"], t4_7);
    info.eval->multiply_plain(ss[21], bits["00000000000000000000000000000000000000100000000000100000000000000100100000100000000000000000000"], t4_8);
    info.eval->multiply_plain(ss[20], bits["00000000000000000000000000000000000000000100000000000000000000010000000000000000000000000000000"], t4_9);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9}, ts[4]);
    }
    
    
    // __t5 = blend(__s5@00000100100000000000000000000000000001000000001001000000000000000000000000000000000000000000000, __s3@00000000000000010000000001000000000000000100000000000000000000000000000000000000000000000000000, __s4@00000000000000000000010000000000000100100000000000000000000000010000000010000000000000000000000, __s2@00000000000000000000000100010000000000000000000000100000000010000000000001001000000000000000000, __v0@00000000000000000000000000000100000000000000000100000000000000000000000000000000000000010000000, __s1@00000000000000000000000000000010100000000000000000000000000000000100100000100000000000000000011, __s0@00000000000000000000000000000000001000000000000000001000000000000000000000000000000000000000000, __s6@00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000)
    {
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8;
    info.eval->multiply_plain(ss[5], bits["00000100100000000000000000000000000001000000001001000000000000000000000000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[3], bits["00000000000000010000000001000000000000000100000000000000000000000000000000000000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[4], bits["00000000000000000000010000000000000100100000000000000000000000010000000010000000000000000000000"], t5_3);
    info.eval->multiply_plain(ss[2], bits["00000000000000000000000100010000000000000000000000100000000010000000000001001000000000000000000"], t5_4);
    info.eval->multiply_plain(vs[0], bits["00000000000000000000000000000100000000000000000100000000000000000000000000000000000000010000000"], t5_5);
    info.eval->multiply_plain(ss[1], bits["00000000000000000000000000000010100000000000000000000000000000000100100000100000000000000000011"], t5_6);
    info.eval->multiply_plain(ss[0], bits["00000000000000000000000000000000001000000000000000001000000000000000000000000000000000000000000"], t5_7);
    info.eval->multiply_plain(ss[6], bits["00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000"], t5_8);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8}, ts[5]);
    }
    
    info.eval->multiply(ts[4], ts[5], vs[4]); // __v4 = __t4 * __t5
    info.eval->relinearize_inplace(vs[4], rk);
    info.eval->rotate_rows(vs[4], -4, gk, ss[30]); // __s30 = __v4 >> 4
    info.eval->rotate_rows(vs[4], -94, gk, ss[31]); // __s31 = __v4 >> 94
    info.eval->rotate_rows(vs[4], -92, gk, ss[32]); // __s32 = __v4 >> 92
    info.eval->rotate_rows(vs[4], -71, gk, ss[33]); // __s33 = __v4 >> 71
    info.eval->rotate_rows(vs[4], -1, gk, ss[34]); // __s34 = __v4 >> 1
    info.eval->rotate_rows(vs[4], -16, gk, ss[35]); // __s35 = __v4 >> 16
    info.eval->rotate_rows(vs[4], -8, gk, ss[36]); // __s36 = __v4 >> 8
    
    // __t6 = blend(__s11@01000000000010000000000000000001000000000000000000000000000000000000100000000000000000000000000, __s10@00000010000000000000000000000000000000000000000010100000011010000000000000110000000000000000000, __v1@00000000010000100010000000000000000000000000010000000000000001000000010000001000000000000000000, __s13@00000000000000000000100010000000000010000000000000000000000000000000000000000000000000000000000, __s7@00000000000000000000000000000100010000100000000000000000000000000000000000000000000000000000000, __s8@00000000000000000000000000000000000000010000000000000000000000000000000000000000000010000000000, __s9@00000000000000000000000000000000000000000000000000010000000000000000000000000000010000000001000, __s12@00000000000000000000000000000000000000000000000000000000000000010000000100000000000000000000000)
    {
    ctxt t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7, t6_8;
    info.eval->multiply_plain(ss[11], bits["01000000000010000000000000000001000000000000000000000000000000000000100000000000000000000000000"], t6_1);
    info.eval->multiply_plain(ss[10], bits["00000010000000000000000000000000000000000000000010100000011010000000000000110000000000000000000"], t6_2);
    info.eval->multiply_plain(vs[1], bits["00000000010000100010000000000000000000000000010000000000000001000000010000001000000000000000000"], t6_3);
    info.eval->multiply_plain(ss[13], bits["00000000000000000000100010000000000010000000000000000000000000000000000000000000000000000000000"], t6_4);
    info.eval->multiply_plain(ss[7], bits["00000000000000000000000000000100010000100000000000000000000000000000000000000000000000000000000"], t6_5);
    info.eval->multiply_plain(ss[8], bits["00000000000000000000000000000000000000010000000000000000000000000000000000000000000010000000000"], t6_6);
    info.eval->multiply_plain(ss[9], bits["00000000000000000000000000000000000000000000000000010000000000000000000000000000010000000001000"], t6_7);
    info.eval->multiply_plain(ss[12], bits["00000000000000000000000000000000000000000000000000000000000000010000000100000000000000000000000"], t6_8);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7, t6_8}, ts[6]);
    }
    
    
    // __t7 = blend(__s33@01000010000000000000000000000000000000000000000000000000000000010000010000000000000000000000000, __s30@00000000010010000000000000000000010000000000000000010000000000000000000000000000000000000000000, __s31@00000000000000100000000000000000000000000000010010000000000000000000000100000000000000000000000, __s32@00000000000000000010100010000101000000000000000000000000000010000000000000000000000000000001000, __s34@00000000000000000000000000000000000010110000000000000000000001000000000000110000000000000000000, __v4@00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000, __s35@00000000000000000000000000000000000000000000000000000000011000000000100000000000010000000000000, __s36@00000000000000000000000000000000000000000000000000000000000000000000000000001000000010000000000)
    {
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8;
    info.eval->multiply_plain(ss[33], bits["01000010000000000000000000000000000000000000000000000000000000010000010000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[30], bits["00000000010010000000000000000000010000000000000000010000000000000000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[31], bits["00000000000000100000000000000000000000000000010010000000000000000000000100000000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[32], bits["00000000000000000010100010000101000000000000000000000000000010000000000000000000000000000001000"], t7_4);
    info.eval->multiply_plain(ss[34], bits["00000000000000000000000000000000000010110000000000000000000001000000000000110000000000000000000"], t7_5);
    info.eval->multiply_plain(vs[4], bits["00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000"], t7_6);
    info.eval->multiply_plain(ss[35], bits["00000000000000000000000000000000000000000000000000000000011000000000100000000000010000000000000"], t7_7);
    info.eval->multiply_plain(ss[36], bits["00000000000000000000000000000000000000000000000000000000000000000000000000001000000010000000000"], t7_8);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8}, ts[7]);
    }
    
    info.eval->sub(ts[6], ts[7], vs[5]); // __v5 = __t6 - __t7
    info.eval->rotate_rows(vs[5], -20, gk, ss[37]); // __s37 = __v5 >> 20
    info.eval->rotate_rows(vs[5], -35, gk, ss[38]); // __s38 = __v5 >> 35
    info.eval->rotate_rows(vs[5], -87, gk, ss[39]); // __s39 = __v5 >> 87
    info.eval->rotate_rows(vs[5], -16, gk, ss[40]); // __s40 = __v5 >> 16
    info.eval->rotate_rows(vs[5], -75, gk, ss[41]); // __s41 = __v5 >> 75
    info.eval->rotate_rows(vs[5], -93, gk, ss[42]); // __s42 = __v5 >> 93
    info.eval->rotate_rows(vs[5], -33, gk, ss[43]); // __s43 = __v5 >> 33
    info.eval->sub(vs[5], ss[24], vs[6]); // __v6 = __v5 - __s24
    
    // __t8 = blend(__v5@00000000010000000000000000000000000000010000000000000000000000000000000000000000000010000000000, __s39@00000000001000001000000101001000000000001001000000000000000000000000100000000000000000000000000, __s43@00000000000010000001000000000100000000000000000000000000000000000000000000000000000000000000000, __s37@00000000000000000000010000100000001000000000000000000000001000000000000000000100000100000000000, __s41@00000000000000000000000000000010000000000000000010010000000000000000000000000000000000000000000, __s40@00000000000000000000000000000000000000000000010000000000000000000000000000001000000000000001000, __s38@00000000000000000000000000000000000000000000000100000001000000000000000000000000100000000000000, __s42@00000000000000000000000000000000000000000000000000000000000100000001000000000000000000000000000)
    {
    ctxt t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8;
    info.eval->multiply_plain(vs[5], bits["00000000010000000000000000000000000000010000000000000000000000000000000000000000000010000000000"], t8_1);
    info.eval->multiply_plain(ss[39], bits["00000000001000001000000101001000000000001001000000000000000000000000100000000000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[43], bits["00000000000010000001000000000100000000000000000000000000000000000000000000000000000000000000000"], t8_3);
    info.eval->multiply_plain(ss[37], bits["00000000000000000000010000100000001000000000000000000000001000000000000000000100000100000000000"], t8_4);
    info.eval->multiply_plain(ss[41], bits["00000000000000000000000000000010000000000000000010010000000000000000000000000000000000000000000"], t8_5);
    info.eval->multiply_plain(ss[40], bits["00000000000000000000000000000000000000000000010000000000000000000000000000001000000000000001000"], t8_6);
    info.eval->multiply_plain(ss[38], bits["00000000000000000000000000000000000000000000000100000001000000000000000000000000100000000000000"], t8_7);
    info.eval->multiply_plain(ss[42], bits["00000000000000000000000000000000000000000000000000000000000100000001000000000000000000000000000"], t8_8);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8}, ts[8]);
    }
    
    
    // __t9 = blend(__s28@00000000010010001000000101000000000000010000000000000000000000000000000000000000000000000000000, __s25@00000000001000000000000000100000000000000000000000000000001000000000000000000000000000000000000, __s22@00000000000000000001000000000000001000000000000000000000000100000000000000000100000100000000000, __v3@00000000000000000000010000001000000000000000000100000000000000000000100000000000000000000000000, __s27@00000000000000000000000000000100000000000000010010010000000000000001000000001000100000000000000, __s26@00000000000000000000000000000010000000000000000000000000000000000000000000000000000010000000000, __s23@00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000, __s29@00000000000000000000000000000000000000000001000000000001000000000000000000000000000000000000000, __s24@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000)
    {
    ctxt t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7, t9_8, t9_9;
    info.eval->multiply_plain(ss[28], bits["00000000010010001000000101000000000000010000000000000000000000000000000000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[25], bits["00000000001000000000000000100000000000000000000000000000001000000000000000000000000000000000000"], t9_2);
    info.eval->multiply_plain(ss[22], bits["00000000000000000001000000000000001000000000000000000000000100000000000000000100000100000000000"], t9_3);
    info.eval->multiply_plain(vs[3], bits["00000000000000000000010000001000000000000000000100000000000000000000100000000000000000000000000"], t9_4);
    info.eval->multiply_plain(ss[27], bits["00000000000000000000000000000100000000000000010010010000000000000001000000001000100000000000000"], t9_5);
    info.eval->multiply_plain(ss[26], bits["00000000000000000000000000000010000000000000000000000000000000000000000000000000000010000000000"], t9_6);
    info.eval->multiply_plain(ss[23], bits["00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000"], t9_7);
    info.eval->multiply_plain(ss[29], bits["00000000000000000000000000000000000000000001000000000001000000000000000000000000000000000000000"], t9_8);
    info.eval->multiply_plain(ss[24], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000"], t9_9);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7, t9_8, t9_9}, ts[9]);
    }
    
    info.eval->sub(ts[8], ts[9], vs[7]); // __v7 = __t8 - __t9
    return vs[7];
}
    