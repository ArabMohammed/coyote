
# include <vector.hpp>

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "0000000000000000001000000000000000001000000000000000000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000100000000000", info);
    add_bitstring(bits, "0000000000000010000000000000000000000000000000000000000000000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000010000000000100000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000100000000000000000000000000000001000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000010000000000000000000000100000000000000000000100", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000100000000000000000000000001000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000100000000000000000000000000000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000001000000000010000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000001000000000001000000001000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", info);
    add_bitstring(bits, "0000000000000000000100000000000000000000010000000000000000000000000000000000000000000000100000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000001000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000001000000000000000100000000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "0000000100000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000001000000000000000000000000000000000000001000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000010000000000000000000000010000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000001", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000010010000000000000001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000100000000000000000100000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000010100000000000000001010000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000100000000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000001000000000000000010000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000001000000000010000000000010000001000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000100000000000000000000000100000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000001000000000000100000000000000000000000000000000", info);
    add_bitstring(bits, "0000000100000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000001000000000000000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000010000010000000000000000000000000000000000000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000010000100000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000100000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000001000000000000000000000000000001000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000001000000000101000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000010000000000000000000000000000000000000000000000000000100000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000001001000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000001000000010000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000100010000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000010011010000000000000000100000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000101000000000000001000000000000000000000001001000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000010000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000001010000000000000100000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000100000000010000000000000000000000000000000000000000000000000000000000000000000000100000000000", info);
    add_bitstring(bits, "0000000000001000000000010000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000010000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000100010000001000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000001000000000000000000000000000000000000000001000000000000000000000000", info);
    add_bitstring(bits, "0000000000001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000001000001000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000010000000000000000000000000000000000000001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000100000000000000010000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(19);
    ts[0] = encrypt_inputinfo);
    ts[1] = encrypt_input("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[10];
    ctxt ss[50];

    vs[0] = ts[0];
    info.eval->rotate_rows(vs[0], -17, gk, ss[0]); // __s0 = __v0 >> 17
    info.eval->rotate_rows(vs[0], -11, gk, ss[1]); // __s1 = __v0 >> 11
    info.eval->rotate_rows(vs[0], -25, gk, ss[2]); // __s2 = __v0 >> 25
    info.eval->rotate_rows(vs[0], -33, gk, ss[3]); // __s3 = __v0 >> 33
    info.eval->rotate_rows(vs[0], -98, gk, ss[4]); // __s4 = __v0 >> 98
    info.eval->rotate_rows(vs[0], -28, gk, ss[5]); // __s5 = __v0 >> 28
    info.eval->rotate_rows(vs[0], -27, gk, ss[6]); // __s6 = __v0 >> 27
    info.eval->rotate_rows(vs[0], -4, gk, ss[7]); // __s7 = __v0 >> 4
    info.eval->rotate_rows(vs[0], -87, gk, ss[8]); // __s8 = __v0 >> 87
    info.eval->rotate_rows(vs[0], -18, gk, ss[9]); // __s9 = __v0 >> 18
    info.eval->rotate_rows(vs[0], -86, gk, ss[10]); // __s10 = __v0 >> 86
    info.eval->rotate_rows(vs[0], -80, gk, ss[11]); // __s11 = __v0 >> 80
    info.eval->rotate_rows(vs[0], -95, gk, ss[12]); // __s12 = __v0 >> 95
    info.eval->rotate_rows(vs[0], -97, gk, ss[13]); // __s13 = __v0 >> 97
    info.eval->rotate_rows(vs[0], -93, gk, ss[14]); // __s14 = __v0 >> 93
    info.eval->rotate_rows(vs[0], -71, gk, ss[15]); // __s15 = __v0 >> 71
    info.eval->rotate_rows(vs[0], -57, gk, ss[16]); // __s16 = __v0 >> 57
    info.eval->rotate_rows(vs[0], -79, gk, ss[17]); // __s17 = __v0 >> 79
    info.eval->rotate_rows(vs[0], -54, gk, ss[18]); // __s18 = __v0 >> 54
    
    // __t2 = blend(__s8@0000000100000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000, __s0@0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s11@0000000000000000000000000000000000000000001000000000010000000000010000001000000000000000000000000000, __s6@0000000000000000000000000000000000000000000000000000000010000000000000000000000010000000000000000000, __s13@0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000, __s5@0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000001, __s12@0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000100000000000, __s9@0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000)
    {
    ctxt t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8;
    info.eval->multiply_plain(ss[8], bits["0000000100000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000"], t2_1);
    info.eval->multiply_plain(ss[0], bits["0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t2_2);
    info.eval->multiply_plain(ss[11], bits["0000000000000000000000000000000000000000001000000000010000000000010000001000000000000000000000000000"], t2_3);
    info.eval->multiply_plain(ss[6], bits["0000000000000000000000000000000000000000000000000000000010000000000000000000000010000000000000000000"], t2_4);
    info.eval->multiply_plain(ss[13], bits["0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000"], t2_5);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000001"], t2_6);
    info.eval->multiply_plain(ss[12], bits["0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000100000000000"], t2_7);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000"], t2_8);
    info.eval->add_many({t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8}, ts[2]);
    }
    
    info.eval->add(ts[1], ts[2], vs[1]); // __v1 = __t1 + __t2
    info.eval->rotate_rows(vs[1], -23, gk, ss[19]); // __s19 = __v1 >> 23
    info.eval->rotate_rows(vs[1], -11, gk, ss[20]); // __s20 = __v1 >> 11
    info.eval->rotate_rows(vs[1], -85, gk, ss[21]); // __s21 = __v1 >> 85
    info.eval->rotate_rows(vs[1], -56, gk, ss[22]); // __s22 = __v1 >> 56
    info.eval->rotate_rows(vs[1], -49, gk, ss[23]); // __s23 = __v1 >> 49
    info.eval->rotate_rows(vs[1], -34, gk, ss[24]); // __s24 = __v1 >> 34
    
    // __t3 = blend(__v1@0000000100000000010000000000000000000000000000000000000000000000000000000000000000000000100000000000, __s23@0000000000001000000000010000000000000000000000000000000000000000000000000000000000000000000000000000, __s22@0000000000000000001000000000000000001000000000000000000100000000000000000000000000000000000000000000, __s24@0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000, __s21@0000000000000000000000000000000000000010010000000000000001000000000000000000000000000000000000000000, __s19@0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000, __s20@0000000000000000000000000000000000000000000000000000010000000000000000000000100000000000000000000100)
    {
    ctxt t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    info.eval->multiply_plain(vs[1], bits["0000000100000000010000000000000000000000000000000000000000000000000000000000000000000000100000000000"], t3_1);
    info.eval->multiply_plain(ss[23], bits["0000000000001000000000010000000000000000000000000000000000000000000000000000000000000000000000000000"], t3_2);
    info.eval->multiply_plain(ss[22], bits["0000000000000000001000000000000000001000000000000000000100000000000000000000000000000000000000000000"], t3_3);
    info.eval->multiply_plain(ss[24], bits["0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000"], t3_4);
    info.eval->multiply_plain(ss[21], bits["0000000000000000000000000000000000000010010000000000000001000000000000000000000000000000000000000000"], t3_5);
    info.eval->multiply_plain(ss[19], bits["0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"], t3_6);
    info.eval->multiply_plain(ss[20], bits["0000000000000000000000000000000000000000000000000000010000000000000000000000100000000000000000000100"], t3_7);
    info.eval->add_many({t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7}, ts[3]);
    }
    
    
    // __t4 = blend(__s4@0000000100000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000, __s1@0000000000001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s15@0000000000000000010000000000000000000000000000000000000001000000000000000000000000000000000000000000, __s7@0000000000000000000100000000000000000000010000000000000000000000000000000000000000000000100000000000, __s8@0000000000000000000000010000000000000000000000000000000000000000000000000000100000000000000000000000, __s10@0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000, __s13@0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000, __s2@0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000, __s6@0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000, __s0@0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100)
    {
    ctxt t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10;
    info.eval->multiply_plain(ss[4], bits["0000000100000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[1], bits["0000000000001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t4_2);
    info.eval->multiply_plain(ss[15], bits["0000000000000000010000000000000000000000000000000000000001000000000000000000000000000000000000000000"], t4_3);
    info.eval->multiply_plain(ss[7], bits["0000000000000000000100000000000000000000010000000000000000000000000000000000000000000000100000000000"], t4_4);
    info.eval->multiply_plain(ss[8], bits["0000000000000000000000010000000000000000000000000000000000000000000000000000100000000000000000000000"], t4_5);
    info.eval->multiply_plain(ss[10], bits["0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000"], t4_6);
    info.eval->multiply_plain(ss[13], bits["0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000"], t4_7);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"], t4_8);
    info.eval->multiply_plain(ss[6], bits["0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000"], t4_9);
    info.eval->multiply_plain(ss[0], bits["0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100"], t4_10);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10}, ts[4]);
    }
    
    info.eval->add(ts[3], ts[4], vs[2]); // __v2 = __t3 + __t4
    info.eval->rotate_rows(vs[2], -29, gk, ss[25]); // __s25 = __v2 >> 29
    info.eval->rotate_rows(vs[2], -99, gk, ss[26]); // __s26 = __v2 >> 99
    info.eval->rotate_rows(vs[2], -97, gk, ss[27]); // __s27 = __v2 >> 97
    info.eval->rotate_rows(vs[2], -84, gk, ss[28]); // __s28 = __v2 >> 84
    info.eval->rotate_rows(vs[2], -90, gk, ss[29]); // __s29 = __v2 >> 90
    
    // __t5 = blend(__s26@0000000000010000010000000000000000000000000000000000000010000000000000000000000000000000000000000000, __s27@0000000000000010100000000000000001010000000000000000000000000000000000000000000000000000000000000000, __s28@0000000000000000000000000001000000000101000000000000000000000000000000000000000000000000000000000000, __s25@0000000000000000000000000000000000001000000000000000100000000000000000100000000000000000000000000000, __s29@0000000000000000000000000000000000000000000000000000000000000000001000000000001000000001000000000000)
    {
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5;
    info.eval->multiply_plain(ss[26], bits["0000000000010000010000000000000000000000000000000000000010000000000000000000000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[27], bits["0000000000000010100000000000000001010000000000000000000000000000000000000000000000000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[28], bits["0000000000000000000000000001000000000101000000000000000000000000000000000000000000000000000000000000"], t5_3);
    info.eval->multiply_plain(ss[25], bits["0000000000000000000000000000000000001000000000000000100000000000000000100000000000000000000000000000"], t5_4);
    info.eval->multiply_plain(ss[29], bits["0000000000000000000000000000000000000000000000000000000000000000001000000000001000000001000000000000"], t5_5);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5}, ts[5]);
    }
    
    
    // __t6 = blend(__v0@0000000000010000100000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s11@0000000000000010000000000000000000000000000000000000000000000000000000100000000000000000000000000000, __s10@0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s2@0000000000000000000000000001000001000000000000000000000000000000000000000000000000000000000000000000, __s18@0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, __s17@0000000000000000000000000000000000001000000000000000000000000000001000000000000000000000000000000000, __s14@0000000000000000000000000000000000000100000000000000000000000000000000000000000000000001000000000000, __s6@0000000000000000000000000000000000000001000000000000000000000000000000000000001000000000000000000000, __s16@0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000, __s3@0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000)
    {
    ctxt t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7, t6_8, t6_9, t6_10;
    info.eval->multiply_plain(vs[0], bits["0000000000010000100000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t6_1);
    info.eval->multiply_plain(ss[11], bits["0000000000000010000000000000000000000000000000000000000000000000000000100000000000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[10], bits["0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t6_3);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000001000001000000000000000000000000000000000000000000000000000000000000000000"], t6_4);
    info.eval->multiply_plain(ss[18], bits["0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"], t6_5);
    info.eval->multiply_plain(ss[17], bits["0000000000000000000000000000000000001000000000000000000000000000001000000000000000000000000000000000"], t6_6);
    info.eval->multiply_plain(ss[14], bits["0000000000000000000000000000000000000100000000000000000000000000000000000000000000000001000000000000"], t6_7);
    info.eval->multiply_plain(ss[6], bits["0000000000000000000000000000000000000001000000000000000000000000000000000000001000000000000000000000"], t6_8);
    info.eval->multiply_plain(ss[16], bits["0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t6_9);
    info.eval->multiply_plain(ss[3], bits["0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000"], t6_10);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7, t6_8, t6_9, t6_10}, ts[6]);
    }
    
    info.eval->add(ts[5], ts[6], vs[3]); // __v3 = __t5 + __t6
    info.eval->rotate_rows(vs[3], -50, gk, ss[30]); // __s30 = __v3 >> 50
    info.eval->rotate_rows(vs[3], -22, gk, ss[31]); // __s31 = __v3 >> 22
    info.eval->rotate_rows(vs[3], -12, gk, ss[32]); // __s32 = __v3 >> 12
    info.eval->rotate_rows(vs[3], -8, gk, ss[33]); // __s33 = __v3 >> 8
    info.eval->rotate_rows(vs[3], -80, gk, ss[34]); // __s34 = __v3 >> 80
    info.eval->rotate_rows(vs[3], -62, gk, ss[35]); // __s35 = __v3 >> 62
    
    // __t7 = blend(__v3@0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s34@0000000000000001000000000000000010000000000000000000000000000000000000000000000000000000000000000000, __s32@0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001, __s31@0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000100010000000, __s35@0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000, __s33@0000000000000000000000000000000000000000010011010000000000000000100000000000000000000000000000000000, __s30@0000000000000000000000000000000000000000000000000000000000000100000000000000010000000000000000000000)
    {
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    info.eval->multiply_plain(vs[3], bits["0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[34], bits["0000000000000001000000000000000010000000000000000000000000000000000000000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[32], bits["0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001"], t7_3);
    info.eval->multiply_plain(ss[31], bits["0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000100010000000"], t7_4);
    info.eval->multiply_plain(ss[35], bits["0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000"], t7_5);
    info.eval->multiply_plain(ss[33], bits["0000000000000000000000000000000000000000010011010000000000000000100000000000000000000000000000000000"], t7_6);
    info.eval->multiply_plain(ss[30], bits["0000000000000000000000000000000000000000000000000000000000000100000000000000010000000000000000000000"], t7_7);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7}, ts[7]);
    }
    
    
    // __t8 = blend(__s18@0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s16@0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s2@0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001, __s1@0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000, __s3@0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000, __s10@0000000000000000000000000000000000000000100000000000000000000000100000000000000000000000000000000000, __s0@0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000010000000, __s12@0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000, __s14@0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000, __s5@0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000, __s9@0000000000000000000000000000000000000000000000000000000000000100000000000000010000000000000000000000, __s6@0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000)
    {
    ctxt t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9, t8_10, t8_11, t8_12;
    info.eval->multiply_plain(ss[18], bits["0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[16], bits["0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001"], t8_3);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000"], t8_4);
    info.eval->multiply_plain(ss[3], bits["0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000"], t8_5);
    info.eval->multiply_plain(ss[10], bits["0000000000000000000000000000000000000000100000000000000000000000100000000000000000000000000000000000"], t8_6);
    info.eval->multiply_plain(ss[0], bits["0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000010000000"], t8_7);
    info.eval->multiply_plain(ss[12], bits["0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000"], t8_8);
    info.eval->multiply_plain(ss[14], bits["0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000"], t8_9);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000"], t8_10);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000000000000000000000000000000000000000000000100000000000000010000000000000000000000"], t8_11);
    info.eval->multiply_plain(ss[6], bits["0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000"], t8_12);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9, t8_10, t8_11, t8_12}, ts[8]);
    }
    
    info.eval->add(ts[7], ts[8], vs[4]); // __v4 = __t7 + __t8
    info.eval->rotate_rows(vs[4], -63, gk, ss[36]); // __s36 = __v4 >> 63
    info.eval->rotate_rows(vs[4], -98, gk, ss[37]); // __s37 = __v4 >> 98
    info.eval->rotate_rows(vs[4], -40, gk, ss[38]); // __s38 = __v4 >> 40
    info.eval->rotate_rows(vs[4], -11, gk, ss[39]); // __s39 = __v4 >> 11
    info.eval->rotate_rows(vs[4], -92, gk, ss[40]); // __s40 = __v4 >> 92
    info.eval->rotate_rows(vs[4], -46, gk, ss[41]); // __s41 = __v4 >> 46
    
    // __t9 = blend(__s37@0000000000000100000000000000000000000001000000000000000000000000000000000000000000000000000000000000, __s41@0000000000000000000000000000000000100010000001000000000000000000000000000000000000000000000000000000, __s40@0000000000000000000000000000000000001000000000000000010000000000000000000000000000000000000000000000, __s39@0000000000000000000000000000000000000000000100000000000000100000000000000000000000000000000000000000, __s38@0000000000000000000000000000000000000000000000000000000000000000000001000000000010000000000000000000, __s36@0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000)
    {
    ctxt t9_1, t9_2, t9_3, t9_4, t9_5, t9_6;
    info.eval->multiply_plain(ss[37], bits["0000000000000100000000000000000000000001000000000000000000000000000000000000000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[41], bits["0000000000000000000000000000000000100010000001000000000000000000000000000000000000000000000000000000"], t9_2);
    info.eval->multiply_plain(ss[40], bits["0000000000000000000000000000000000001000000000000000010000000000000000000000000000000000000000000000"], t9_3);
    info.eval->multiply_plain(ss[39], bits["0000000000000000000000000000000000000000000100000000000000100000000000000000000000000000000000000000"], t9_4);
    info.eval->multiply_plain(ss[38], bits["0000000000000000000000000000000000000000000000000000000000000000000001000000000010000000000000000000"], t9_5);
    info.eval->multiply_plain(ss[36], bits["0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000"], t9_6);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4, t9_5, t9_6}, ts[9]);
    }
    
    
    // __t10 = blend(__s16@0000000000000100000000000000000000000000000001000000000000000000000000000000000000000000000000000000, __s8@0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000, __s3@0000000000000000000000000000000000001001000000000000000000000000000000000000000000000000000000000000, __s2@0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000, __s9@0000000000000000000000000000000000000000000100000000000000100000000000000000000000000000000000000000, __s6@0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000, __v0@0000000000000000000000000000000000000000000000000000000000000000000001000000010000000000000000000000, __s4@0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000)
    {
    ctxt t10_1, t10_2, t10_3, t10_4, t10_5, t10_6, t10_7, t10_8;
    info.eval->multiply_plain(ss[16], bits["0000000000000100000000000000000000000000000001000000000000000000000000000000000000000000000000000000"], t10_1);
    info.eval->multiply_plain(ss[8], bits["0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000"], t10_2);
    info.eval->multiply_plain(ss[3], bits["0000000000000000000000000000000000001001000000000000000000000000000000000000000000000000000000000000"], t10_3);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000"], t10_4);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000000000000000000000000000100000000000000100000000000000000000000000000000000000000"], t10_5);
    info.eval->multiply_plain(ss[6], bits["0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000"], t10_6);
    info.eval->multiply_plain(vs[0], bits["0000000000000000000000000000000000000000000000000000000000000000000001000000010000000000000000000000"], t10_7);
    info.eval->multiply_plain(ss[4], bits["0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000"], t10_8);
    info.eval->add_many({t10_1, t10_2, t10_3, t10_4, t10_5, t10_6, t10_7, t10_8}, ts[10]);
    }
    
    info.eval->add(ts[9], ts[10], vs[5]); // __v5 = __t9 + __t10
    info.eval->rotate_rows(vs[5], -12, gk, ss[42]); // __s42 = __v5 >> 12
    info.eval->rotate_rows(vs[5], -95, gk, ss[43]); // __s43 = __v5 >> 95
    info.eval->rotate_rows(vs[5], -43, gk, ss[44]); // __s44 = __v5 >> 43
    info.eval->rotate_rows(vs[5], -80, gk, ss[45]); // __s45 = __v5 >> 80
    
    // __t11 = blend(__s42@0000000000000000000000000100000000000000000000000000000100000000000000000000000000000000000000000000, __s43@0000000000000000000000000000000101000000000000001000000000000000000000001001000000000000000000000000, __v5@0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000, __s45@0000000000000000000000000000000000000010000000000100000000000000000000000000000000000000000000000000, __s44@0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000100000000000)
    {
    ctxt t11_1, t11_2, t11_3, t11_4, t11_5;
    info.eval->multiply_plain(ss[42], bits["0000000000000000000000000100000000000000000000000000000100000000000000000000000000000000000000000000"], t11_1);
    info.eval->multiply_plain(ss[43], bits["0000000000000000000000000000000101000000000000001000000000000000000000001001000000000000000000000000"], t11_2);
    info.eval->multiply_plain(vs[5], bits["0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000"], t11_3);
    info.eval->multiply_plain(ss[45], bits["0000000000000000000000000000000000000010000000000100000000000000000000000000000000000000000000000000"], t11_4);
    info.eval->multiply_plain(ss[44], bits["0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000100000000000"], t11_5);
    info.eval->add_many({t11_1, t11_2, t11_3, t11_4, t11_5}, ts[11]);
    }
    
    
    // __t12 = blend(__s4@0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000, __s0@0000000000000000000000000000000100000000000000000100000100000000000000000000000000000000000000000000, __s1@0000000000000000000000000000000001000000000000000000000000000000000000000001000000000000000000000000, __s12@0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000, __s5@0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000, __v0@0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000, __s7@0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000, __s10@0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000, __s13@0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000)
    {
    ctxt t12_1, t12_2, t12_3, t12_4, t12_5, t12_6, t12_7, t12_8, t12_9;
    info.eval->multiply_plain(ss[4], bits["0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000"], t12_1);
    info.eval->multiply_plain(ss[0], bits["0000000000000000000000000000000100000000000000000100000100000000000000000000000000000000000000000000"], t12_2);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000000000000000001000000000000000000000000000000000000000001000000000000000000000000"], t12_3);
    info.eval->multiply_plain(ss[12], bits["0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000"], t12_4);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000"], t12_5);
    info.eval->multiply_plain(vs[0], bits["0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t12_6);
    info.eval->multiply_plain(ss[7], bits["0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000"], t12_7);
    info.eval->multiply_plain(ss[10], bits["0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000"], t12_8);
    info.eval->multiply_plain(ss[13], bits["0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000"], t12_9);
    info.eval->add_many({t12_1, t12_2, t12_3, t12_4, t12_5, t12_6, t12_7, t12_8, t12_9}, ts[12]);
    }
    
    info.eval->add(ts[11], ts[12], vs[6]); // __v6 = __t11 + __t12
    info.eval->rotate_rows(vs[6], -22, gk, ss[46]); // __s46 = __v6 >> 22
    info.eval->rotate_rows(vs[6], -80, gk, ss[47]); // __s47 = __v6 >> 80
    
    // __t13 = blend(__v6@0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000, __s46@0000000000000000000000000000000000000000000000000000000010000000000000100000000000000000000000000000, __s47@0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000)
    {
    ctxt t13_1, t13_2, t13_3;
    info.eval->multiply_plain(vs[6], bits["0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000"], t13_1);
    info.eval->multiply_plain(ss[46], bits["0000000000000000000000000000000000000000000000000000000010000000000000100000000000000000000000000000"], t13_2);
    info.eval->multiply_plain(ss[47], bits["0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000"], t13_3);
    info.eval->add_many({t13_1, t13_2, t13_3}, ts[13]);
    }
    
    
    // __t14 = blend(__s16@0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000, __s11@0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000, __s15@0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000, __v0@0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000)
    {
    ctxt t14_1, t14_2, t14_3, t14_4;
    info.eval->multiply_plain(ss[16], bits["0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000"], t14_1);
    info.eval->multiply_plain(ss[11], bits["0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000"], t14_2);
    info.eval->multiply_plain(ss[15], bits["0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000"], t14_3);
    info.eval->multiply_plain(vs[0], bits["0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000"], t14_4);
    info.eval->add_many({t14_1, t14_2, t14_3, t14_4}, ts[14]);
    }
    
    info.eval->add(ts[13], ts[14], vs[7]); // __v7 = __t13 + __t14
    info.eval->rotate_rows(vs[7], -99, gk, ss[48]); // __s48 = __v7 >> 99
    
    // __t15 = blend(__s48@0000000000000000000000000000000000000000000000000000001000000000000100000000000000000000000000000000, __v7@0000000000000000000000000000000000000000000000000000000010000000000000100000000000000000000000000000)
    {
    ctxt t15_1, t15_2;
    info.eval->multiply_plain(ss[48], bits["0000000000000000000000000000000000000000000000000000001000000000000100000000000000000000000000000000"], t15_1);
    info.eval->multiply_plain(vs[7], bits["0000000000000000000000000000000000000000000000000000000010000000000000100000000000000000000000000000"], t15_2);
    info.eval->add(t15_1, t15_2, ts[15]);
    }
    
    
    // __t16 = blend(__s15@0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000, __s1@0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000, __s7@0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000, __s4@0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000)
    {
    ctxt t16_1, t16_2, t16_3, t16_4;
    info.eval->multiply_plain(ss[15], bits["0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000"], t16_1);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000"], t16_2);
    info.eval->multiply_plain(ss[7], bits["0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000"], t16_3);
    info.eval->multiply_plain(ss[4], bits["0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000"], t16_4);
    info.eval->add_many({t16_1, t16_2, t16_3, t16_4}, ts[16]);
    }
    
    info.eval->add(ts[15], ts[16], vs[8]); // __v8 = __t15 + __t16
    info.eval->rotate_rows(vs[8], -91, gk, ss[49]); // __s49 = __v8 >> 91
    
    // __t17 = blend(__s49@0000000000000000000000000000000000000000000001010000000000000100000000000000000000000000000000000000, __v8@0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000)
    {
    ctxt t17_1, t17_2;
    info.eval->multiply_plain(ss[49], bits["0000000000000000000000000000000000000000000001010000000000000100000000000000000000000000000000000000"], t17_1);
    info.eval->multiply_plain(vs[8], bits["0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000"], t17_2);
    info.eval->add(t17_1, t17_2, ts[17]);
    }
    
    
    // __t18 = blend(__s5@0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000, __s0@0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000, __s12@0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000, __s2@0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000)
    {
    ctxt t18_1, t18_2, t18_3, t18_4;
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000"], t18_1);
    info.eval->multiply_plain(ss[0], bits["0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000"], t18_2);
    info.eval->multiply_plain(ss[12], bits["0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000"], t18_3);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000"], t18_4);
    info.eval->add_many({t18_1, t18_2, t18_3, t18_4}, ts[18]);
    }
    
    info.eval->add(ts[17], ts[18], vs[9]); // __v9 = __t17 + __t18
    return vs[9];
}
    