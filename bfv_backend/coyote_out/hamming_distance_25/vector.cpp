
# include <vector.hpp>

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "00000000000010010000000000010000000001110001000000", info);
    add_bitstring(bits, "00000000000000000000000000000000100000000010000000", info);
    add_bitstring(bits, "10000000000000000000101000000000000000000001000000", info);
    add_bitstring(bits, "01001000000000000000000001000000000000000000000000", info);
    add_bitstring(bits, "00000000100000000000000100000000000000000100000000", info);
    add_bitstring(bits, "00000000000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "00000001000001000000000000000010000000000000000100", info);
    add_bitstring(bits, "00000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000010000000000000000", info);
    add_bitstring(bits, "00000100000000000000000000000000000000000000001000", info);
    add_bitstring(bits, "00000000000000000000000000000001001010000000000000", info);
    add_bitstring(bits, "00000000100000000000001000010000000000000000000000", info);
    add_bitstring(bits, "00000000000001001000000000100000010000000000000000", info);
    add_bitstring(bits, "10000000000000000000000000000000000000000101000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000001000000", info);
    add_bitstring(bits, "01000000100000000001000000000000110000001000000000", info);
    add_bitstring(bits, "00000000001000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000100000110010001000000000010000000000000", info);
    add_bitstring(bits, "00010000000000000010000000000000000000100000000000", info);
    add_bitstring(bits, "00000000000000010000000000000000000001000000000000", info);
    add_bitstring(bits, "00000000100010000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000100000100000000000", info);
    add_bitstring(bits, "00000000000010000000000000001000000000010000000000", info);
    add_bitstring(bits, "00100000000000000000000000000000000000000000000001", info);
    add_bitstring(bits, "00000000000000000001000001000000000000000000010000", info);
    add_bitstring(bits, "00000000000000000000000000000000000110000000000000", info);
    add_bitstring(bits, "00000000000010000000000000010001000000010000000000", info);
    add_bitstring(bits, "00000000000000000000000000100000000000000000000000", info);
    add_bitstring(bits, "00000000010000101000000000000000110000000010000010", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000100000", info);
    add_bitstring(bits, "00000000000001000100000000010000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000001000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000100000000000000000000", info);
    add_bitstring(bits, "00000000000000000100001000000000000000010000000000", info);
    add_bitstring(bits, "00000000000000000000000000000001001000000000000000", info);
    add_bitstring(bits, "01000000000000000000000001000000000000000000000000", info);
    add_bitstring(bits, "00100000010000000000000000000100000000000000000000", info);
    add_bitstring(bits, "00000001001000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000010000000000000000000001000", info);
    add_bitstring(bits, "00000000100100000001010000000000000000100000000000", info);
    add_bitstring(bits, "00001000000000000000000010000000000000000000000000", info);
    add_bitstring(bits, "00000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000001000000000", info);
    add_bitstring(bits, "00001000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000100000000000000000010001000000000", info);
    add_bitstring(bits, "00000000000000000000010000001000000100000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000010011001000000000", info);
    add_bitstring(bits, "00000000000001000000000100000000000000000000000000", info);
    add_bitstring(bits, "01000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000100000000000000000000000000000000100000", info);
    add_bitstring(bits, "00000000000000000000000000000000000100000000000000", info);
    add_bitstring(bits, "00000000000000000000010000000000000000000000000000", info);
    add_bitstring(bits, "00001010000000000000000010000000000000000000101011", info);
    add_bitstring(bits, "00000000000000001000000000000000000000100000000000", info);
    add_bitstring(bits, "00000000000100000000000000000000000000000000010000", info);
    add_bitstring(bits, "00000000001000010000000000000000000000000000000000", info);
    add_bitstring(bits, "00000100000000010010000000000000100000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000001000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000010010000000000000000100", info);
    add_bitstring(bits, "00000110000001000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000011000000100", info);
    add_bitstring(bits, "00000000000000100000010000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000010000000000000000000000000", info);
    add_bitstring(bits, "00010000000000000011000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000101000000000000000000000", info);
    add_bitstring(bits, "00000011000000000000000000000000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(10);
    ts[0] = encrypt_inputinfo);
    ts[1] = encrypt_inputinfo);
    ts[6] = encrypt_input("00000111101001011000011000111001111110111000101100", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[6];
    ctxt ss[47];

    vs[0] = ts[0];
    info.eval->rotate_rows(vs[0], -49, gk, ss[0]); // __s0 = __v0 >> 49
    info.eval->rotate_rows(vs[0], -10, gk, ss[1]); // __s1 = __v0 >> 10
    info.eval->rotate_rows(vs[0], -11, gk, ss[2]); // __s2 = __v0 >> 11
    info.eval->rotate_rows(vs[0], -2, gk, ss[3]); // __s3 = __v0 >> 2
    info.eval->rotate_rows(vs[0], -4, gk, ss[4]); // __s4 = __v0 >> 4
    info.eval->rotate_rows(vs[0], -31, gk, ss[5]); // __s5 = __v0 >> 31
    info.eval->rotate_rows(vs[0], -48, gk, ss[6]); // __s6 = __v0 >> 48
    info.eval->rotate_rows(vs[0], -6, gk, ss[7]); // __s7 = __v0 >> 6
    info.eval->rotate_rows(vs[0], -15, gk, ss[8]); // __s8 = __v0 >> 15
    info.eval->rotate_rows(vs[0], -3, gk, ss[9]); // __s9 = __v0 >> 3
    info.eval->rotate_rows(vs[0], -34, gk, ss[10]); // __s10 = __v0 >> 34
    info.eval->rotate_rows(vs[0], -32, gk, ss[11]); // __s11 = __v0 >> 32
    info.eval->rotate_rows(vs[0], -39, gk, ss[12]); // __s12 = __v0 >> 39
    info.eval->rotate_rows(vs[0], -44, gk, ss[13]); // __s13 = __v0 >> 44
    vs[1] = ts[1];
    info.eval->rotate_rows(vs[1], -48, gk, ss[14]); // __s14 = __v1 >> 48
    info.eval->rotate_rows(vs[1], -14, gk, ss[15]); // __s15 = __v1 >> 14
    info.eval->rotate_rows(vs[1], -6, gk, ss[16]); // __s16 = __v1 >> 6
    info.eval->rotate_rows(vs[1], -45, gk, ss[17]); // __s17 = __v1 >> 45
    info.eval->rotate_rows(vs[1], -2, gk, ss[18]); // __s18 = __v1 >> 2
    info.eval->rotate_rows(vs[1], -46, gk, ss[19]); // __s19 = __v1 >> 46
    info.eval->rotate_rows(vs[1], -37, gk, ss[20]); // __s20 = __v1 >> 37
    info.eval->rotate_rows(vs[1], -16, gk, ss[21]); // __s21 = __v1 >> 16
    info.eval->rotate_rows(vs[1], -34, gk, ss[22]); // __s22 = __v1 >> 34
    info.eval->rotate_rows(vs[1], -41, gk, ss[23]); // __s23 = __v1 >> 41
    info.eval->rotate_rows(vs[1], -39, gk, ss[24]); // __s24 = __v1 >> 39
    
    // __t2 = blend(__s0@10000000000000000000000000000000000000000101000000, __s4@00000001001000000000000000000000000000000000000000, __s10@00000000100010000000000000000000000000000000000000, __s2@00000000000001000000000100000000000000000000000000, __s7@00000000000000010000000000000000000001000000000000, __v0@00000000000000000100001000000000000000010000000000, __s1@00000000000000000000100000000000000000000000000000, __s9@00000000000000000000000000100000000000000000000000, __s6@00000000000000000000000000010010000000000000000100, __s13@00000000000000000000000000001000000000000000000000, __s8@00000000000000000000000000000001001000000000000000, __s5@00000000000000000000000000000000000110000000000000, __s3@00000000000000000000000000000000000000001000000000)
    {
    ctxt t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8, t2_9, t2_10, t2_11, t2_12, t2_13;
    info.eval->multiply_plain(ss[0], bits["10000000000000000000000000000000000000000101000000"], t2_1);
    info.eval->multiply_plain(ss[4], bits["00000001001000000000000000000000000000000000000000"], t2_2);
    info.eval->multiply_plain(ss[10], bits["00000000100010000000000000000000000000000000000000"], t2_3);
    info.eval->multiply_plain(ss[2], bits["00000000000001000000000100000000000000000000000000"], t2_4);
    info.eval->multiply_plain(ss[7], bits["00000000000000010000000000000000000001000000000000"], t2_5);
    info.eval->multiply_plain(vs[0], bits["00000000000000000100001000000000000000010000000000"], t2_6);
    info.eval->multiply_plain(ss[1], bits["00000000000000000000100000000000000000000000000000"], t2_7);
    info.eval->multiply_plain(ss[9], bits["00000000000000000000000000100000000000000000000000"], t2_8);
    info.eval->multiply_plain(ss[6], bits["00000000000000000000000000010010000000000000000100"], t2_9);
    info.eval->multiply_plain(ss[13], bits["00000000000000000000000000001000000000000000000000"], t2_10);
    info.eval->multiply_plain(ss[8], bits["00000000000000000000000000000001001000000000000000"], t2_11);
    info.eval->multiply_plain(ss[5], bits["00000000000000000000000000000000000110000000000000"], t2_12);
    info.eval->multiply_plain(ss[3], bits["00000000000000000000000000000000000000001000000000"], t2_13);
    info.eval->add_many({t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8, t2_9, t2_10, t2_11, t2_12, t2_13}, ts[2]);
    }
    
    
    // __t3 = blend(__s17@10000000000000000000101000000000000000000001000000, __s14@00000001000001000000000000000010000000000000000100, __s18@00000000100000000000000100000000000000000100000000, __s16@00000000001000000000000000000000000000000000000000, __s19@00000000000010000000000000010001000000010000000000, __s23@00000000000000010000000000000000000001000000000000, __s15@00000000000000000100000000000000000010001000000000, __s22@00000000000000000000000000101000000000000000000000, __v1@00000000000000000000000000000000001000000000000000, __s21@00000000000000000000000000000000000100000000000000)
    {
    ctxt t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10;
    info.eval->multiply_plain(ss[17], bits["10000000000000000000101000000000000000000001000000"], t3_1);
    info.eval->multiply_plain(ss[14], bits["00000001000001000000000000000010000000000000000100"], t3_2);
    info.eval->multiply_plain(ss[18], bits["00000000100000000000000100000000000000000100000000"], t3_3);
    info.eval->multiply_plain(ss[16], bits["00000000001000000000000000000000000000000000000000"], t3_4);
    info.eval->multiply_plain(ss[19], bits["00000000000010000000000000010001000000010000000000"], t3_5);
    info.eval->multiply_plain(ss[23], bits["00000000000000010000000000000000000001000000000000"], t3_6);
    info.eval->multiply_plain(ss[15], bits["00000000000000000100000000000000000010001000000000"], t3_7);
    info.eval->multiply_plain(ss[22], bits["00000000000000000000000000101000000000000000000000"], t3_8);
    info.eval->multiply_plain(vs[1], bits["00000000000000000000000000000000001000000000000000"], t3_9);
    info.eval->multiply_plain(ss[21], bits["00000000000000000000000000000000000100000000000000"], t3_10);
    info.eval->add_many({t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10}, ts[3]);
    }
    
    info.eval->multiply(ts[2], ts[3], vs[2]); // __v2 = __t2 * __t3
    info.eval->relinearize_inplace(vs[2], rk);
    info.eval->rotate_rows(vs[2], -5, gk, ss[25]); // __s25 = __v2 >> 5
    info.eval->rotate_rows(vs[2], -6, gk, ss[26]); // __s26 = __v2 >> 6
    info.eval->rotate_rows(vs[2], -13, gk, ss[27]); // __s27 = __v2 >> 13
    info.eval->rotate_rows(vs[2], -44, gk, ss[28]); // __s28 = __v2 >> 44
    info.eval->rotate_rows(vs[2], -41, gk, ss[29]); // __s29 = __v2 >> 41
    info.eval->rotate_rows(vs[2], -8, gk, ss[30]); // __s30 = __v2 >> 8
    info.eval->rotate_rows(vs[2], -30, gk, ss[31]); // __s31 = __v2 >> 30
    info.eval->rotate_rows(vs[2], -10, gk, ss[32]); // __s32 = __v2 >> 10
    info.eval->rotate_rows(vs[2], -45, gk, ss[33]); // __s33 = __v2 >> 45
    
    // __t4 = blend(__s10@01000000000000000000000000000000000000000000000000, __v0@00100000000000000000000000000000000000000000000001, __s0@00010000000000000010000000000000000000100000000000, __s6@00001000000000000000000000000000000000000000000000, __s3@00000100000000000000000000000000000000000000000000, __s11@00000010000000000000000000000000000000000000000000, __s4@00000000010000101000000000000000110000000010000010, __s1@00000000000100000000000000000000000000000000100000, __s9@00000000000000000001000001000000000000000000010000, __s12@00000000000000000000010000000000000000000000000000, __s8@00000000000000000000000010000000000000000000001000, __s7@00000000000000000000000000000100000000000000000000)
    {
    ctxt t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10, t4_11, t4_12;
    info.eval->multiply_plain(ss[10], bits["01000000000000000000000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(vs[0], bits["00100000000000000000000000000000000000000000000001"], t4_2);
    info.eval->multiply_plain(ss[0], bits["00010000000000000010000000000000000000100000000000"], t4_3);
    info.eval->multiply_plain(ss[6], bits["00001000000000000000000000000000000000000000000000"], t4_4);
    info.eval->multiply_plain(ss[3], bits["00000100000000000000000000000000000000000000000000"], t4_5);
    info.eval->multiply_plain(ss[11], bits["00000010000000000000000000000000000000000000000000"], t4_6);
    info.eval->multiply_plain(ss[4], bits["00000000010000101000000000000000110000000010000010"], t4_7);
    info.eval->multiply_plain(ss[1], bits["00000000000100000000000000000000000000000000100000"], t4_8);
    info.eval->multiply_plain(ss[9], bits["00000000000000000001000001000000000000000000010000"], t4_9);
    info.eval->multiply_plain(ss[12], bits["00000000000000000000010000000000000000000000000000"], t4_10);
    info.eval->multiply_plain(ss[8], bits["00000000000000000000000010000000000000000000001000"], t4_11);
    info.eval->multiply_plain(ss[7], bits["00000000000000000000000000000100000000000000000000"], t4_12);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10, t4_11, t4_12}, ts[4]);
    }
    
    
    // __t5 = blend(__s14@01000000000000000000000001000000000000000000000000, __s20@00100000010000000000000000000100000000000000000000, __s22@00010000000000000011000000000000000000000000000000, __v1@00001010000000000000000010000000000000000000101011, __s19@00000100000000000000000000000000000000000000000000, __s16@00000000000100000000000000000000000000000000010000, __s24@00000000000000100000010000000000000000000000000000, __s17@00000000000000001000000000000000000000100000000000, __s21@00000000000000000000000000000000100000000010000000, __s18@00000000000000000000000000000000010000000000000000)
    {
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9, t5_10;
    info.eval->multiply_plain(ss[14], bits["01000000000000000000000001000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[20], bits["00100000010000000000000000000100000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[22], bits["00010000000000000011000000000000000000000000000000"], t5_3);
    info.eval->multiply_plain(vs[1], bits["00001010000000000000000010000000000000000000101011"], t5_4);
    info.eval->multiply_plain(ss[19], bits["00000100000000000000000000000000000000000000000000"], t5_5);
    info.eval->multiply_plain(ss[16], bits["00000000000100000000000000000000000000000000010000"], t5_6);
    info.eval->multiply_plain(ss[24], bits["00000000000000100000010000000000000000000000000000"], t5_7);
    info.eval->multiply_plain(ss[17], bits["00000000000000001000000000000000000000100000000000"], t5_8);
    info.eval->multiply_plain(ss[21], bits["00000000000000000000000000000000100000000010000000"], t5_9);
    info.eval->multiply_plain(ss[18], bits["00000000000000000000000000000000010000000000000000"], t5_10);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9, t5_10}, ts[5]);
    }
    
    info.eval->add(ts[4], ts[5], vs[3]); // __v3 = __t4 + __t5
    info.eval->rotate_rows(vs[3], -10, gk, ss[34]); // __s34 = __v3 >> 10
    info.eval->rotate_rows(vs[3], -5, gk, ss[35]); // __s35 = __v3 >> 5
    info.eval->rotate_rows(vs[3], -8, gk, ss[36]); // __s36 = __v3 >> 8
    info.eval->rotate_rows(vs[3], -44, gk, ss[37]); // __s37 = __v3 >> 44
    info.eval->rotate_rows(vs[3], -24, gk, ss[38]); // __s38 = __v3 >> 24
    info.eval->rotate_rows(vs[3], -41, gk, ss[39]); // __s39 = __v3 >> 41
    info.eval->rotate_rows(vs[3], -30, gk, ss[40]); // __s40 = __v3 >> 30
    info.eval->rotate_rows(vs[3], -45, gk, ss[41]); // __s41 = __v3 >> 45
    
    // __t7 = blend(__s25@00000100000000000000000000000000000000000000001000, __s28@00000011000000000000000000000000000000000000000000, __s29@00000000100000000000001000010000000000000000000000, __s31@00000000001000010000000000000000000000000000000000, __s26@00000000000001001000000000100000010000000000000000, __s27@00000000000000000000010000001000000100000000000000, __s30@00000000000000000000000000000001001010000000000000, __s33@00000000000000000000000000000000100000100000000000, __v2@00000000000000000000000000000000000000011000000100, __s32@00000000000000000000000000000000000000000000100000)
    {
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10;
    info.eval->multiply_plain(ss[25], bits["00000100000000000000000000000000000000000000001000"], t7_1);
    info.eval->multiply_plain(ss[28], bits["00000011000000000000000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[29], bits["00000000100000000000001000010000000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[31], bits["00000000001000010000000000000000000000000000000000"], t7_4);
    info.eval->multiply_plain(ss[26], bits["00000000000001001000000000100000010000000000000000"], t7_5);
    info.eval->multiply_plain(ss[27], bits["00000000000000000000010000001000000100000000000000"], t7_6);
    info.eval->multiply_plain(ss[30], bits["00000000000000000000000000000001001010000000000000"], t7_7);
    info.eval->multiply_plain(ss[33], bits["00000000000000000000000000000000100000100000000000"], t7_8);
    info.eval->multiply_plain(vs[2], bits["00000000000000000000000000000000000000011000000100"], t7_9);
    info.eval->multiply_plain(ss[32], bits["00000000000000000000000000000000000000000000100000"], t7_10);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10}, ts[7]);
    }
    
    info.eval->multiply(ts[6], ts[7], vs[4]); // __v4 = __t6 * __t7
    info.eval->relinearize_inplace(vs[4], rk);
    info.eval->rotate_rows(vs[4], -5, gk, ss[42]); // __s42 = __v4 >> 5
    info.eval->rotate_rows(vs[4], -43, gk, ss[43]); // __s43 = __v4 >> 43
    info.eval->rotate_rows(vs[4], -38, gk, ss[44]); // __s44 = __v4 >> 38
    info.eval->rotate_rows(vs[4], -40, gk, ss[45]); // __s45 = __v4 >> 40
    info.eval->rotate_rows(vs[4], -34, gk, ss[46]); // __s46 = __v4 >> 34
    
    // __t8 = blend(__v3@01001000000000000000000001000000000000000000000000, __s37@00000100000000010010000000000000100000000000000000, __s38@00000010000000000000000000000000000000000000000000, __s35@00000000100100000001010000000000000000100000000000, __s34@00000000000010000000000000001000000000010000000000, __s36@00000000000001000100000000010000000000000000000000, __s40@00000000000000000000000010000000000000000000000000, __s39@00000000000000000000000000000000010011001000000000, __s41@00000000000000000000000000000000000000000001000000)
    {
    ctxt t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9;
    info.eval->multiply_plain(vs[3], bits["01001000000000000000000001000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[37], bits["00000100000000010010000000000000100000000000000000"], t8_2);
    info.eval->multiply_plain(ss[38], bits["00000010000000000000000000000000000000000000000000"], t8_3);
    info.eval->multiply_plain(ss[35], bits["00000000100100000001010000000000000000100000000000"], t8_4);
    info.eval->multiply_plain(ss[34], bits["00000000000010000000000000001000000000010000000000"], t8_5);
    info.eval->multiply_plain(ss[36], bits["00000000000001000100000000010000000000000000000000"], t8_6);
    info.eval->multiply_plain(ss[40], bits["00000000000000000000000010000000000000000000000000"], t8_7);
    info.eval->multiply_plain(ss[39], bits["00000000000000000000000000000000010011001000000000"], t8_8);
    info.eval->multiply_plain(ss[41], bits["00000000000000000000000000000000000000000001000000"], t8_9);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7, t8_8, t8_9}, ts[8]);
    }
    
    
    // __t9 = blend(__s43@01000000100000000001000000000000110000001000000000, __s44@00001000000000000000000010000000000000000000000000, __v4@00000110000001000000000000000000000000000000000000, __s45@00000000000100000110010001000000000010000000000000, __s42@00000000000010010000000000010000000001110001000000, __s46@00000000000000000000000000001000000000000000000000)
    {
    ctxt t9_1, t9_2, t9_3, t9_4, t9_5, t9_6;
    info.eval->multiply_plain(ss[43], bits["01000000100000000001000000000000110000001000000000"], t9_1);
    info.eval->multiply_plain(ss[44], bits["00001000000000000000000010000000000000000000000000"], t9_2);
    info.eval->multiply_plain(vs[4], bits["00000110000001000000000000000000000000000000000000"], t9_3);
    info.eval->multiply_plain(ss[45], bits["00000000000100000110010001000000000010000000000000"], t9_4);
    info.eval->multiply_plain(ss[42], bits["00000000000010010000000000010000000001110001000000"], t9_5);
    info.eval->multiply_plain(ss[46], bits["00000000000000000000000000001000000000000000000000"], t9_6);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4, t9_5, t9_6}, ts[9]);
    }
    
    info.eval->sub(ts[8], ts[9], vs[5]); // __v5 = __t8 - __t9
    return vs[5];
}
    