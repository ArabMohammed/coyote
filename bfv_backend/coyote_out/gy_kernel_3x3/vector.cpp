
# include <vector.hpp>

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "000000000000000000000000000001000001000000000000000000", info);
    add_bitstring(bits, "000110000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000110000000000000000000000110000000000000000", info);
    add_bitstring(bits, "010000000100000000000000000000000000010000000000000000", info);
    add_bitstring(bits, "001001000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000010000000000000000000000000000000000010", info);
    add_bitstring(bits, "000000000000001000011000000000001000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000100000000001010000000000000", info);
    add_bitstring(bits, "000000000000000000000001000000000000100000000000000000", info);
    add_bitstring(bits, "001000100001000000000000000001000000000000000000000000", info);
    add_bitstring(bits, "000001000000000000000000001000100000000001000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000001000000000000000000000", info);
    add_bitstring(bits, "000000000000000001001000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000010000000000000000000000000", info);
    add_bitstring(bits, "000000000000010000000010000001000000000000000000000000", info);
    add_bitstring(bits, "001000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000001000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000100001000000000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "010000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "010000000000000001000010000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000100000000000000", info);
    add_bitstring(bits, "000000000000000000100001100000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000001000000000010000000000000000", info);
    add_bitstring(bits, "000000000000100000000000000000000000100000000000000000", info);
    add_bitstring(bits, "000000000000000100000000000000001000000000000000000000", info);
    add_bitstring(bits, "000000000000010100000010000000000000010000000000000000", info);
    add_bitstring(bits, "000000000000000100000001000010000001000000000000000000", info);
    add_bitstring(bits, "000000000000000000000010010000000000010000000000000000", info);
    add_bitstring(bits, "000010000010000000010000010000000000000000000000000000", info);
    add_bitstring(bits, "001000001000000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000100000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000011000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000010000000000001000000000000000", info);
    add_bitstring(bits, "000011000000000100000001000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000000010000000000", info);
    add_bitstring(bits, "000000000000000000000000000100000000000000000000100001", info);
    add_bitstring(bits, "000000000000000000000000000000000001000000000110000000", info);
    add_bitstring(bits, "000000000000000000010000001000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000100000000000000000", info);
    add_bitstring(bits, "000001000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000010010000000000000010000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000000010000000000000", info);
    add_bitstring(bits, "001001000000000000000000000000000000100000000000000000", info);
    add_bitstring(bits, "000000001000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "000000000000000000000000000000000000010000010000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(10);
    ts[0] = encrypt_input("011111111111111111111111100000001111111111111111111110111111111111111111111111100000000000011111111111111111111101000011111111111111111111101100001111111111111111111111100000111111111111111111111111111111111111111111111111000000000001111111111111111111111110000", info);
    ts[1] = encrypt_input("111111111111111111111111111111111111111111111111111111111111111111111111111111111", info);
    ts[2] = encrypt_input("000000000000000000000000000000000000000000000000000000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[6];
    ctxt ss[28];

    vs[0] = ts[0];
    info.eval->rotate_rows(vs[0], -4, gk, ss[0]); // __s0 = __v0 >> 4
    info.eval->rotate_rows(vs[0], -15, gk, ss[1]); // __s1 = __v0 >> 15
    info.eval->rotate_rows(vs[0], -48, gk, ss[2]); // __s2 = __v0 >> 48
    info.eval->rotate_rows(vs[0], -17, gk, ss[3]); // __s3 = __v0 >> 17
    info.eval->rotate_rows(vs[0], -34, gk, ss[4]); // __s4 = __v0 >> 34
    info.eval->rotate_rows(vs[0], -9, gk, ss[5]); // __s5 = __v0 >> 9
    info.eval->rotate_rows(vs[0], -41, gk, ss[6]); // __s6 = __v0 >> 41
    info.eval->rotate_rows(vs[0], -37, gk, ss[7]); // __s7 = __v0 >> 37
    
    // __t3 = blend(__v0@010000000100000000000000000000000000010000000000000000, __s4@001000100001000000000000000001000000000000000000000000, __s2@000110000000000000000000000000000000000000000000000000, __s0@000001000000000000000000001000100000000001000000000000, __s7@000000000000001000011000000000001000000000000000000000, __s1@000000000000000010000000000000000000000000000000000010, __s6@000000000000000000100001100000000000000000000000000000, __s3@000000000000000000000000000100000000000000000000100001, __s5@000000000000000000000000000000000001000000000110000000, __t2@100000011010110101000110010010010110101110111001011100)
    {
    ctxt t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9;
    info.eval->multiply_plain(vs[0], bits["010000000100000000000000000000000000010000000000000000"], t3_1);
    info.eval->multiply_plain(ss[4], bits["001000100001000000000000000001000000000000000000000000"], t3_2);
    info.eval->multiply_plain(ss[2], bits["000110000000000000000000000000000000000000000000000000"], t3_3);
    info.eval->multiply_plain(ss[0], bits["000001000000000000000000001000100000000001000000000000"], t3_4);
    info.eval->multiply_plain(ss[7], bits["000000000000001000011000000000001000000000000000000000"], t3_5);
    info.eval->multiply_plain(ss[1], bits["000000000000000010000000000000000000000000000000000010"], t3_6);
    info.eval->multiply_plain(ss[6], bits["000000000000000000100001100000000000000000000000000000"], t3_7);
    info.eval->multiply_plain(ss[3], bits["000000000000000000000000000100000000000000000000100001"], t3_8);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000000000000001000000000110000000"], t3_9);
    info.eval->add_many({t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, ts[2]}, ts[3]);
    }
    
    info.eval->multiply(ts[1], ts[3], vs[1]); // __v1 = __t1 * __t3
    info.eval->relinearize_inplace(vs[1], rk);
    info.eval->rotate_rows(vs[1], -20, gk, ss[8]); // __s8 = __v1 >> 20
    info.eval->rotate_rows(vs[1], -1, gk, ss[9]); // __s9 = __v1 >> 1
    info.eval->rotate_rows(vs[1], -26, gk, ss[10]); // __s10 = __v1 >> 26
    info.eval->rotate_rows(vs[1], -9, gk, ss[11]); // __s11 = __v1 >> 9
    info.eval->rotate_rows(vs[1], -4, gk, ss[12]); // __s12 = __v1 >> 4
    info.eval->rotate_rows(vs[1], -14, gk, ss[13]); // __s13 = __v1 >> 14
    info.eval->rotate_rows(vs[1], -43, gk, ss[14]); // __s14 = __v1 >> 43
    info.eval->rotate_rows(vs[1], -36, gk, ss[15]); // __s15 = __v1 >> 36
    info.eval->rotate_rows(vs[1], -27, gk, ss[16]); // __s16 = __v1 >> 27
    info.eval->rotate_rows(vs[1], -38, gk, ss[17]); // __s17 = __v1 >> 38
    info.eval->rotate_rows(vs[1], -52, gk, ss[18]); // __s18 = __v1 >> 52
    info.eval->rotate_rows(vs[1], -45, gk, ss[19]); // __s19 = __v1 >> 45
    
    // __t4 = blend(__s16@010000000000000001000010000000000000000000000000000000, __s9@001001000000000000000000000000000000000000000000000000, __s15@000000001000100000000000000000000000000000000000000000, __s8@000000000000000000001000000000000000000000000000000000, __s11@000000000000000000000000100000000000000000000000000000, __s12@000000000000000000000000010000000000001000000000000000, __s17@000000000000000000000000000100001000000000000000000000, __s14@000000000000000000000000000010000000000000000000000000, __s18@000000000000000000000000000000000000100000000000000000, __s19@000000000000000000000000000000000000010000010000000000, __s10@000000000000000000000000000000000000000010000000000000)
    {
    ctxt t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10, t4_11;
    info.eval->multiply_plain(ss[16], bits["010000000000000001000010000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[9], bits["001001000000000000000000000000000000000000000000000000"], t4_2);
    info.eval->multiply_plain(ss[15], bits["000000001000100000000000000000000000000000000000000000"], t4_3);
    info.eval->multiply_plain(ss[8], bits["000000000000000000001000000000000000000000000000000000"], t4_4);
    info.eval->multiply_plain(ss[11], bits["000000000000000000000000100000000000000000000000000000"], t4_5);
    info.eval->multiply_plain(ss[12], bits["000000000000000000000000010000000000001000000000000000"], t4_6);
    info.eval->multiply_plain(ss[17], bits["000000000000000000000000000100001000000000000000000000"], t4_7);
    info.eval->multiply_plain(ss[14], bits["000000000000000000000000000010000000000000000000000000"], t4_8);
    info.eval->multiply_plain(ss[18], bits["000000000000000000000000000000000000100000000000000000"], t4_9);
    info.eval->multiply_plain(ss[19], bits["000000000000000000000000000000000000010000010000000000"], t4_10);
    info.eval->multiply_plain(ss[10], bits["000000000000000000000000000000000000000010000000000000"], t4_11);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10, t4_11}, ts[4]);
    }
    
    
    // __t5 = blend(__s14@010000000000000000000000000000000000000000000000000000, __s16@001000001000000000000000100000000000000000000000000000, __v1@000001000000000000000000000000000000000000000000000000, __s11@000000000000100000000000000000000000100000000000000000, __s17@000000000000000001001000000000000000000000000000000000, __s13@000000000000000000000010010000000000010000000000000000, __s8@000000000000000000000000000100000000001010000000000000, __s10@000000000000000000000000000010000000000000000000000000, __s19@000000000000000000000000000000001000000000000000000000, __s18@000000000000000000000000000000000000000000010000000000)
    {
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9, t5_10;
    info.eval->multiply_plain(ss[14], bits["010000000000000000000000000000000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[16], bits["001000001000000000000000100000000000000000000000000000"], t5_2);
    info.eval->multiply_plain(vs[1], bits["000001000000000000000000000000000000000000000000000000"], t5_3);
    info.eval->multiply_plain(ss[11], bits["000000000000100000000000000000000000100000000000000000"], t5_4);
    info.eval->multiply_plain(ss[17], bits["000000000000000001001000000000000000000000000000000000"], t5_5);
    info.eval->multiply_plain(ss[13], bits["000000000000000000000010010000000000010000000000000000"], t5_6);
    info.eval->multiply_plain(ss[8], bits["000000000000000000000000000100000000001010000000000000"], t5_7);
    info.eval->multiply_plain(ss[10], bits["000000000000000000000000000010000000000000000000000000"], t5_8);
    info.eval->multiply_plain(ss[19], bits["000000000000000000000000000000001000000000000000000000"], t5_9);
    info.eval->multiply_plain(ss[18], bits["000000000000000000000000000000000000000000010000000000"], t5_10);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8, t5_9, t5_10}, ts[5]);
    }
    
    info.eval->add(ts[4], ts[5], vs[2]); // __v2 = __t4 + __t5
    info.eval->rotate_rows(vs[2], -23, gk, ss[20]); // __s20 = __v2 >> 23
    info.eval->rotate_rows(vs[2], -5, gk, ss[21]); // __s21 = __v2 >> 5
    info.eval->rotate_rows(vs[2], -3, gk, ss[22]); // __s22 = __v2 >> 3
    info.eval->rotate_rows(vs[2], -36, gk, ss[23]); // __s23 = __v2 >> 36
    info.eval->rotate_rows(vs[2], -53, gk, ss[24]); // __s24 = __v2 >> 53
    
    // __t6 = blend(__v2@001001000000000000000000000000000000100000000000000000, __s23@000010000010000000010000010000000000000000000000000000, __s21@000000000000010000000010000001000000000000000000000000, __s22@000000000000000100000001000010000001000000000000000000, __s20@000000000000000000000000100000000000000000000000000000, __s24@000000000000000000000000001000000000010000000000000000)
    {
    ctxt t6_1, t6_2, t6_3, t6_4, t6_5, t6_6;
    info.eval->multiply_plain(vs[2], bits["001001000000000000000000000000000000100000000000000000"], t6_1);
    info.eval->multiply_plain(ss[23], bits["000010000010000000010000010000000000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[21], bits["000000000000010000000010000001000000000000000000000000"], t6_3);
    info.eval->multiply_plain(ss[22], bits["000000000000000100000001000010000001000000000000000000"], t6_4);
    info.eval->multiply_plain(ss[20], bits["000000000000000000000000100000000000000000000000000000"], t6_5);
    info.eval->multiply_plain(ss[24], bits["000000000000000000000000001000000000010000000000000000"], t6_6);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4, t6_5, t6_6}, ts[6]);
    }
    
    
    // __t7 = blend(__s14@001000000000000000000000000000000000000000000000000000, __s16@000011000000000100000001000000000000000000000000000000, __s12@000000000010010000000000000010000000000000000000000000, __s11@000000000000000000010000001000000000000000000000000000, __v1@000000000000000000000010010000000000010000000000000000, __s17@000000000000000000000000100000000000000000000000000000, __s15@000000000000000000000000000001000001000000000000000000, __s8@000000000000000000000000000000000000100000000000000000)
    {
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8;
    info.eval->multiply_plain(ss[14], bits["001000000000000000000000000000000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[16], bits["000011000000000100000001000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[12], bits["000000000010010000000000000010000000000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[11], bits["000000000000000000010000001000000000000000000000000000"], t7_4);
    info.eval->multiply_plain(vs[1], bits["000000000000000000000010010000000000010000000000000000"], t7_5);
    info.eval->multiply_plain(ss[17], bits["000000000000000000000000100000000000000000000000000000"], t7_6);
    info.eval->multiply_plain(ss[15], bits["000000000000000000000000000001000001000000000000000000"], t7_7);
    info.eval->multiply_plain(ss[8], bits["000000000000000000000000000000000000100000000000000000"], t7_8);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8}, ts[7]);
    }
    
    info.eval->add(ts[6], ts[7], vs[3]); // __v3 = __t6 + __t7
    info.eval->rotate_rows(vs[3], -13, gk, ss[25]); // __s25 = __v3 >> 13
    info.eval->rotate_rows(vs[3], -8, gk, ss[26]); // __s26 = __v3 >> 8
    info.eval->rotate_rows(vs[3], -41, gk, ss[27]); // __s27 = __v3 >> 41
    
    // __t8 = blend(__s27@000000000000100000000000000000000000000000000000000000, __v3@000000000000010100000010000000000000010000000000000000, __s25@000000000000000000000001000000000000100000000000000000, __s26@000000000000000000000000000000001000000000000000000000, __s24@000000000000000000000000000000000000000100000000000000)
    {
    ctxt t8_1, t8_2, t8_3, t8_4, t8_5;
    info.eval->multiply_plain(ss[27], bits["000000000000100000000000000000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(vs[3], bits["000000000000010100000010000000000000010000000000000000"], t8_2);
    info.eval->multiply_plain(ss[25], bits["000000000000000000000001000000000000100000000000000000"], t8_3);
    info.eval->multiply_plain(ss[26], bits["000000000000000000000000000000001000000000000000000000"], t8_4);
    info.eval->multiply_plain(ss[24], bits["000000000000000000000000000000000000000100000000000000"], t8_5);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4, t8_5}, ts[8]);
    }
    
    
    // __t9 = blend(__s26@000000000000110000000000000000000000110000000000000000, __s25@000000000000000100000000000000001000000000000000000000, __s27@000000000000000000000011000000000000000000000000000000, __s8@000000000000000000000000000000000000000100000000000000)
    {
    ctxt t9_1, t9_2, t9_3, t9_4;
    info.eval->multiply_plain(ss[26], bits["000000000000110000000000000000000000110000000000000000"], t9_1);
    info.eval->multiply_plain(ss[25], bits["000000000000000100000000000000001000000000000000000000"], t9_2);
    info.eval->multiply_plain(ss[27], bits["000000000000000000000011000000000000000000000000000000"], t9_3);
    info.eval->multiply_plain(ss[8], bits["000000000000000000000000000000000000000100000000000000"], t9_4);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4}, ts[9]);
    }
    
    info.eval->add(ts[8], ts[9], vs[4]); // __v4 = __t8 + __t9
    info.eval->add(vs[4], ss[25], vs[5]); // __v5 = __v4 + __s25
    return vs[5];
}
    