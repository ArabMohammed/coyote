
# include <vector.hpp>

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000100000010000100111101111000000001000000011011010000000000000010010011000101100100000110001001001100000001001100000011", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000100001000000000000000000000000000000000000000000000000000000100000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000010000000000000000000000000000000000000000000100000000000000000000000000000000010000000000000000000000000000000", info);
    add_bitstring(bits, "00000010000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000100001000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000", info);
    add_bitstring(bits, "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000001000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000", info);
    add_bitstring(bits, "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000110000000000000000000000000000000000000000000010000000000000000000000100000000000000000", info);
    add_bitstring(bits, "00000000000000000100001000010000000010110111001000000001000100000010000000000010010010010000000000100000000100000000000011100", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000010000000000000000001000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000100000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000001000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000100000000000010001000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000010000000000000000000100000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000001000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000100", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "01010010000000000000000000000000000000000000000000000000010010101000000101000000000000001000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000100000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000001000000000000000000000000000000000100000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000100001000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001000", info);
    add_bitstring(bits, "00000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(11);
    ts[0] = encrypt_inputinfo);
    ts[1] = encrypt_inputinfo);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[10];
    ctxt ss[67];

    vs[0] = ts[0];
    vs[1] = ts[1];
    info.eval->multiply(vs[0], vs[1], vs[2]); // __v2 = __v0 * __v1
    info.eval->relinearize_inplace(vs[2], rk);
    info.eval->rotate_rows(vs[2], -23, gk, ss[0]); // __s0 = __v2 >> 23
    info.eval->rotate_rows(vs[2], -22, gk, ss[1]); // __s1 = __v2 >> 22
    info.eval->rotate_rows(vs[2], -107, gk, ss[2]); // __s2 = __v2 >> 107
    info.eval->rotate_rows(vs[2], -21, gk, ss[3]); // __s3 = __v2 >> 21
    info.eval->rotate_rows(vs[2], -113, gk, ss[4]); // __s4 = __v2 >> 113
    info.eval->rotate_rows(vs[2], -20, gk, ss[5]); // __s5 = __v2 >> 20
    info.eval->rotate_rows(vs[2], -70, gk, ss[6]); // __s6 = __v2 >> 70
    info.eval->rotate_rows(vs[2], -6, gk, ss[7]); // __s7 = __v2 >> 6
    info.eval->rotate_rows(vs[2], -53, gk, ss[8]); // __s8 = __v2 >> 53
    info.eval->rotate_rows(vs[2], -52, gk, ss[9]); // __s9 = __v2 >> 52
    info.eval->rotate_rows(vs[2], -72, gk, ss[10]); // __s10 = __v2 >> 72
    info.eval->rotate_rows(vs[2], -100, gk, ss[11]); // __s11 = __v2 >> 100
    info.eval->rotate_rows(vs[2], -105, gk, ss[12]); // __s12 = __v2 >> 105
    info.eval->rotate_rows(vs[2], -3, gk, ss[13]); // __s13 = __v2 >> 3
    info.eval->rotate_rows(vs[2], -33, gk, ss[14]); // __s14 = __v2 >> 33
    info.eval->rotate_rows(vs[2], -15, gk, ss[15]); // __s15 = __v2 >> 15
    info.eval->rotate_rows(vs[2], -14, gk, ss[16]); // __s16 = __v2 >> 14
    info.eval->rotate_rows(vs[2], -13, gk, ss[17]); // __s17 = __v2 >> 13
    info.eval->rotate_rows(vs[2], -116, gk, ss[18]); // __s18 = __v2 >> 116
    info.eval->rotate_rows(vs[2], -4, gk, ss[19]); // __s19 = __v2 >> 4
    info.eval->rotate_rows(vs[2], -39, gk, ss[20]); // __s20 = __v2 >> 39
    info.eval->rotate_rows(vs[2], -41, gk, ss[21]); // __s21 = __v2 >> 41
    info.eval->rotate_rows(vs[2], -85, gk, ss[22]); // __s22 = __v2 >> 85
    info.eval->rotate_rows(vs[2], -97, gk, ss[23]); // __s23 = __v2 >> 97
    info.eval->rotate_rows(vs[2], -83, gk, ss[24]); // __s24 = __v2 >> 83
    info.eval->rotate_rows(vs[2], -25, gk, ss[25]); // __s25 = __v2 >> 25
    info.eval->rotate_rows(vs[2], -2, gk, ss[26]); // __s26 = __v2 >> 2
    info.eval->rotate_rows(vs[2], -80, gk, ss[27]); // __s27 = __v2 >> 80
    info.eval->rotate_rows(vs[2], -68, gk, ss[28]); // __s28 = __v2 >> 68
    info.eval->rotate_rows(vs[2], -76, gk, ss[29]); // __s29 = __v2 >> 76
    info.eval->rotate_rows(vs[2], -64, gk, ss[30]); // __s30 = __v2 >> 64
    info.eval->rotate_rows(vs[2], -44, gk, ss[31]); // __s31 = __v2 >> 44
    info.eval->rotate_rows(vs[2], -106, gk, ss[32]); // __s32 = __v2 >> 106
    info.eval->rotate_rows(vs[2], -60, gk, ss[33]); // __s33 = __v2 >> 60
    info.eval->rotate_rows(vs[2], -90, gk, ss[34]); // __s34 = __v2 >> 90
    info.eval->rotate_rows(vs[2], -103, gk, ss[35]); // __s35 = __v2 >> 103
    info.eval->multiply(vs[0], vs[1], vs[3]); // __v3 = __v0 * __v1
    info.eval->relinearize_inplace(vs[3], rk);
    
    // __t2 = blend(__v2@01010010000000000000000000000000000000000000000000000000010010101000000101000000000000001000000000000000000000000000000000000, __s11@00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s12@00000000000000010000000000000000000000000000000000000000000100000000000000000000000000000000010000000000000000000000000000000, __s7@00000000000000000000100001000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000, __s0@00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s1@00000000000000000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s3@00000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000, __s31@00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s5@00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s13@00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s30@00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000, __s18@00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000, __s22@00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000, __s33@00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000, __s24@00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000, __v3@00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000, __s17@00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000, __s19@00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000, __s16@00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000, __s15@00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000001000000000000000000000000, __s6@00000000000000000000000000000000000000000000000000000000000000000000000000000000001000100000000000000000000000000000000000000, __s34@00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000, __s32@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000, __s35@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000, __s26@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000100000000, __s10@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000, __s2@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000, __s4@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010, __s25@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
    {
    ctxt t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8, t2_9, t2_10, t2_11, t2_12, t2_13, t2_14, t2_15, t2_16, t2_17, t2_18, t2_19, t2_20, t2_21, t2_22, t2_23, t2_24, t2_25, t2_26, t2_27, t2_28, t2_29;
    info.eval->multiply_plain(vs[2], bits["01010010000000000000000000000000000000000000000000000000010010101000000101000000000000001000000000000000000000000000000000000"], t2_1);
    info.eval->multiply_plain(ss[11], bits["00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t2_2);
    info.eval->multiply_plain(ss[12], bits["00000000000000010000000000000000000000000000000000000000000100000000000000000000000000000000010000000000000000000000000000000"], t2_3);
    info.eval->multiply_plain(ss[7], bits["00000000000000000000100001000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000"], t2_4);
    info.eval->multiply_plain(ss[0], bits["00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t2_5);
    info.eval->multiply_plain(ss[1], bits["00000000000000000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t2_6);
    info.eval->multiply_plain(ss[3], bits["00000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000"], t2_7);
    info.eval->multiply_plain(ss[31], bits["00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t2_8);
    info.eval->multiply_plain(ss[5], bits["00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t2_9);
    info.eval->multiply_plain(ss[13], bits["00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t2_10);
    info.eval->multiply_plain(ss[30], bits["00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000"], t2_11);
    info.eval->multiply_plain(ss[18], bits["00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000"], t2_12);
    info.eval->multiply_plain(ss[22], bits["00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000"], t2_13);
    info.eval->multiply_plain(ss[33], bits["00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000"], t2_14);
    info.eval->multiply_plain(ss[24], bits["00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000"], t2_15);
    info.eval->multiply_plain(vs[3], bits["00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000"], t2_16);
    info.eval->multiply_plain(ss[17], bits["00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000"], t2_17);
    info.eval->multiply_plain(ss[19], bits["00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000"], t2_18);
    info.eval->multiply_plain(ss[16], bits["00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000"], t2_19);
    info.eval->multiply_plain(ss[15], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000001000000000000000000000000"], t2_20);
    info.eval->multiply_plain(ss[6], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000001000100000000000000000000000000000000000000"], t2_21);
    info.eval->multiply_plain(ss[34], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000"], t2_22);
    info.eval->multiply_plain(ss[32], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000"], t2_23);
    info.eval->multiply_plain(ss[35], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000"], t2_24);
    info.eval->multiply_plain(ss[26], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000100000000"], t2_25);
    info.eval->multiply_plain(ss[10], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000"], t2_26);
    info.eval->multiply_plain(ss[2], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000"], t2_27);
    info.eval->multiply_plain(ss[4], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010"], t2_28);
    info.eval->multiply_plain(ss[25], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"], t2_29);
    info.eval->add_many({t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8, t2_9, t2_10, t2_11, t2_12, t2_13, t2_14, t2_15, t2_16, t2_17, t2_18, t2_19, t2_20, t2_21, t2_22, t2_23, t2_24, t2_25, t2_26, t2_27, t2_28, t2_29}, ts[2]);
    }
    
    
    // __t3 = blend(__s5@01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s20@00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s21@00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v2@00000000100000010000100111101111000000001000000011011010000000000000010010011000101100100000110001001001100000001001100000011, __s27@00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000, __s29@00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000, __s15@00000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000, __s16@00000000000000000000000000000000000000000000000000000000000000001000000000000000000000001000000000000000000000000000000000000, __s23@00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000, __s8@00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000, __s9@00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000)
    {
    ctxt t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11;
    info.eval->multiply_plain(ss[5], bits["01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t3_1);
    info.eval->multiply_plain(ss[20], bits["00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t3_2);
    info.eval->multiply_plain(ss[21], bits["00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t3_3);
    info.eval->multiply_plain(vs[2], bits["00000000100000010000100111101111000000001000000011011010000000000000010010011000101100100000110001001001100000001001100000011"], t3_4);
    info.eval->multiply_plain(ss[27], bits["00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000"], t3_5);
    info.eval->multiply_plain(ss[29], bits["00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000"], t3_6);
    info.eval->multiply_plain(ss[15], bits["00000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000"], t3_7);
    info.eval->multiply_plain(ss[16], bits["00000000000000000000000000000000000000000000000000000000000000001000000000000000000000001000000000000000000000000000000000000"], t3_8);
    info.eval->multiply_plain(ss[23], bits["00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000"], t3_9);
    info.eval->multiply_plain(ss[8], bits["00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000"], t3_10);
    info.eval->multiply_plain(ss[9], bits["00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t3_11);
    info.eval->add_many({t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11}, ts[3]);
    }
    
    info.eval->add(ts[2], ts[3], vs[4]); // __v4 = __t2 + __t3
    info.eval->rotate_rows(vs[4], -19, gk, ss[36]); // __s36 = __v4 >> 19
    info.eval->rotate_rows(vs[4], -15, gk, ss[37]); // __s37 = __v4 >> 15
    info.eval->rotate_rows(vs[4], -13, gk, ss[38]); // __s38 = __v4 >> 13
    info.eval->rotate_rows(vs[4], -12, gk, ss[39]); // __s39 = __v4 >> 12
    info.eval->rotate_rows(vs[4], -123, gk, ss[40]); // __s40 = __v4 >> 123
    info.eval->rotate_rows(vs[4], -27, gk, ss[41]); // __s41 = __v4 >> 27
    info.eval->rotate_rows(vs[4], -122, gk, ss[42]); // __s42 = __v4 >> 122
    info.eval->rotate_rows(vs[4], -90, gk, ss[43]); // __s43 = __v4 >> 90
    info.eval->rotate_rows(vs[4], -96, gk, ss[44]); // __s44 = __v4 >> 96
    info.eval->rotate_rows(vs[4], -86, gk, ss[45]); // __s45 = __v4 >> 86
    info.eval->rotate_rows(vs[4], -124, gk, ss[46]); // __s46 = __v4 >> 124
    info.eval->rotate_rows(vs[4], -20, gk, ss[47]); // __s47 = __v4 >> 20
    info.eval->rotate_rows(vs[4], -38, gk, ss[48]); // __s48 = __v4 >> 38
    info.eval->rotate_rows(vs[4], -91, gk, ss[49]); // __s49 = __v4 >> 91
    
    // __t4 = blend(__v3@00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s28@00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000, __s16@00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000)
    {
    ctxt t4_1, t4_2, t4_3;
    info.eval->multiply_plain(vs[3], bits["00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[28], bits["00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000"], t4_2);
    info.eval->multiply_plain(ss[16], bits["00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000"], t4_3);
    info.eval->add_many({t4_1, t4_2, t4_3}, ts[4]);
    }
    
    
    // __t5 = blend(__s3@00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __v4@00000000000000000000000000000000000000000000000010000000000000000001000000000000000000000000000000000000000000000000000000000)
    {
    ctxt t5_1, t5_2;
    info.eval->multiply_plain(ss[3], bits["00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t5_1);
    info.eval->multiply_plain(vs[4], bits["00000000000000000000000000000000000000000000000010000000000000000001000000000000000000000000000000000000000000000000000000000"], t5_2);
    info.eval->add(t5_1, t5_2, ts[5]);
    }
    
    info.eval->add(ts[4], ts[5], vs[5]); // __v5 = __t4 + __t5
    info.eval->rotate_rows(vs[5], -32, gk, ss[50]); // __s50 = __v5 >> 32
    info.eval->rotate_rows(vs[5], -12, gk, ss[51]); // __s51 = __v5 >> 12
    info.eval->rotate_rows(vs[5], -13, gk, ss[52]); // __s52 = __v5 >> 13
    
    // __t6 = blend(__v2@00000000000000000100001000010000000010110111001000000001000100000010000000000010010010010000000000100000000100000000000011100, __v4@00000000000000000000000000000000000000000000000000000000000010000000000000000000100000000000000000000000000000000000000000000, __s14@00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    {
    ctxt t6_1, t6_2, t6_3;
    info.eval->multiply_plain(vs[2], bits["00000000000000000100001000010000000010110111001000000001000100000010000000000010010010010000000000100000000100000000000011100"], t6_1);
    info.eval->multiply_plain(vs[4], bits["00000000000000000000000000000000000000000000000000000000000010000000000000000000100000000000000000000000000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[14], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t6_3);
    info.eval->add_many({t6_1, t6_2, t6_3}, ts[6]);
    }
    
    
    // __t7 = blend(__s48@00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s36@00000000000000000000001000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s43@00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s37@00000000000000000000000000000000000000110000000000000000000000000000000000000000000010000000000000000000000100000000000000000, __s38@00000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s45@00000000000000000000000000000000000000000001000000000000000000000000000000000100000000000000000000000000000000000000000000000, __s44@00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000, __s40@00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000, __s42@00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001000, __s51@00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, __s50@00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000, __s41@00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000, __s52@00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000, __s49@00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000, __s46@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000100, __s39@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000, __s47@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000)
    {
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10, t7_11, t7_12, t7_13, t7_14, t7_15, t7_16, t7_17;
    info.eval->multiply_plain(ss[48], bits["00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[36], bits["00000000000000000000001000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[43], bits["00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[37], bits["00000000000000000000000000000000000000110000000000000000000000000000000000000000000010000000000000000000000100000000000000000"], t7_4);
    info.eval->multiply_plain(ss[38], bits["00000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t7_5);
    info.eval->multiply_plain(ss[45], bits["00000000000000000000000000000000000000000001000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t7_6);
    info.eval->multiply_plain(ss[44], bits["00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000"], t7_7);
    info.eval->multiply_plain(ss[40], bits["00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000"], t7_8);
    info.eval->multiply_plain(ss[42], bits["00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001000"], t7_9);
    info.eval->multiply_plain(ss[51], bits["00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"], t7_10);
    info.eval->multiply_plain(ss[50], bits["00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000"], t7_11);
    info.eval->multiply_plain(ss[41], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000"], t7_12);
    info.eval->multiply_plain(ss[52], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000"], t7_13);
    info.eval->multiply_plain(ss[49], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000"], t7_14);
    info.eval->multiply_plain(ss[46], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000100"], t7_15);
    info.eval->multiply_plain(ss[39], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000"], t7_16);
    info.eval->multiply_plain(ss[47], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000"], t7_17);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7, t7_8, t7_9, t7_10, t7_11, t7_12, t7_13, t7_14, t7_15, t7_16, t7_17}, ts[7]);
    }
    
    info.eval->add(ts[6], ts[7], vs[6]); // __v6 = __t6 + __t7
    info.eval->rotate_rows(vs[6], -3, gk, ss[53]); // __s53 = __v6 >> 3
    info.eval->rotate_rows(vs[6], -104, gk, ss[54]); // __s54 = __v6 >> 104
    info.eval->rotate_rows(vs[6], -34, gk, ss[55]); // __s55 = __v6 >> 34
    info.eval->rotate_rows(vs[6], -110, gk, ss[56]); // __s56 = __v6 >> 110
    info.eval->rotate_rows(vs[6], -17, gk, ss[57]); // __s57 = __v6 >> 17
    info.eval->rotate_rows(vs[6], -27, gk, ss[58]); // __s58 = __v6 >> 27
    info.eval->rotate_rows(vs[6], -111, gk, ss[59]); // __s59 = __v6 >> 111
    info.eval->rotate_rows(vs[6], -31, gk, ss[60]); // __s60 = __v6 >> 31
    info.eval->rotate_rows(vs[6], -95, gk, ss[61]); // __s61 = __v6 >> 95
    info.eval->rotate_rows(vs[6], -16, gk, ss[62]); // __s62 = __v6 >> 16
    info.eval->rotate_rows(vs[6], -19, gk, ss[63]); // __s63 = __v6 >> 19
    info.eval->rotate_rows(vs[6], -102, gk, ss[64]); // __s64 = __v6 >> 102
    info.eval->rotate_rows(vs[6], -56, gk, ss[65]); // __s65 = __v6 >> 56
    info.eval->rotate_rows(vs[6], -33, gk, ss[66]); // __s66 = __v6 >> 33
    
    // __t8 = blend(__s40@00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s39@00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s16@00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000, __s37@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000)
    {
    ctxt t8_1, t8_2, t8_3, t8_4;
    info.eval->multiply_plain(ss[40], bits["00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[39], bits["00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[16], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t8_3);
    info.eval->multiply_plain(ss[37], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000"], t8_4);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4}, ts[8]);
    }
    
    
    // __t9 = blend(__v6@00000000000000000000000000000000000000100001000000000000000000000000000000000000000000000000000000100000000000000000000000000, __v2@00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000)
    {
    ctxt t9_1, t9_2;
    info.eval->multiply_plain(vs[6], bits["00000000000000000000000000000000000000100001000000000000000000000000000000000000000000000000000000100000000000000000000000000"], t9_1);
    info.eval->multiply_plain(vs[2], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000"], t9_2);
    info.eval->add(t9_1, t9_2, ts[9]);
    }
    
    info.eval->add(ts[8], ts[9], vs[7]); // __v7 = __t8 + __t9
    info.eval->add(vs[7], vs[6], vs[8]); // __v8 = __v7 + __v6
    
    // __t10 = blend(__s63@01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s54@00000010000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s53@00000000000000000000100001000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000, __s56@00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s66@00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, __s65@00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000, __s61@00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000, __s57@00000000000000000000000000000000000000000000000000000000000100000000000010001000000000000000000000000000000000000000000000000, __s59@00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000, __s55@00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000, __s58@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000, __s64@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000, __s62@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000, __s60@00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000)
    {
    ctxt t10_1, t10_2, t10_3, t10_4, t10_5, t10_6, t10_7, t10_8, t10_9, t10_10, t10_11, t10_12, t10_13, t10_14;
    info.eval->multiply_plain(ss[63], bits["01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t10_1);
    info.eval->multiply_plain(ss[54], bits["00000010000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t10_2);
    info.eval->multiply_plain(ss[53], bits["00000000000000000000100001000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000"], t10_3);
    info.eval->multiply_plain(ss[56], bits["00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t10_4);
    info.eval->multiply_plain(ss[66], bits["00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], t10_5);
    info.eval->multiply_plain(ss[65], bits["00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000"], t10_6);
    info.eval->multiply_plain(ss[61], bits["00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000"], t10_7);
    info.eval->multiply_plain(ss[57], bits["00000000000000000000000000000000000000000000000000000000000100000000000010001000000000000000000000000000000000000000000000000"], t10_8);
    info.eval->multiply_plain(ss[59], bits["00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000"], t10_9);
    info.eval->multiply_plain(ss[55], bits["00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000"], t10_10);
    info.eval->multiply_plain(ss[58], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000"], t10_11);
    info.eval->multiply_plain(ss[64], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000"], t10_12);
    info.eval->multiply_plain(ss[62], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000"], t10_13);
    info.eval->multiply_plain(ss[60], bits["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000"], t10_14);
    info.eval->add_many({t10_1, t10_2, t10_3, t10_4, t10_5, t10_6, t10_7, t10_8, t10_9, t10_10, t10_11, t10_12, t10_13, t10_14}, ts[10]);
    }
    
    info.eval->add(vs[4], ts[10], vs[9]); // __v9 = __v4 + __t10
    return vs[9];
}
    