
# include <vector.hpp>

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "0000001000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000001000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000001000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000001100000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000100000000000000000000000", info);
    add_bitstring(bits, "1000000010000000010000010010000010001000000000000100000000000010", info);
    add_bitstring(bits, "1100000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000001000010000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000001000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000001000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000001000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000100000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000001000000000000000100000001000001000100000000000001000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000001000000000000000000000000", info);
    add_bitstring(bits, "0110001001000100001010100001001101100001101000010010001100000000", info);
    add_bitstring(bits, "0000000000000000000000000000000010000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000010000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000010000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "1100000010000100000010000001000000000000001000000010000000000010", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000100000000000000", info);
    add_bitstring(bits, "0000000000000000000000000001000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000010000000000000000", info);
    add_bitstring(bits, "0000000000000000000000010000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000010000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000001000000000000000000", info);
    add_bitstring(bits, "0100000000000000000000000000000000000000001000000000000100000000", info);
    add_bitstring(bits, "0000001000000000000000000000000000000000000000000000001000000000", info);
    add_bitstring(bits, "0000000000000000010000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000100000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000001001100000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000001000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000010001000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000000000000000010", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000000000010000000000000", info);
    add_bitstring(bits, "0000000000000000000000000010000000000000000000000000000000000000", info);
    add_bitstring(bits, "1000000000000000000000000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0010000000000000000010000000000000000000000000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(6);
    ts[0] = encrypt_inputinfo);
    ts[1] = encrypt_inputinfo);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[7];
    ctxt ss[32];

    vs[0] = ts[0];
    vs[1] = ts[1];
    info.eval->multiply(vs[0], vs[1], vs[2]); // __v2 = __v0 * __v1
    info.eval->relinearize_inplace(vs[2], rk);
    info.eval->rotate_rows(vs[2], -19, gk, ss[0]); // __s0 = __v2 >> 19
    info.eval->rotate_rows(vs[2], -43, gk, ss[1]); // __s1 = __v2 >> 43
    info.eval->rotate_rows(vs[2], -44, gk, ss[2]); // __s2 = __v2 >> 44
    info.eval->rotate_rows(vs[2], -20, gk, ss[3]); // __s3 = __v2 >> 20
    info.eval->rotate_rows(vs[2], -30, gk, ss[4]); // __s4 = __v2 >> 30
    info.eval->rotate_rows(vs[2], -18, gk, ss[5]); // __s5 = __v2 >> 18
    info.eval->rotate_rows(vs[2], -24, gk, ss[6]); // __s6 = __v2 >> 24
    info.eval->rotate_rows(vs[2], -12, gk, ss[7]); // __s7 = __v2 >> 12
    info.eval->rotate_rows(vs[2], -33, gk, ss[8]); // __s8 = __v2 >> 33
    info.eval->rotate_rows(vs[2], -50, gk, ss[9]); // __s9 = __v2 >> 50
    info.eval->rotate_rows(vs[2], -36, gk, ss[10]); // __s10 = __v2 >> 36
    info.eval->rotate_rows(vs[2], -23, gk, ss[11]); // __s11 = __v2 >> 23
    info.eval->rotate_rows(vs[2], -56, gk, ss[12]); // __s12 = __v2 >> 56
    info.eval->rotate_rows(vs[2], -41, gk, ss[13]); // __s13 = __v2 >> 41
    info.eval->rotate_rows(vs[2], -2, gk, ss[14]); // __s14 = __v2 >> 2
    info.eval->rotate_rows(vs[2], -39, gk, ss[15]); // __s15 = __v2 >> 39
    info.eval->rotate_rows(vs[2], -16, gk, ss[16]); // __s16 = __v2 >> 16
    info.eval->rotate_rows(vs[2], -35, gk, ss[17]); // __s17 = __v2 >> 35
    info.eval->rotate_rows(vs[2], -22, gk, ss[18]); // __s18 = __v2 >> 22
    info.eval->rotate_rows(vs[2], -1, gk, ss[19]); // __s19 = __v2 >> 1
    info.eval->multiply(vs[0], vs[1], vs[3]); // __v3 = __v0 * __v1
    info.eval->relinearize_inplace(vs[3], rk);
    
    // __t2 = blend(__v2@1000000010000000010000010010000010001000000000000100000000000010, __s4@0100000000000000000000000000000000000000001000000000000100000000, __s11@0010000000000000000010000000000000000000000000000000000000000000, __s8@0000001000000000000000000000000000000000000000000000000000000000, __s16@0000000001000000000000000000000000000000000000000000000000000000, __s10@0000000000000100000000000000000000000000000000000000000000000000, __s18@0000000000000000001000000000000000000000000000000000000000000000, __s0@0000000000000000000000100000000000000000000000000000000000000000, __v3@0000000000000000000000001000010000000000000000000000000000000000, __s3@0000000000000000000000000001001100000000000000000000000000000000, __s5@0000000000000000000000000000000001100000000000000000000000000000, __s9@0000000000000000000000000000000000000001000000000000000000000000, __s7@0000000000000000000000000000000000000000100000000000000000000000, __s1@0000000000000000000000000000000000000000000000010000000000000000, __s14@0000000000000000000000000000000000000000000000000010001000000000)
    {
    ctxt t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8, t2_9, t2_10, t2_11, t2_12, t2_13, t2_14, t2_15;
    info.eval->multiply_plain(vs[2], bits["1000000010000000010000010010000010001000000000000100000000000010"], t2_1);
    info.eval->multiply_plain(ss[4], bits["0100000000000000000000000000000000000000001000000000000100000000"], t2_2);
    info.eval->multiply_plain(ss[11], bits["0010000000000000000010000000000000000000000000000000000000000000"], t2_3);
    info.eval->multiply_plain(ss[8], bits["0000001000000000000000000000000000000000000000000000000000000000"], t2_4);
    info.eval->multiply_plain(ss[16], bits["0000000001000000000000000000000000000000000000000000000000000000"], t2_5);
    info.eval->multiply_plain(ss[10], bits["0000000000000100000000000000000000000000000000000000000000000000"], t2_6);
    info.eval->multiply_plain(ss[18], bits["0000000000000000001000000000000000000000000000000000000000000000"], t2_7);
    info.eval->multiply_plain(ss[0], bits["0000000000000000000000100000000000000000000000000000000000000000"], t2_8);
    info.eval->multiply_plain(vs[3], bits["0000000000000000000000001000010000000000000000000000000000000000"], t2_9);
    info.eval->multiply_plain(ss[3], bits["0000000000000000000000000001001100000000000000000000000000000000"], t2_10);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000000000001100000000000000000000000000000"], t2_11);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000000000000000000000001000000000000000000000000"], t2_12);
    info.eval->multiply_plain(ss[7], bits["0000000000000000000000000000000000000000100000000000000000000000"], t2_13);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000000000000000000000000000000010000000000000000"], t2_14);
    info.eval->multiply_plain(ss[14], bits["0000000000000000000000000000000000000000000000000010001000000000"], t2_15);
    info.eval->add_many({t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7, t2_8, t2_9, t2_10, t2_11, t2_12, t2_13, t2_14, t2_15}, ts[2]);
    }
    
    
    // __t3 = blend(__s19@1000000000000000000000000000000000000000000000000000000000000000, __v2@0110001001000100001010100001001101100001101000010010001100000000, __s16@0000000010000000000000000000000000000000000000000000000000000000, __s18@0000000000000000010000000000000000000000000000000000000000000000, __s13@0000000000000000000000010000000000000000000000000000000000000000, __s9@0000000000000000000000001000000000000000000000000000000000000000, __s15@0000000000000000000000000010000000000000000000000000000000000000, __s17@0000000000000000000000000000010000000000000000000000000000000000, __s5@0000000000000000000000000000000010000000000000000000000000000000, __s12@0000000000000000000000000000000000001000000000000000000000000000, __s2@0000000000000000000000000000000000000000000000000100000000000000, __s1@0000000000000000000000000000000000000000000000000000000000000010)
    {
    ctxt t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11, t3_12;
    info.eval->multiply_plain(ss[19], bits["1000000000000000000000000000000000000000000000000000000000000000"], t3_1);
    info.eval->multiply_plain(vs[2], bits["0110001001000100001010100001001101100001101000010010001100000000"], t3_2);
    info.eval->multiply_plain(ss[16], bits["0000000010000000000000000000000000000000000000000000000000000000"], t3_3);
    info.eval->multiply_plain(ss[18], bits["0000000000000000010000000000000000000000000000000000000000000000"], t3_4);
    info.eval->multiply_plain(ss[13], bits["0000000000000000000000010000000000000000000000000000000000000000"], t3_5);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000000001000000000000000000000000000000000000000"], t3_6);
    info.eval->multiply_plain(ss[15], bits["0000000000000000000000000010000000000000000000000000000000000000"], t3_7);
    info.eval->multiply_plain(ss[17], bits["0000000000000000000000000000010000000000000000000000000000000000"], t3_8);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000000000010000000000000000000000000000000"], t3_9);
    info.eval->multiply_plain(ss[12], bits["0000000000000000000000000000000000001000000000000000000000000000"], t3_10);
    info.eval->multiply_plain(ss[2], bits["0000000000000000000000000000000000000000000000000100000000000000"], t3_11);
    info.eval->multiply_plain(ss[1], bits["0000000000000000000000000000000000000000000000000000000000000010"], t3_12);
    info.eval->add_many({t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, t3_8, t3_9, t3_10, t3_11, t3_12}, ts[3]);
    }
    
    info.eval->add(ts[2], ts[3], vs[4]); // __v4 = __t2 + __t3
    info.eval->rotate_rows(vs[4], -48, gk, ss[20]); // __s20 = __v4 >> 48
    info.eval->rotate_rows(vs[4], -4, gk, ss[21]); // __s21 = __v4 >> 4
    info.eval->rotate_rows(vs[4], -47, gk, ss[22]); // __s22 = __v4 >> 47
    info.eval->rotate_rows(vs[4], -13, gk, ss[23]); // __s23 = __v4 >> 13
    info.eval->rotate_rows(vs[4], -3, gk, ss[24]); // __s24 = __v4 >> 3
    info.eval->rotate_rows(vs[4], -46, gk, ss[25]); // __s25 = __v4 >> 46
    info.eval->rotate_rows(vs[4], -9, gk, ss[26]); // __s26 = __v4 >> 9
    info.eval->rotate_rows(vs[4], -62, gk, ss[27]); // __s27 = __v4 >> 62
    info.eval->rotate_rows(vs[4], -29, gk, ss[28]); // __s28 = __v4 >> 29
    info.eval->rotate_rows(vs[4], -50, gk, ss[29]); // __s29 = __v4 >> 50
    info.eval->rotate_rows(vs[4], -15, gk, ss[30]); // __s30 = __v4 >> 15
    info.eval->rotate_rows(vs[4], -37, gk, ss[31]); // __s31 = __v4 >> 37
    
    // __t4 = blend(__s22@1100000000000000000000000000000000000000000000000000000000000000, __v4@0000001000000000000000100000001000001000100000000000001000000000, __s25@0000000010000000000000000000000000000000000000000000000000000000, __s21@0000000000000100000000000000000000000000000000000000000000000000, __s29@0000000000000000000010000000000000000000000000000000000000000000, __s24@0000000000000000000000000001000000000000000000000000000000000000, __s23@0000000000000000000000000000000000000000001000000000000000000000, __s6@0000000000000000000000000000000000000000000001000000000000000000, __s20@0000000000000000000000000000000000000000000000000010000000000000, __s28@0000000000000000000000000000000000000000000000000000000000000010)
    {
    ctxt t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10;
    info.eval->multiply_plain(ss[22], bits["1100000000000000000000000000000000000000000000000000000000000000"], t4_1);
    info.eval->multiply_plain(vs[4], bits["0000001000000000000000100000001000001000100000000000001000000000"], t4_2);
    info.eval->multiply_plain(ss[25], bits["0000000010000000000000000000000000000000000000000000000000000000"], t4_3);
    info.eval->multiply_plain(ss[21], bits["0000000000000100000000000000000000000000000000000000000000000000"], t4_4);
    info.eval->multiply_plain(ss[29], bits["0000000000000000000010000000000000000000000000000000000000000000"], t4_5);
    info.eval->multiply_plain(ss[24], bits["0000000000000000000000000001000000000000000000000000000000000000"], t4_6);
    info.eval->multiply_plain(ss[23], bits["0000000000000000000000000000000000000000001000000000000000000000"], t4_7);
    info.eval->multiply_plain(ss[6], bits["0000000000000000000000000000000000000000000001000000000000000000"], t4_8);
    info.eval->multiply_plain(ss[20], bits["0000000000000000000000000000000000000000000000000010000000000000"], t4_9);
    info.eval->multiply_plain(ss[28], bits["0000000000000000000000000000000000000000000000000000000000000010"], t4_10);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7, t4_8, t4_9, t4_10}, ts[4]);
    }
    
    
    // __t5 = blend(__v4@1100000010000100000010000001000000000000001000000010000000000010, __s30@0000001000000000000000000000000000000000000000000000001000000000, __s31@0000000000000000000000100000000000000000000000000000000000000000, __s27@0000000000000000000000000000001000000000000000000000000000000000, __s23@0000000000000000000000000000000000001000000000000000000000000000, __s26@0000000000000000000000000000000000000000100000000000000000000000, __v2@0000000000000000000000000000000000000000000001000000000000000000)
    {
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    info.eval->multiply_plain(vs[4], bits["1100000010000100000010000001000000000000001000000010000000000010"], t5_1);
    info.eval->multiply_plain(ss[30], bits["0000001000000000000000000000000000000000000000000000001000000000"], t5_2);
    info.eval->multiply_plain(ss[31], bits["0000000000000000000000100000000000000000000000000000000000000000"], t5_3);
    info.eval->multiply_plain(ss[27], bits["0000000000000000000000000000001000000000000000000000000000000000"], t5_4);
    info.eval->multiply_plain(ss[23], bits["0000000000000000000000000000000000001000000000000000000000000000"], t5_5);
    info.eval->multiply_plain(ss[26], bits["0000000000000000000000000000000000000000100000000000000000000000"], t5_6);
    info.eval->multiply_plain(vs[2], bits["0000000000000000000000000000000000000000000001000000000000000000"], t5_7);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7}, ts[5]);
    }
    
    info.eval->add(ts[4], ts[5], vs[5]); // __v5 = __t4 + __t5
    info.eval->add(vs[5], ss[27], vs[6]); // __v6 = __v5 + __s27
    return vs[6];
}
    