
# include <vector.hpp>

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "0000000000000000000000000010000000000001000000", info);
    add_bitstring(bits, "0001000000000001000000100000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000010010000000000000000000100", info);
    add_bitstring(bits, "0010000000000101000010010000000000000010000000", info);
    add_bitstring(bits, "0000001000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000000011", info);
    add_bitstring(bits, "0010000000000101000001000000000000000000000000", info);
    add_bitstring(bits, "0000000000100000000000000010000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000010000000000100010000000", info);
    add_bitstring(bits, "0000000000000000000000010010000000000000000000", info);
    add_bitstring(bits, "0000100000000000000000010000000000000000001000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000010000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000001000", info);
    add_bitstring(bits, "0000000000000000000000000001000000000010000000", info);
    add_bitstring(bits, "0000000000000001000000010000000000000000001000", info);
    add_bitstring(bits, "0000000000000000000001000000000000100000000000", info);
    add_bitstring(bits, "0000000000000000000010000000000000000000000000", info);
    add_bitstring(bits, "0000100000000000000100000000000000000000000000", info);
    add_bitstring(bits, "1111000000000100110000000000000000000000010000", info);
    add_bitstring(bits, "1010001000000100011000000000000000000000010000", info);
    add_bitstring(bits, "0000001000000000000001000000000000000000000000", info);
    add_bitstring(bits, "0000000000100000000011000000000000000001000000", info);
    add_bitstring(bits, "0001000000000000000001000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000000001000000000000000001000000", info);
    add_bitstring(bits, "0000000000000000000000010000110000000000000100", info);
    add_bitstring(bits, "0000000000100000000000000111000000000000001011", info);
    add_bitstring(bits, "0000001000000000000000010000000000000000010000", info);
    add_bitstring(bits, "0001000000000000000000000000000000000000000000", info);
    add_bitstring(bits, "0100000000000000100100000000000000000000000000", info);
    add_bitstring(bits, "0000000000000000001000100000000000000000000000", info);
    add_bitstring(bits, "0000000000100000000000000000110000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000100000000000000000000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000001001000", info);
    add_bitstring(bits, "0000000000000000000000000000000000000000010000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(15);
    ts[0] = encrypt_input("1111111111110110011111111111101110011111111111101101111111111110111111111111111011100111111111111011111111111111101100111111111111011101111111111110111111111111111011111111111111101111111111111110111000111111111111011111111111111101111111111111110111011111111111101110011111111111101110111111111111011101111111111110111111111111111011100111111111111011100011111111111101111111111111110111111111111111011100", info);
    ts[1] = encrypt_input("0000000001111111111111110000000000011111111111111111111111111111111111111111111111100001111111111111111001111111111111111000111111111111111100000000001111111111111111", info);
    ts[2] = encrypt_input("0000000000000000111111111111111000000011111111111111110011111111111111111111111111111111111111111111111111111111111111110000000000000111111111111111101111111111111111", info);
    ts[3] = encrypt_input("1111111111111110111111111111111111111111111111111111111111111111000000000111111111111111100111111111111111111111111111111110000000000000000000000011111111111111110000", info);
    ts[4] = encrypt_input("0000111111111111111100000111111111111111100000000000000111111111111111111111111111111111111111111111110000000000000001111111111111111011111111111111111111111111111111", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[10];
    ctxt ss[17];

    vs[0] = ts[0];
    info.eval->rotate_rows(vs[0], -45, gk, ss[0]); // __s0 = __v0 >> 45
    info.eval->rotate_rows(vs[0], -39, gk, ss[1]); // __s1 = __v0 >> 39
    info.eval->rotate_rows(vs[0], -31, gk, ss[2]); // __s2 = __v0 >> 31
    vs[1] = ts[1];
    info.eval->rotate_rows(vs[1], -39, gk, ss[3]); // __s3 = __v1 >> 39
    vs[2] = ts[2];
    info.eval->rotate_rows(vs[2], -40, gk, ss[4]); // __s4 = __v2 >> 40
    vs[3] = ts[3];
    vs[4] = ts[4];
    info.eval->rotate_rows(vs[4], -34, gk, ss[5]); // __s5 = __v4 >> 34
    
    // __t5 = blend(__v0@1010001000000100011000000000000000000000010000, __s2@0100000000000000100100000000000000000000000000, __s1@0001000000000001000000100000000000000000000000, __s0@0000100000000000000000010000000000000000001000)
    {
    ctxt t5_1, t5_2, t5_3, t5_4;
    info.eval->multiply_plain(vs[0], bits["1010001000000100011000000000000000000000010000"], t5_1);
    info.eval->multiply_plain(ss[2], bits["0100000000000000100100000000000000000000000000"], t5_2);
    info.eval->multiply_plain(ss[1], bits["0001000000000001000000100000000000000000000000"], t5_3);
    info.eval->multiply_plain(ss[0], bits["0000100000000000000000010000000000000000001000"], t5_4);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4}, ts[5]);
    }
    
    
    // __t6 = blend(__v3@1111000000000100110000000000000000000000010000, __s1@0000100000000000000100000000000000000000000000, __s0@0000001000000000000000000000000000000000000000, __v0@0000000000000001000000010000000000000000001000, __s2@0000000000000000001000100000000000000000000000)
    {
    ctxt t6_1, t6_2, t6_3, t6_4, t6_5;
    info.eval->multiply_plain(vs[3], bits["1111000000000100110000000000000000000000010000"], t6_1);
    info.eval->multiply_plain(ss[1], bits["0000100000000000000100000000000000000000000000"], t6_2);
    info.eval->multiply_plain(ss[0], bits["0000001000000000000000000000000000000000000000"], t6_3);
    info.eval->multiply_plain(vs[0], bits["0000000000000001000000010000000000000000001000"], t6_4);
    info.eval->multiply_plain(ss[2], bits["0000000000000000001000100000000000000000000000"], t6_5);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4, t6_5}, ts[6]);
    }
    
    info.eval->multiply(ts[5], ts[6], vs[5]); // __v5 = __t5 * __t6
    info.eval->relinearize_inplace(vs[5], rk);
    info.eval->rotate_rows(vs[5], -23, gk, ss[6]); // __s6 = __v5 >> 23
    info.eval->rotate_rows(vs[5], -2, gk, ss[7]); // __s7 = __v5 >> 2
    info.eval->rotate_rows(vs[5], -4, gk, ss[8]); // __s8 = __v5 >> 4
    info.eval->rotate_rows(vs[5], -26, gk, ss[9]); // __s9 = __v5 >> 26
    
    // __t7 = blend(__s8@0000000000100000000000000010000000000000000000, __s7@0000000000000000000000000100000000000000000000, __s6@0000000000000000000000000001000000000010000000, __v5@0000000000000000000000000000000000000000001000, __s9@0000000000000000000000000000000000000000000011)
    {
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5;
    info.eval->multiply_plain(ss[8], bits["0000000000100000000000000010000000000000000000"], t7_1);
    info.eval->multiply_plain(ss[7], bits["0000000000000000000000000100000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[6], bits["0000000000000000000000000001000000000010000000"], t7_3);
    info.eval->multiply_plain(vs[5], bits["0000000000000000000000000000000000000000001000"], t7_4);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000000000000000000000000000011"], t7_5);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5}, ts[7]);
    }
    
    
    // __t8 = blend(__v4@0000000000100000000000000111000000000000001011, __s5@0000000000000000000000000000000000000010000000)
    {
    ctxt t8_1, t8_2;
    info.eval->multiply_plain(vs[4], bits["0000000000100000000000000111000000000000001011"], t8_1);
    info.eval->multiply_plain(ss[5], bits["0000000000000000000000000000000000000010000000"], t8_2);
    info.eval->add(t8_1, t8_2, ts[8]);
    }
    
    info.eval->multiply(ts[7], ts[8], vs[6]); // __v6 = __t7 * __t8
    info.eval->relinearize_inplace(vs[6], rk);
    info.eval->rotate_rows(vs[6], -42, gk, ss[10]); // __s10 = __v6 >> 42
    info.eval->rotate_rows(vs[6], -1, gk, ss[11]); // __s11 = __v6 >> 1
    info.eval->rotate_rows(vs[6], -23, gk, ss[12]); // __s12 = __v6 >> 23
    
    // __t9 = blend(__s12@0001000000000000000001000000000000000000000000, __s10@0000001000000000000000010000000000000000010000, __s11@0000000000000000000000000010000000000001000000, __v6@0000000000000000000000000000000000000000001000)
    {
    ctxt t9_1, t9_2, t9_3, t9_4;
    info.eval->multiply_plain(ss[12], bits["0001000000000000000001000000000000000000000000"], t9_1);
    info.eval->multiply_plain(ss[10], bits["0000001000000000000000010000000000000000010000"], t9_2);
    info.eval->multiply_plain(ss[11], bits["0000000000000000000000000010000000000001000000"], t9_3);
    info.eval->multiply_plain(vs[6], bits["0000000000000000000000000000000000000000001000"], t9_4);
    info.eval->add_many({t9_1, t9_2, t9_3, t9_4}, ts[9]);
    }
    
    
    // __t10 = blend(__s7@0001000000000000000000000000000000000000000000, __s8@0000001000000000000001000000000000000000000000, __s6@0000000000000000000000010010000000000000000000, __s9@0000000000000000000000000000000000000001001000, __v5@0000000000000000000000000000000000000000010000)
    {
    ctxt t10_1, t10_2, t10_3, t10_4, t10_5;
    info.eval->multiply_plain(ss[7], bits["0001000000000000000000000000000000000000000000"], t10_1);
    info.eval->multiply_plain(ss[8], bits["0000001000000000000001000000000000000000000000"], t10_2);
    info.eval->multiply_plain(ss[6], bits["0000000000000000000000010010000000000000000000"], t10_3);
    info.eval->multiply_plain(ss[9], bits["0000000000000000000000000000000000000001001000"], t10_4);
    info.eval->multiply_plain(vs[5], bits["0000000000000000000000000000000000000000010000"], t10_5);
    info.eval->add_many({t10_1, t10_2, t10_3, t10_4, t10_5}, ts[10]);
    }
    
    info.eval->add(ts[9], ts[10], vs[7]); // __v7 = __t9 + __t10
    info.eval->rotate_rows(vs[7], -17, gk, ss[13]); // __s13 = __v7 >> 17
    info.eval->rotate_rows(vs[7], -33, gk, ss[14]); // __s14 = __v7 >> 33
    
    // __t11 = blend(__s14@0000000000100000000000000000110000000000000000, __s13@0000000000000000000010010000000000000000000100, __v7@0000000000000000000001000000000000000001000000)
    {
    ctxt t11_1, t11_2, t11_3;
    info.eval->multiply_plain(ss[14], bits["0000000000100000000000000000110000000000000000"], t11_1);
    info.eval->multiply_plain(ss[13], bits["0000000000000000000010010000000000000000000100"], t11_2);
    info.eval->multiply_plain(vs[7], bits["0000000000000000000001000000000000000001000000"], t11_3);
    info.eval->add_many({t11_1, t11_2, t11_3}, ts[11]);
    }
    
    
    // __t12 = blend(__s4@0000000000100000000011000000000000000001000000, __v2@0000000000000000000000010000110000000000000100)
    {
    ctxt t12_1, t12_2;
    info.eval->multiply_plain(ss[4], bits["0000000000100000000011000000000000000001000000"], t12_1);
    info.eval->multiply_plain(vs[2], bits["0000000000000000000000010000110000000000000100"], t12_2);
    info.eval->add(t12_1, t12_2, ts[12]);
    }
    
    info.eval->add(ts[11], ts[12], vs[8]); // __v8 = __t11 + __t12
    info.eval->rotate_rows(vs[8], -38, gk, ss[15]); // __s15 = __v8 >> 38
    info.eval->rotate_rows(vs[8], -41, gk, ss[16]); // __s16 = __v8 >> 41
    
    // __t13 = blend(__s3@0010000000000101000010010000000000000010000000, __v1@0000000000000000000001000000000000100000000000)
    {
    ctxt t13_1, t13_2;
    info.eval->multiply_plain(ss[3], bits["0010000000000101000010010000000000000010000000"], t13_1);
    info.eval->multiply_plain(vs[1], bits["0000000000000000000001000000000000100000000000"], t13_2);
    info.eval->add(t13_1, t13_2, ts[13]);
    }
    
    
    // __t14 = blend(__s15@0010000000000101000001000000000000000000000000, __v8@0000000000000000000010000000000000000000000000, __s16@0000000000000000000000010000000000100010000000)
    {
    ctxt t14_1, t14_2, t14_3;
    info.eval->multiply_plain(ss[15], bits["0010000000000101000001000000000000000000000000"], t14_1);
    info.eval->multiply_plain(vs[8], bits["0000000000000000000010000000000000000000000000"], t14_2);
    info.eval->multiply_plain(ss[16], bits["0000000000000000000000010000000000100010000000"], t14_3);
    info.eval->add_many({t14_1, t14_2, t14_3}, ts[14]);
    }
    
    info.eval->sub(ts[13], ts[14], vs[9]); // __v9 = __t13 - __t14
    return vs[9];
}
    